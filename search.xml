<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>那些好的句子</title>
      <link href="/2022/10/11/classic-quotations7/"/>
      <url>/2022/10/11/classic-quotations7/</url>
      
        <content type="html"><![CDATA[<p>⒈ </p><blockquote><p>在一辆列车上，男孩拿着手机发微博，他在微博上写下：“在车上，我对她一见钟情。不知为什么，她一直望着窗外。”男孩默默的看着她，心想她一定不知道，过了一会儿，微博上有人回复了他：“因为玻璃上倒映着你的脸。”</p></blockquote><p>——《车站》</p><p>⒉ </p><blockquote><p>事实上，车站比婚礼现场见证了更多真挚的接吻，医院的墙壁比教堂聆听了更多的祷告。</p></blockquote><p>——《车站》</p><p>⒊</p><blockquote><p>民谣太穷了，一听就是一包烟，一整夜，可烟就剩一根了，还要撑一夜，可我就剩一点爱了，还要过一生。</p></blockquote><p>——《我们的世界很民谣》</p><p>⒋</p><blockquote><p>“我自问这辈子没做过坏事，为什么要被生活勒住喉咙。”爸爸在日记里写到。</p></blockquote><p>——《父亲写的散文诗》</p><p>⒌ </p><blockquote><p>刘翔是唯一一个在直线跑道上真正打败黑人的运动员，甚至创造了连白人都没做到的记录。刘翔参加了48次世界大赛，36次冠军，6次亚军，3次季军，然而有些人却只记得他退赛2次</p></blockquote><p>——《追梦赤子心》</p><p>⒍ </p><blockquote><p>故乡安置不了肉身，从此有了漂泊，有了远方。</p></blockquote><blockquote><p>异乡安置不了灵魂，从此有了归乡，有了故乡</p></blockquote><p>——《异乡人》</p><a id="more"></a> <p>⒎ </p><blockquote><p>考59分比考0分更难过，最痛苦的不是不曾拥有，而是差一点就可以。</p></blockquote><p>——《浪费》</p><p>⒏ </p><blockquote><p>你那么孤独，却说一个人真好。</p></blockquote><blockquote><p>月亮很亮 亮也没用 没用也亮 我喜欢你 喜欢也没用 没用也喜欢</p></blockquote><p>——《残酷月光》</p><p>⒐ </p><blockquote><p>东野圭吾说:“曾经拥有的东西失去了，并不代表就会回到原来没有那种东西的时候”</p></blockquote><blockquote><p>耳机里面是喜欢但还不会唱的歌 手机屏幕上的照片是喜欢但还没在一起的人</p></blockquote><p>——《其实都没有》</p><p>⒑ </p><blockquote><p>多数人25岁就死了，一直到75岁才埋。</p></blockquote><p>——《活着》</p><hr><p>①</p><blockquote><p>让我想起了一个故事：我上大学没钱，平常不打牌的爸爸拿着家里仅剩的1000块钱去朋友家打了一晚上麻将。第二天他疲倦的把学费交到我手里，我一直不知道他一个不大会打牌的人为什么会赢这么多钱。直到我长大后他朋友儿子也到了读大学的年纪，爸爸拿出了家里用来翻修的钱又去打了一晚上的麻将，输光了。</p></blockquote><p>——《浪子回头》</p><p>②</p><blockquote><p>爱情这东西，始于颜值，陷于才华，忠于人品，痴于肉体，迷于声音，醉于深情，最后折于物质，败于现实。</p></blockquote><p>——《问》</p><p>③</p><blockquote><p>不要以为你放不下的人也同样放不下你，鱼没有水会死，水没有鱼却会更清澈</p></blockquote><p>——《像鱼》</p><p>④​</p><blockquote><p>你永远都不会知道，你在路上随便见到的路人，是别人做梦都想见到的人</p></blockquote><p>——《后来》</p><p>⑤</p><blockquote><p>“只要有想见的人，就不是孤身一人”</p></blockquote><p>——《夏目友人帐》</p><p>⑥</p><blockquote><p>起初我们揣着糊涂装明白</p></blockquote><blockquote><p>后来我们揣着明白装糊涂</p></blockquote><blockquote><p>并不是我们愿意活得不明不白</p></blockquote><blockquote><p>只是好多事情一用力就会拆穿</p></blockquote><blockquote><p>拆穿就会失去</p></blockquote><blockquote><p>长大以后的世界总是这么脆弱</p></blockquote><p>——《那女孩对我说》</p><p>⑦</p><blockquote><p>俄罗斯方块告诉我们。合群就会消失</p></blockquote><blockquote><p>但不合群就会被淘汰，很现实很残酷</p></blockquote><p>——《幻听》</p><p>⑧</p><blockquote><p>就是想试一下，这强扭的瓜到底有多苦。</p></blockquote><p>——《得不到你》​</p><p>⑨</p><blockquote><p>世界上最互相信任的两个人，应该是初中老师和高中老师。</p></blockquote><blockquote><p>因为初中老师总是说：“这个知识点以后高中老师会讲的。”</p></blockquote><blockquote><p>而高中老师则表示：“这个知识点你们初中老师应该教过。”</p></blockquote><p>——《对话老师》</p><p>⑩</p><blockquote><p>​梦碎日本富士山，泪洒港台将军澳。世间纵有千万曲，人间再无黄家驹。</p></blockquote><p>——《真的爱你》</p><hr><p>⒈​</p><blockquote><p>鱼对水说：“你看不见我的眼泪，因为我的泪在水里。”水对鱼说：“我能感受到你的眼泪 ，因为你的泪在我的心里。”</p></blockquote><p>——《像鱼》</p><p>⒉</p><blockquote><p>有些人见面要坐飞机</p></blockquote><blockquote><p>有些人见面要坐时光机</p></blockquote><blockquote><p>有些人见面只能做梦</p></blockquote><p>——《浪子回头》</p><p>⒊</p><blockquote><p>​男孩错过一个最想娶的女孩就会变得很随便，女孩错过一个最想嫁的男孩就会变得很挑剔。</p></blockquote><p>——《问》</p><p>⒋</p><blockquote><p>别人稍一注意你，你就敞开心扉，你觉得这是坦率，其实这是孤独。</p></blockquote><p>——《rainaftersummer》</p><p>⒌</p><blockquote><p>我这辈子最遗憾的事</p></blockquote><blockquote><p>就是推我入地狱的人也曾带我上天堂</p></blockquote><p>——《幻听》</p><p>⒍</p><blockquote><p>​“慢慢大家会明白的，无法跟喜欢的人在一起，其实是人生的常态。”</p></blockquote><p>——《后来》</p><p>⒎</p><blockquote><p>当你觉得孤独无助时，想一想还有十几亿的细胞只为了你一个人而活。</p></blockquote><p>——《相守》</p><p>⒏</p><blockquote><p>一旬败给年少轻狂的理想</p></blockquote><blockquote><p>二旬败给青涩无知的爱情</p></blockquote><blockquote><p>三旬败给沧桑寂寥的现实</p></blockquote><p>——《理想三旬》</p><p>⒐</p><blockquote><p>人在饿的时候会选择不爱的食物，会在寂寞的时候选择不爱的人，因为强扭的瓜不甜但是解渴。</p></blockquote><p>——《只是没有如果》</p><p>⒑</p><blockquote><p>​有时候人就是这么奇怪，受了天大的委屈都不会吭声，但听到安慰的话却泣不成声。那些硬生生憋回去的眼泪，往往会败给一句简单的安慰。</p></blockquote><p>——《哑巴》</p><hr><p>⒈</p><blockquote><p>后来，有人会送你三十块一枝的玫瑰、三百块一支的口红、三千块一件的大衣、三万块一个的包，但你的爱情啊，是从三块钱一杯的奶茶开始的。</p></blockquote><p>——《成都》</p><p>⒉</p><blockquote><p>《无声告白》里有一句话，写道：我们终其一生，就是要摆脱他人的期待，找到真正的自己。希望我们每一个人都能够活出自己想要的样子。</p></blockquote><p>——《有人》</p><p>⒊</p><blockquote><p>女儿出嫁时父亲对她说：“女儿，一定要尊重你的丈夫。你甚至可以崇拜他。但是要记住，你们之间矛盾和不高兴的事情不要跟我讲。因为你终会原谅他，而我不会。”</p></blockquote><p>——《泪海》</p><p>⒋</p><blockquote><p>哪儿有那么多两情相悦，多少人不过是到了年纪，该成家了，所以一拍即合，和一个顺眼的人在一起了，吵架打架带孩子，一辈子就这么过了。</p></blockquote><p>——《木偶人》</p><p>⒌</p><blockquote><p>​带女朋友去吃饭遇到流氓向女朋友吹口哨该怎么办。你若是年轻就应该提刀砍他，若是过了那个年纪，就应该努力挣钱，带她去高档点的餐厅吃饭，那里没有流氓。</p></blockquote><p>——《男孩别哭》</p><p>⒍</p><blockquote><p>不在一起就不在一起吧，反正一辈子也没多长。</p></blockquote><p>——《关于郑州的记忆》</p><p>⒎</p><blockquote><p>拉黑删除是小孩子才做的事情，成年人只是不再讲话。</p></blockquote><p>——《有可能的夜晚》</p><p>⒏</p><blockquote><p>已经路过的风景就不要再打听，失而复得的东西根本回不到最初的样子，就当风没吹过，你没来过，我没爱过。</p></blockquote><p>——《我们都被忘了》</p><p>⒐</p><blockquote><p>你成功的速度一定要超过父母老去的速度！</p></blockquote><p>——《真的爱你》</p><p>⒑</p><blockquote><p>七友： 谁人曾照顾过我的感受</p></blockquote><blockquote><p>天后： 我明明都懂却拼死效忠</p></blockquote><blockquote><p>趁早： 我可以笑着扮演你配角</p></blockquote><blockquote><p>淘汰： 我却得到你安慰的淘汰</p></blockquote><blockquote><p>洋葱： 盘底洋葱永远是调味品</p></blockquote><blockquote><p>说谎： 我没有说谎是爱情说谎</p></blockquote><blockquote><p>传奇： 我一直在你身边未走远</p></blockquote><blockquote><p>温柔： 不打扰是我最后的温柔</p></blockquote><blockquote><p>浪费： 也许我根本喜欢被你浪费</p></blockquote><blockquote><p>安静: 希望他是真的比我还要爱你</p></blockquote><blockquote><p>成全: 换来了一句谢谢你的成全</p></blockquote><blockquote><p>成全： 我对你付出的青春那么多年</p></blockquote><blockquote><p>春秋： 我没有为你伤春悲秋，不配有憾事</p></blockquote><p>——《七友》</p><hr><p>⒈</p><blockquote><p>如果我们晚一点相遇</p></blockquote><blockquote><p>你恰好成熟</p></blockquote><blockquote><p>我恰好温柔</p></blockquote><blockquote><p>我们是不是就能走到最后了</p></blockquote><p>——《怎样遇见你》</p><p>⒉</p><blockquote><p>​人生最好的三个词：</p></blockquote><blockquote><p>“久别重逢，失而复得，虚惊一场。”</p></blockquote><blockquote><p>却唯独没有一个词叫“和好如初”，</p></blockquote><blockquote><p>和好容易，如初多难啊.</p></blockquote><p>——《路过人间》</p><p>⒊</p><blockquote><p>敏感的人都特别懂事 只要稍微给点暗示 就能读懂背后的意思 所以从来不会让别人为难 只会为难自己</p></blockquote><p>——《生而为人》</p><p>⒋</p><blockquote><p>其实很多个瞬间</p></blockquote><blockquote><p>你应该也是喜欢过我的</p></blockquote><blockquote><p>只不过这些瞬间稍纵即逝</p></blockquote><blockquote><p>你没坚持 我也没当真</p></blockquote><p>——《心动》</p><p>⒌</p><blockquote><p>我没有精力去认识一个新的人</p></blockquote><blockquote><p>或者花费力气去重新维系一段感情</p></blockquote><blockquote><p>更没有办法再把自己的故事讲述一遍又一遍</p></blockquote><blockquote><p>任何需要花费时间去了解或者被了解的过程</p></blockquote><blockquote><p>在我看来都太累人</p></blockquote><p>——《岁月神偷》</p><p>⒍</p><blockquote><p>朋友十二画，</p></blockquote><blockquote><p>恋人十二画，</p></blockquote><blockquote><p>爱人十二画，</p></blockquote><blockquote><p>家人十二画，</p></blockquote><blockquote><p>十二是四季的写照，</p></blockquote><blockquote><p>十二是一生的缩影，</p></blockquote><blockquote><p>所以， 十二的名字叫难忘，</p></blockquote><blockquote><p>我给你的备注是十一，</p></blockquote><blockquote><p>因为朋友差一点，恋人差一点，爱人差一点，家人差一点，</p></blockquote><blockquote><p>所以，十一的名字叫遗憾。</p></blockquote><p>——《十二》</p><p>⒎</p><blockquote><p>别人删除你的时候，系统不会告诉你，</p></blockquote><blockquote><p>因为怕你伤心；</p></blockquote><blockquote><p>你删除别人的时候，系统会问你确不确定</p></blockquote><blockquote><p>因为怕你后悔。</p></blockquote><p>——《空白格》</p><p>⒏</p><blockquote><p>小时候喜欢吃西红柿，以为会一辈子爱吃，等到长大了，不爱吃了就是不爱吃了。没有理由，我没有错，西红柿也没有错，错的只是那些自以为是的一辈子。</p></blockquote><p>——《想自由》</p><p>⒐</p><blockquote><p>你再等等 我很快就会不喜欢你了</p></blockquote><p>——《幻听》</p><p>⒑</p><blockquote><p>长到了可以和父辈举杯碰杯的年纪</p></blockquote><blockquote><p>却没能成为年少时心中了不起的人</p></blockquote><blockquote><p>我不知道穿上西装后是否还能看动画片</p></blockquote><blockquote><p>抽着烟是否还有小朋友跟我玩</p></blockquote><blockquote><p>总说吃得苦中苦 方为人上人</p></blockquote><blockquote><p>我不想做什么人上人</p></blockquote><blockquote><p>可这世间疾苦一样没有放过我</p></blockquote><p>——《世本常态》</p><hr><p>⒈</p><blockquote><p>“到底有多少爱而不得的人, 成为被心灵操控的木偶, 可是你不知道, 木偶是不会哭的啊, 也不会孤独…”</p></blockquote><p>——《木偶人》</p><p>⒉​</p><blockquote><p>世界上最孤独的鲸鱼，发出的频率是52赫兹 ，而正常鲸鱼是15至25赫兹，世上没任何鲸鱼能听懂它，它没有鱼群，没有同类 ，但它没放弃大海， 从千里外的太平洋游到大西洋 ，纵然呐喊二十五年没人应答，但大海有多浩瀚它比别的鲸鱼都清楚……</p></blockquote><p>——《化身孤岛的鲸》</p><p>⒊</p><blockquote><p>“晚安”的意思就是“我今天打烊了”，只是不对外营业了而已，跟睡不睡觉没关系，其实“晚安”还有另一种意思，把温柔与浪漫藏进晚安里，“我对全世界说晚安 ，独独对你说喜欢。”</p></blockquote><p>——《晚安》</p><p>⒋</p><blockquote><p>“盛世烟火由你而放，他们都在看烟花，终无人想起你。”</p></blockquote><p>——《烟火里的尘埃》</p><p>⒌</p><blockquote><p>​总会有一天我的床头有你随意翻看的书，洗漱室的漱口水旁是你的粉底液，更衣室的白衬衫里夹杂着你的白裙，车副座是你的专属位置朋友无一不知道你的样子，连夜晚独自在客厅等我归来都成了我们最幸福的小事，然后我在前方你大步靠近并握住我的手，我低头对你说，“我们回家”，你可以不拉着我的手不挽着我的胳膊，不需要抱着也不需要背着，但一定要跟我回家。</p></blockquote><p>——《慢慢喜欢你》</p><p>⒍</p><blockquote><p>除了两情相悦，其余的喜欢都是心酸。</p></blockquote><p>——《处处吻》</p><p>⒎</p><blockquote><p>关于想你这件事，躲得过对酒当歌的夜，躲不过四下无人的街。</p></blockquote><p>——《我很快乐》</p><p>⒏</p><blockquote><p>喝着孤独的酒</p></blockquote><blockquote><p>迎着自由的风</p></blockquote><blockquote><p>等一个没有归期的人</p></blockquote><blockquote><p>在余生里做着只有自己的梦</p></blockquote><p>——《往后余生》</p><p>⒐</p><blockquote><p>​对一个男人来说 最无能为力的事儿就是 在最没有能力的年纪，碰见了，最想照顾一生的姑娘。</p></blockquote><p>——《再见你好》</p><p>⒑</p><blockquote><p>在恋爱里打动我的​从来都不是对方送了什么贵重的东西，或者搞个什么大场面出来，还有承诺啊海誓山盟啊，而是一种下意识的惦记。夜里醒来迷迷糊糊先给我盖好被子，路上回家想起我随口提的东西就买了捎回来，吃到好吃的一定要往我嘴里塞一把，像小朋友一样，像爸妈一样，用天真去对你好，用本能去爱。</p></blockquote><p>——《不将就》</p><hr><p>⒈</p><blockquote><p>大话西游里孙悟空说：“我不戴紧箍救不了她，戴了紧箍爱不了她。一万年太久只争朝夕，一路走来才发现没有什么是永垂不朽。我们终于懂得曾经离我们一步之遥的人，一旦错过，之后哪怕化身绝世英雄，身披金甲战衣，脚踏七彩祥云，一跃八千里，也未必追的回来。</p></blockquote><p>——《过客》</p><p>⒉</p><blockquote><p>有一个民谣青年曾说：最单纯的喜欢就是，就算你拒绝了我，我对你也永远没有埋怨。但我不会再靠近了。如果你有求于我，我依然会鞠躬尽瘁。从今往后我会把喜欢藏起来，不再招摇过市了，我会努力过得好，希望你也是。</p></blockquote><p>——《他和她》</p><p>⒊</p><blockquote><p>一个定律：</p></blockquote><blockquote><p>越是热情就越会越不被珍惜</p></blockquote><blockquote><p>你越是费尽心思的去取悦一个人</p></blockquote><blockquote><p>那个人就越有可能让你痛彻心扉</p></blockquote><blockquote><p>记住一句话别爱太满 物极必反</p></blockquote><p>——《萤的殊途》 ​​​</p><p>⒋</p><blockquote><p>一双鞋，刚买的时候蹭上一点灰都要蹲下来擦干净，穿久之后即使被人踩一脚可能也很少低头。人大抵都是如此，不论对物还是对情，最初，她皱一下眉你都心疼，到后来，她掉眼泪你也不大紧张了。</p></blockquote><p>——《斑马斑马》</p><p>⒌</p><blockquote><p>​我也曾把我光阴浪费。</p></blockquote><blockquote><p>甚至莽撞到视死如归。</p></blockquote><blockquote><p>却因为爱上了你。</p></blockquote><blockquote><p>才开始渴望长命百岁。</p></blockquote><p>——《认真的老去》</p><p>⒍</p><blockquote><p>是不是越成熟越难爱上一个人</p></blockquote><blockquote><p>其实不是</p></blockquote><blockquote><p>只是越成熟越能看清那不是爱</p></blockquote><p>——《你，好不好》</p><p>⒎</p><blockquote><p>说起来男孩子真幸运 不论多浪多人渣 做了多少错事 只要有朝一日幡然醒悟 浪子回头 还是会遇到真心爱他的姑娘 而女孩子 经历几番风雨之后 大多都不想再去看彩虹了 也不敢去了 ​</p></blockquote><p>——《浪子回头》</p><p>⒏</p><blockquote><p>后来我也许终究发现，其实只是因为那个下午的阳光很好，穿过窗户的斑驳很好看，我写论文太累，而你恰巧站在那里，和谁站在那里无所谓，天时地利人和都具备，我喜欢的是当时的环境，不是你。</p></blockquote><p>——《再见你好》</p><p>⒐</p><blockquote><p>“最初的时候想当英雄</p></blockquote><blockquote><p>想变超人</p></blockquote><blockquote><p>想成为被光环围绕的很厉害的人</p></blockquote><blockquote><p>后来啊</p></blockquote><blockquote><p>后来只想做一个普通人</p></blockquote><blockquote><p>养一只猫一条狗</p></blockquote><blockquote><p>有一个小房子 和一个爱人”</p></blockquote><p>——《有可能的夜晚》</p><p>⒑</p><blockquote><p>春娇与志明的余春娇说：因为他喜欢抽烟为了有共同话题我也去抽烟，后来他说他要戒烟了，因为他喜欢的女孩子不喜欢他抽烟。所以他戒了烟，而我却没有。</p></blockquote><p>——《戒烟》</p><hr><p>⒈</p><blockquote><p>大学时候，宿舍里有个免费座机，一吊丝舍友天天给女朋友打电话聊天，一聊就是半夜，吵得大家都睡不着。有一天我们偷偷的把电话线剪了，结果他还是聊到半夜，当晚我们久久不能入睡。</p></blockquote><p>——《我绝对不能失去你》</p><p>⒉</p><blockquote><p>为什么我喜欢的人，是要靠伤害我来长大，最后拿成熟稳重，去爱别的小朋友。</p></blockquote><p>——《椿》</p><p>⒊</p><blockquote><p>​爱上一个人，始于颜值，陷于才华，忠于人品； 爱上一首歌，始于歌名，陷于旋律，忠于词意。</p></blockquote><p>——《过客》</p><p>⒋</p><blockquote><p>​后来宋冬野开了酒吧</p></blockquote><blockquote><p>抱着吉他安静地唱着斑马</p></blockquote><blockquote><p>陈粒也放弃寻找自己的祝星</p></blockquote><blockquote><p>马頔因为一首南山南火了起来</p></blockquote><blockquote><p>尧十三不再信奉北方女王</p></blockquote><blockquote><p>赵雷也停止了追寻南方姑娘的脚步</p></blockquote><blockquote><p>如果董小姐没牵过宋冬野的手</p></blockquote><blockquote><p>祝星一开始就很爱陈粒</p></blockquote><blockquote><p>马頔小时候不认识舒傲寒</p></blockquote><blockquote><p>尧十三错过了他的北方女王</p></blockquote><blockquote><p>赵雷也没去过南方</p></blockquote><p>——《斑马斑马》</p><p>⒌</p><blockquote><p>​​成年人最体面的告别方式大概就是</p></blockquote><blockquote><p>我的最后一条消息你没有回</p></blockquote><blockquote><p>而我也默契的 没有再发</p></blockquote><blockquote><p>从此 我们互为过客</p></blockquote><p>——《遇见》</p><p>⒍</p><blockquote><p>“我试图用那些漂亮的句子来形容你。但是不行。我字字推敲写出长长一段话。你眉眼一弯熠熠生辉。就让我觉得。不行。这些文字写不出你眼里的星辰。写不出你唇角的春风。无论哪个词。都及不上你半分的惊艳。”</p></blockquote><p>——《鲨鱼》</p><p>⒎</p><blockquote><p>​年少时遇见了一个太过惊艳的人，往后的余生都不想再将就</p></blockquote><p>——《往后余生》</p><p>⒏</p><blockquote><p>​是你演技太差，让人一眼就看穿，还是我演技太好，微笑背后的孤独，终是无人看破。</p></blockquote><p>——《再见你好》</p><p>⒐</p><blockquote><p>有人问马頔，你把《南山南》写的这么悲伤，是不是这歌有一个故事。他说，你听到这首歌的时候，它就已经和我无关了，你掉的眼泪，才是只有你自己知道的故事。</p></blockquote><p>——《南山南》</p><p>⒑</p><blockquote><p>​“根据北宋哲学家邵雍的计算，世界上的事物将在十二万九千六百年后，完全重现。也就是说，在十二万九千六百年之后，我还会遇见你”</p></blockquote><p>——《遇见》</p><hr><p>⒈</p><blockquote><p>刚才有人问我该怎么区分孤独与寂寞，有天你走在大街上突然下雨了，你躲在屋檐下找遍了手机通讯录也不知道要找谁给你送伞，那一刻你是孤独的，而寂寞，是你一个人躲在屋檐下安静的等雨停。</p></blockquote><p>——《预感》</p><p>⒉</p><blockquote><p>这个社会，最可悲的莫过于那些既不是学霸也不是学渣的人。他们听不懂课，作业不会做，不逃课，不捣乱纪律，为考试着急，却又无奈于现状。三分钟热度，又恨自己不争气，更是以最普遍的身份埋没在人群中，正在过着最最煎熬的日子。</p></blockquote><p>——《旧时光》</p><p>⒊</p><blockquote><p>当一个女生在你面前放下她的高冷与不屑，像个听话的小孩子耐心的听着你讲述她所不知道的事，她睁大眼睛看着你，不忍错过关于你的一丝一毫，我想她应该很爱你。</p></blockquote><p>——《原谅》</p><p>⒋</p><blockquote><p>慢慢大家会明白的​， 无法跟喜欢的人在一起，其实是人生的常态。慢慢大家也都会明白，爱不爱，可不可以在一起，能不能结婚，是三件截然不同的事情。</p></blockquote><p>——《我们》</p><p>⒌</p><blockquote><p>希望你不要再碰到​像我这样的人，敏感，缺爱，总是闹你，经常瞎想，老吵着你陪我，总让你很累吧，但又希望你碰到这样的人，因为这样的人真的好爱好爱你啊。</p></blockquote><p>——《遇见》</p><p>⒍</p><blockquote><p>比起牵手，接吻，更喜欢的还是拥抱，当你用双臂紧紧把一个人箍在怀里时，没什么比那更能让人体会到什么叫做拥有了。</p></blockquote><p>——《Le Calin》​</p><p>⒎</p><blockquote><p>以前我一直不明白为什么“爱你的每个瞬间，像飞驰而过的地铁。”直到有一次我站在没有安全门的站台里等进站的列车，飞驰而过的地铁卷起的风让人忍不住想要随列车而动。那一瞬间我才明白，原来爱一个人，就是想要不顾一切跟他走。</p></blockquote><p>——《虎口脱险》</p><p>⒏</p><blockquote><p>“我当然知道人都是会变的，也从未指望过你永远如初，但感觉到你对我不似从前的时候，还是忍不住偷偷难过了很久。”</p></blockquote><p>——《后来的我们》</p><p>⒐</p><blockquote><p>如果你爱一个人，不是下课给人家买买水，不是短信发来发去，也不是周末一起出来唱唱歌聊聊天吃吃饭，而是努力做一个出色的人，因为以后的以后，可能还有别的人爱她，你要做的是把别人都比下去，你要变得优秀，要比其他人都优秀。</p></blockquote><p>——《纯粹》</p><p>⒑</p><blockquote><p>一杯热水，你没在前十分钟喝掉，它就冷凉；一份热爱，你没有在期望的时间内回应，它就冷了。我可以为你变得出类拔萃，看你喜欢的电影，听你偏爱的歌曲；我可以跨过千山万水去找你，也愿意在原地为你画地成牢。但我心里有个付出的期限，一旦到达时间，我就必须得走。</p></blockquote><p>——《再见你好》</p><hr><p>⒈</p><blockquote><p>以前我看到</p></blockquote><blockquote><p>“所爱隔山海，山海不可平”</p></blockquote><blockquote><p>那时我觉得</p></blockquote><blockquote><p>“海有舟可渡，山有路可行”</p></blockquote><blockquote><p>后来才发现</p></blockquote><blockquote><p>“山海皆可平，难平是人心”</p></blockquote><p>——《余香》</p><p>⒉</p><blockquote><p>​这里荒芜寸草不生，</p></blockquote><blockquote><p>后来你来这走了一遭，</p></blockquote><blockquote><p>奇迹般万物生长，</p></blockquote><blockquote><p>这里是我的心。</p></blockquote><blockquote><p>喜欢倒着读这首小诗</p></blockquote><p>——《余香》</p><p>⒊</p><blockquote><p>“他可能是真的喜欢你 但这一点也不妨碍他喜欢别人 其实最遗憾的是从来都没有感受过那种被人坚定选择的感觉 就像是他只是刚好需要 你只是刚好在”</p></blockquote><p>——《需要人陪》</p><p>⒋</p><blockquote><p>世界上最糟糕的事情之一，就是你觉得自己 配不上你喜欢的那个人，就像两个人并肩站在下雨天的屋檐下，你不敢先开口说一起走吧，因为你连伞也没有。</p></blockquote><p>——《网易云热评》</p><p>⒌</p><blockquote><p>​有那么一瞬间，因为一个人的一句话，就像被泼了一盆冷水一样，唰的一下，从头冷到脚，语言这东西，在表达爱意的时候是那么无力，在表达伤害的时候却又如此锋利。</p></blockquote><p>——《网易云热评》</p><p>⒍</p><blockquote><p>后来我发现世界真的很大</p></blockquote><blockquote><p>没有刻意地见面</p></blockquote><blockquote><p>就真没有再见过了</p></blockquote><p>——《到此为止》</p><p>⒎</p><blockquote><p>​我们总是喜欢拿顺其自然</p></blockquote><blockquote><p>来敷衍人生道路上的荆棘</p></blockquote><blockquote><p>却很少承认</p></blockquote><blockquote><p>真正的顺其自然</p></blockquote><blockquote><p>其实是竭尽所能之后的不强求</p></blockquote><blockquote><p>而非两手一摊的不作为</p></blockquote><p>——《一如年少模样》</p><p>⒏</p><blockquote><p>缘分这事，能不负对方就好，想要不负此生，真的很难。</p></blockquote><p>——《知足》</p><p>⒐</p><blockquote><p>​很多时候生活中的意外跟惊喜总是很突然，预测是很没有意义的事，不想去猜结果，过好每一个当下，感谢所有摸黑的路上亮起的灯，当我发光的时候希望也可以为你照亮。</p></blockquote><p>——《网易云热评》</p><p>⒑</p><blockquote><p>“他缺点多吗？”“多，像星星一样多。”“那优点呢？”“像太阳一样少。”“那你为什么喜欢他？”“因为太阳一出来星星就都不见了。”</p></blockquote><p>——《需要人陪》</p><hr><p>⒈</p><blockquote><p>数学老师问:“你是想和你爱的人平行还是相交？”班上的人都喊出了“相交！”数学老师又说:“平行线令人惋惜，因为他们永不相交，相交线令人心痛，因为他们相交后便越行越远。”全班人一片寂静。</p></blockquote><p>——《i hate u i love u》</p><p>⒉</p><blockquote><p>如果我喜欢你，我会主动往你的方向走几步再多几步；如果你看我走过来了却没有迎接我的意思那我就会停下来了。世界上有很多东西我们可以靠艰苦奋斗得来，唯独对于爱情，我不太想努力；两个人势均力敌公平有平等的爱与被爱</p></blockquote><p>——《假装》</p><p>⒊</p><blockquote><p>​“有时候觉得爱一个人的感觉就像是在赌。你押上你的时间你的精力你的一整颗心想要他回头看你一眼，再一眼。你押得越来越多，越来越舍不得收手。有的人赢得衣钵满盆，有的人输得分文不剩。别说你不求回报。上了赌桌的人，没有一个想空着口袋走。”</p></blockquote><p>——《你从不知道》</p><p>⒋</p><blockquote><p>20多岁的你迷茫又着急，你想要房子你想要汽车，你想要旅行你想要高品质生活，你那么年轻却窥觑整个世界，你那么浮躁却想要看透生活，你不断催促自己赶快成长却沉不下心来认真读一篇文章，你一次次吹响前进的号角，却总是倒在离出发不远的地方，晚安熬夜的人们。</p></blockquote><p>——《这个年纪》</p><p>⒌</p><blockquote><p>​向来比较擅长的自我保护方式是，一旦觉察到对方的冰冷态度就自觉退避三舍，从来不会想要去捂热这段关系。就跟趋利避害似的，惯性的只想靠近温暖的人。</p></blockquote><p>——《网易云热评》</p><p>⒍</p><blockquote><p>我的爸爸他有点世俗，有点贪小便宜，有点不可理喻，甚至有时候有点虚假，但他却努力教我所有美好的品质，他想我成为好的人，一切的不堪他都一个人承受，只是因为我是他的儿子，他很平凡，什么都给不了我，却又什么都给了我。</p></blockquote><p>——《父亲写的散文诗》</p><p>⒎</p><blockquote><p>老爸虽然没让我住上别墅，但他也没有让我流浪街头。他虽然没让我穿上上千块的名牌，但也没让我冻着。他虽然没让我成为富二代，但也没缺我零花钱。他虽然没带我天天去饭馆吃饭，但也让我每餐都吃饱饱的。感谢老爸，您陪我长大，我陪您变老。</p></blockquote><p>——《父亲写的散文诗》</p><p>⒏</p><blockquote><p>思念有生命，因为它会长大。记忆无生命，因为它不会变老。</p></blockquote><p>——《网易云热评》</p><p>⒐</p><blockquote><p>说好永远的，不知怎么就散了。最后自己想来想去，竟然也搞不清楚当初是什么原因把彼此分开的。然后，你忽然醒悟，感情原来是这么脆弱的，经得起风雨，却经不起平凡</p></blockquote><p>——《你是年少的欢喜》</p><p>⒑</p><blockquote><p>​频频回头的人注定走不了远路。</p></blockquote><p>——《天亮以前说再见》</p><hr><p>⒈</p><blockquote><p>明明在生气，故意不理对方。许久了才发现原来对方一直没在意或者根本不知道！才发现自己一直做无用功的闷气。然后别人稍微对自己好一点就瞬间原谅对方，甚至觉得是自己错了。悲伤，一切都只是自己的内心戏，根本没人注意到。</p></blockquote><p>——《想要你知道》</p><p>⒉</p><blockquote><p>可以做朋友么 这是故事的开始</p></blockquote><blockquote><p>还可以做朋友么 这是故事的结尾</p></blockquote><p>——《遥不可及的你》</p><p>⒊</p><blockquote><p>不爱你的人，洗澡洗一夜，吃饭吃一天，五点说起床，八点说晚安。</p></blockquote><p>——《你回头看》</p><p>⒋</p><blockquote><p>他喜欢喝白开水，碰巧你是瓶雪碧；你想成为他喜欢的，于是拼了命的晃走你身体里的二氧化碳…然后看看自己像个什么，你只是瓶没了气的甜水而已。</p></blockquote><p>——《出卖》</p><p>⒌</p><blockquote><p>唯一的遗憾是我们连一张合照都没有，就像从来没在我人生出现过一样。</p></blockquote><p>——《四块五》</p><p>⒍</p><blockquote><p>张爱玲说过忘记一个人只需要两件东西，一个是新欢 一个是时间，你选择了新欢，而我选择了时间</p></blockquote><p>——《网易云热评》</p><p>⒎</p><blockquote><p>“一个人在变得铁石心肠之前也曾付出了全部的温柔和善意”</p></blockquote><p>——《网易云热评》</p><p>⒏</p><blockquote><p>你怎么舍得 让一个满眼都是你的人 扛着所有负面情绪 一次又一次逼着自己放下你 带着失落从而选择离开</p></blockquote><p>——《网易云热评》</p><p>⒐</p><blockquote><p>​失去一个人最让你痛苦的</p></blockquote><blockquote><p>不是刚刚失去时那种汹涌的难受</p></blockquote><blockquote><p>而是在你以为时间可以治愈一切时</p></blockquote><blockquote><p>却隔三差五猝不及防地想到这个人 挥之不去 去了又来</p></blockquote><p>——《走不出的回忆》</p><p>⒑​</p><blockquote><p>很想主动联系你，很想关心你，很想知道你最近过得好不好，也很想紧紧的抱着你并告诉你，我很爱你很想你。但是有些爱，只能止于唇齿，掩于岁月。如果喜欢占八分，那么自尊留两分，我爱你但我也需要爱自己。</p></blockquote><p>——《网易云热评》</p>]]></content>
      
      
      <categories>
          
          <category> 名言名句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典 </tag>
            
            <tag> 名言名句 </tag>
            
            <tag> 唯美 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGINX + TOMCAT + Docker 环境构筑</title>
      <link href="/2022/09/28/make-nginx-tomcat-dev/"/>
      <url>/2022/09/28/make-nginx-tomcat-dev/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/make-nginx-tomcat-dev-1.jpg?imageView2/2/w/1000"><h1 id="NGINX"><a href="#NGINX" class="headerlink" title="NGINX"></a>NGINX</h1><p>Nginx是一款轻量级的Web服务器、反向代理服务器，同时也提供了IMAP/POP3/SMTP服务，在BSD-like 协议下发行。由于它的内存占用少，启动极，高并发能力强，在互联网项目中广泛应用。</p><p>相比Apache，克服了C10K问题。</p><blockquote><p>Nginx读作：[‘ɛndʒɪn eks]  (engine x)</p></blockquote><blockquote><p>官网： <a href="https://nginx.org/" target="_blank" rel="noopener">NGINX</a></p></blockquote><blockquote><p>Nginx配置： <a href="https://www.ohtudou.com/2021/03/11/nginx-setup-intro/">Nginx配置详解</a> </p></blockquote><a id="more"></a><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><blockquote><p>正式名称：Apache Tomcat<br>官网： <a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Apache Tomcat®</a></p></blockquote><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p><blockquote><p>官网： <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a></p></blockquote><h1 id="全体像"><a href="#全体像" class="headerlink" title="全体像"></a>全体像</h1><p>全体构成如下：</p><img src="http://static.ohtudou.cc/static/images/make-nginx-tomcat-dev-2.png?imageView2/2/w/1000"><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> NGINX </tag>
            
            <tag> TOMCAT </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有哪些曾惊艳到你了的古诗词？</title>
      <link href="/2022/01/11/classic-quotations6/"/>
      <url>/2022/01/11/classic-quotations6/</url>
      
        <content type="html"><![CDATA[<p>1：</p><blockquote><p>原文：以后各走各的，没必要再联系<br>古文：从此音尘各悄然，春山如黛草如烟</p></blockquote><p>2：</p><blockquote><p>原文：从此我的世界再也没有你<br>古文：苦酒折柳今相离 ，无风无月也无你.</p></blockquote><p>3：</p><blockquote><p>原文：早知如此，当初何必相识<br>古文：早知如此绊人心，何如当初莫相识</p></blockquote><p>4：</p><blockquote><p>原文：以后各自天涯，爱恨不必再言<br>古文：此后山水不相逢，莫道彼此长和短</p></blockquote><p>5：</p><blockquote><p>原文：物是人非，再也回不到从前<br>古文：笙歌不见故人散，十里长欢难再寻</p></blockquote><p>6：</p><blockquote><p>原文：终究是一厢情愿，爱错了人<br>古文：醋把陈醋当成墨，写尽半生纸上酸。</p></blockquote><a id="more"></a> <p>7：</p><blockquote><p>原文：我单身，我骄傲<br>古文：我自飘零我自狂，犹如野鹤游四方</p></blockquote><p>8：</p><blockquote><p>原文：穷古文:一身清贫怎敢入繁华，两袖轻轻怎敢负人家</p></blockquote><p>9：</p><blockquote><p>原文：我被自己帅的睡不着了<br>古文：玉树临风美少年，揽镜自顾夜不眠</p></blockquote><p>10：</p><blockquote><p>原文：你站着不说话，就十分美好<br>古文：回头忍笑，阶前立，总无语，也依依</p></blockquote><p>11：</p><blockquote><p>原文：我们默默相爱<br>古文：不得语，暗相思。两心之外无人知。</p></blockquote><p>12：</p><blockquote><p>原文：初次见面，一见钟情<br>古文：最是凝眸无限意，似曾相连在前生</p></blockquote><p>13：</p><blockquote><p>原文：在我心中，你是最美的<br>古文：何须浅碧深红色，自是花中第一流</p></blockquote><p>14：</p><blockquote><p>原文：认识你，真的很幸运<br>古文：幸得识卿桃花面，从此阡陌多暖春</p></blockquote><p>15：</p><blockquote><p>原文：我愿把最好的都给你<br>古文：我愿提笔画尽，天下许你一世繁华</p></blockquote><p>16：</p><blockquote><p>原文：我一生只爱你<br>古文：既许一人以偏爱，愿尽余生之慷慨</p></blockquote><p>17：</p><blockquote><p>原文：空有一身才能，却无处施展<br>古文：虚负凌云万丈才，一生襟抱未曾开</p></blockquote><p>18：</p><blockquote><p>原文：谁又能懂得我<br>古文：横玉心中吹满地，好枝长恨无人寄</p></blockquote><p>19：</p><blockquote><p>原文：一腔报国热血，只能在梦中<br>古文：夜阑卧听风吹雨，铁马冰河入梦来。</p></blockquote><p>20：</p><blockquote><p>原文：婉约小雨，淡月朦胧，美好莫过于此<br>古文：数点雨声风约往，朦胧淡月云来去</p></blockquote><p>21：</p><blockquote><p>原文：午夜听雨，清晨卖花，时光让人留恋<br>古文：小楼一夜听春雨，深巷明朝卖杏花</p></blockquote><p>22：</p><blockquote><p>原文：有种遇见，初见惊艳，再见追忆<br>古文：当时明月在，曾照彩云归</p></blockquote><p>23：</p><blockquote><p>原文：有种遇见，初见邂逅，再见已故<br>古文：去年今日此门中，人面桃花相映红人面不知何处去，桃花依旧笑春风。</p></blockquote><p>24：</p><blockquote><p>原文：人生不过三场雨，谁先听完，谁先走<br>古文：少年听雨歌楼上。红烛昏罗帐。壮年听雨客舟中。江阔云低、断雁叫西风。而今听雨僧庐下。鬓已星星也。悲欢离合总无情。一任阶前、点滴到天明。</p></blockquote><p>25：</p><blockquote><p>原文：只想永远和你在一起<br>古文：风有约，花不误。岁岁如此，永不相负。</p></blockquote><p>26：</p><blockquote><p>原文：不想让你走<br>古文：长安陌上无穷树，唯有垂杨管别离</p></blockquote><p>27：</p><blockquote><p>原文：嬉笑的朋友很多，但知心好友难找<br>古文：春风满面皆朋友，欲觅知音难上难</p></blockquote><p>28：</p><blockquote><p>原文：闲暇疲倦之时，才能体会人生苦楚<br>古文：人情辗转闲中看，客路崎岖倦后知</p></blockquote><p>29：</p><blockquote><p>原文：我不爱你了<br>古文：此后锦书休寄，画楼云雨无凭。</p></blockquote><p>30：</p><blockquote><p>原文：我们终将要失去年少的自己<br>古文：欲买桂花同载酒，终不似，少年游。</p></blockquote><p>31：</p><blockquote><p>原文：只有经历，才能学会长大<br>古文：不品人间酒，谁知其中醉，不陷世间情，谁知其中累。</p></blockquote><p>32：</p><blockquote><p>原文：往事都已过去，余生一定要开心<br>古文：往日情怀酿做酒，换我余生长醉不复忧</p></blockquote><p>33：</p><blockquote><p>原文：生活总要继续<br>古文：夜班浊酒慰寂寥，天明走马入红尘</p></blockquote><p>34：</p><blockquote><p>原文：该走的人终究会走<br>古文：舟去人归初梦远， 风起缘断幕云深</p></blockquote><p>35：</p><blockquote><p>原文：就算无路可走，也不要垂头丧气<br>古文：行到水穷处，坐看云起时</p></blockquote><p>36：</p><blockquote><p>原文：请相信美好的事情正在发生<br>古文：律回岁晚冰霜少，春到人间草木知</p></blockquote><p>37：</p><blockquote><p>原文：人生就是不断的相聚，然后再不断的分别<br>古文：别来沧海事，语罢暮天钟</p></blockquote><p>38：</p><blockquote><p>原文：最悲伤的是，酒醒后发现你已离去<br>古文：日暮酒醒人已远，满天风雨下西楼</p></blockquote><p>39：</p><blockquote><p>原文：想当年随便摆个Poss，就能迷倒万千少女<br>古文：当年年少春衫薄，骑马倚斜桥，满楼红袖招</p></blockquote><p>40：</p><blockquote><p>原文：今天很高兴，就想大醉一场<br>古文：一生大笑能几回，斗酒相逢须醉倒</p></blockquote><p>41：</p><blockquote><p>原文：大家直接拿瓶干，不能养鱼不能赖<br>古文：莫思身外无穷事，且尽生前有限杯</p></blockquote><p>42：</p><blockquote><p>原文：小时候想要逃离的地方，是长大再也回不去的地方<br>古文：人言落日是天涯，望极天涯不见家。</p></blockquote><p>43：</p><blockquote><p>原文：想做什么就做什么，自由自在<br>古文：此时情绪此时天。无事小神仙</p></blockquote><p>44：</p><blockquote><p>原文：随心所去，所见皆是美景<br>古文：飞烟俱净，天山共色。 从流飘荡，任意东西</p></blockquote><p>45：</p><blockquote><p>原文：世间万物，都不及和你相逢一笑<br>古文：一笑相逢蓬海路，人间风雪如尘土</p></blockquote><p>46：</p><blockquote><p>原文：仙气飘飘，美得不可方物<br>古文：羽衣常带烟霞色，不惹人间桃李花。</p></blockquote><p>47：</p><blockquote><p>原文：光阴似箭，岁月使人蹉跎<br>古文：青轩桃李能几何，流光欺人忽蹉跎</p></blockquote><p>48：</p><blockquote><p>原文：年华虽逝，但炽热之心不减当年<br>古文：镜里流连两鬓残，寸心自许尚如丹</p></blockquote><p>49：</p><blockquote><p>原文：时间过得飞快，最好的年华早已不在<br>古文：灯残瘦影孤，花落流年度，春去佳期误</p></blockquote><p>50：</p><blockquote><p>原文：青春易逝，流年换了红颜<br>古文：一曲啼乌心绪乱，红颜暗与流年换</p></blockquote><p>51：</p><blockquote><p>原文：放下执念，宠辱不惊。人生自当欢喜<br>古文：钟鼎山林都是梦，人间宠辱休惊，只消闲处遇平生。</p></blockquote><p>52：</p><blockquote><p>原文：没事，我等你<br>古文：白茶清欢无别事，我在等风也等你</p></blockquote><p>53：</p><blockquote><p>原文：我会默默等你，不去打扰<br>古文：静待一树花开，盼你叶落归来</p></blockquote><p>54：</p><blockquote><p>原文：无论如何，我都会等你古文:寒灯纸上，梨花雨凉，我等风雪又一年</p></blockquote><p>55：</p><blockquote><p>原文：简直太脏了<br>古文：一双玉臂千人枕，半点朱唇万客尝</p></blockquote><p>56：</p><blockquote><p>原文：你要奋力拔尖，然后惊艳所有人<br>古文：鹏北海，凤朝阳，又携书剑路茫茫！明年此日青云去，却笑人间举子忙！</p></blockquote><p>57：</p><blockquote><p>原文：我的痛苦无人能懂<br>古文：世间无限丹青手，一片伤心画不成</p></blockquote><p>58：</p><blockquote><p>原文：世间万物，谁能懂我？<br>古文：泪眼问花花不语，乱红飞过秋千去</p></blockquote><p>59：</p><blockquote><p>原文：真的无人懂我<br>古文：苍天不解人情暖，冷眼看花尽是悲</p></blockquote><p>60：</p><blockquote><p>原文：从未停止想你，想念却不能相见<br>古文：事关休戚已成空，万里相思一夜中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 只言片语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 只言片语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有哪些让你醍醐灌顶的话？</title>
      <link href="/2021/07/29/classic-quotations5/"/>
      <url>/2021/07/29/classic-quotations5/</url>
      
        <content type="html"><![CDATA[<p>1、</p><blockquote><p>什么都是关系的产物，经营什么都不如经营关系。有关系什么都能化解，什么都能连接。没有关系或不会经营关系，连自己原本拥有的一切都会消失殆尽！</p></blockquote><p>2、</p><blockquote><p>不要迷恋权威。佛说我不入地狱谁入地狱？我去地狱看了。地狱没有佛。</p></blockquote><p>3、</p><blockquote><p>交朋友还不简单？送他两条华子试试？送他两箱酒试试？甩给他5000元试试。</p></blockquote><p>4、</p><blockquote><p>天天开会是为了统一员工的思想。员工的思想统一了，管理成本才会消失。</p></blockquote><p>5、</p><blockquote><p>一直往上爬才会有计划外收入。要是原地踏步走，只能混吃等死。</p></blockquote><p>6、</p><blockquote><p>笔试不花钱，面试才花钱。</p></blockquote><a id="more"></a><p>7、</p><blockquote><p>名额不够，送礼的人又太多，就只能增加名额。增加不了怎么办？无中生有。</p></blockquote><p>8、</p><blockquote><p>畅通无阻的礼物：名，利，色。</p></blockquote><p>9、</p><blockquote><p>狼是弱势群体，狼群才是强势群体。</p></blockquote><p>10、</p><blockquote><p>只做自己擅长的事儿。不轻易换跑道。</p></blockquote><p>11、</p><blockquote><p>只要你坚持说真话，就没人复制你。</p></blockquote><p>12、</p><blockquote><p>人的劣根性是什么，智慧就是什么。谁能满足人的劣根性，谁就能日进斗金。</p></blockquote><p>13、</p><blockquote><p>赚钱少，在大场合手脚不知道该往哪儿放。赚钱多，手脚想怎么放就怎么放。非常自如。</p></blockquote><p>14、</p><blockquote><p>逢年过节就送礼，只是出于礼貌出于尊重，走个形式。要是没事儿就送，送着送着，连老天爷都来帮咱了。</p></blockquote><p>15、</p><blockquote><p>在小地方做生意，就是靠关系。比如消防局帮我卖消防设备，我只供货就OK……</p></blockquote><p>16、</p><blockquote><p>送礼就有机会，不送礼永远没有机会。</p></blockquote><p>17、</p><blockquote><p>很多人点菜都是点自己爱吃的菜，而不是点别人爱吃的菜，请客就失去了意义。记住：咱喜欢的，客人未必喜欢。结果咱自作主张，钱花了，客人还不满意。这不是脑子有毛病嘛……</p></blockquote><p>18、</p><blockquote><p>咱开会就研究两个问题：怎么赚钱，怎么分钱。此外，研究什么都是瞎扯淡。</p></blockquote><p>19、</p><blockquote><p>这个想法咱持有了很多年，生活还没有发生一点儿改变。这说明咱一定是错的。开始错的东西，咱坚持到最后，或许还是错的。</p></blockquote><p>20、</p><blockquote><p>什么叫做大生意啊？他有10个亿，我抢过来了，但我不违法。我合情合理呀。这个合情合理是怎么设计出来的？自个儿去寻思。</p></blockquote><p>21、</p><blockquote><p>这个问题咱解决不了，咱天天研究，天天想方法。假以时日，问题就自动消失了。</p></blockquote><p>22、</p><blockquote><p>遇到问题不是自己去想办法。是开会，是呼朋引伴去喝酒。自己折磨自己，确实没啥意思。</p></blockquote><p>23、</p><blockquote><p>最好的修行是啥啊？带大家发家致富。邓公，功德无量。</p></blockquote><p>24、</p><blockquote><p>曾国藩下班了就研究送礼，巴结人，为难他的人慢慢都消失了。</p></blockquote><p>25、</p><blockquote><p>研究合法抢劫是改变命运最快的方式之一……</p></blockquote><p>26、</p><blockquote><p>道德道德。先有道后有徳。什么是道？杀生就是放生。什么是德？放生就是杀生。</p></blockquote><p>27、</p><blockquote><p>什么叫场啊？大家聚在一起，研究一件事儿，做一件事儿。这件事儿，大家越做越有感觉。越有感觉越愿做。所有的生生不息都来源于精神鸦片的诱惑。什么叫精神鸦片？人的劣根性是什么，精神鸦片就是什么。什么是人的劣根性？人的欲望是什么，劣根性就说什么。</p></blockquote><p>28、</p><blockquote><p>找项目不如造项目，造项目不如造神，造神不如造精神鸦片，造精神鸦片不如造游戏规则，造游戏规则不如造欲望，造欲望不如造芸芸众生内心梦寐以求的图腾。</p></blockquote><p>29、</p><blockquote><p>学习就是为了发家致富。古人不是说了嘛？书中自有黄金屋、颜如玉、千金粟。没有功利性的阅读都是瞎扯淡。</p></blockquote><p>30、</p><blockquote><p>永远拿着纸和笔。想起什么写什么。听到什么写什么。看到什么写什么。写什么卖什么。</p></blockquote><p>31、</p><blockquote><p>把一件事儿想明白，做明白，这就是道。道无处不在，无处不有。比如拉屎的时候我会想：所有的屎都来于食物，所有的食物都来于智慧，所有的智慧都来于向内求，所有的向内求都来于欲望，所有的欲望都来于体验，所有的体验都来于经历，所有的经历都来于我触摸到了什么，感知道了什么。所有的感知和触摸显示我们活在什么样的维度，什么样的框架之内。维度和框架之内的原理是什么？规律是什么？我闭上眼睛就能看到一个光怪陆离的大千世界。</p></blockquote><p>32、</p><blockquote><p>显现什么就是什么，是什么就显现什么。所有的显现都来源于我消化了什么，转化了什么。</p></blockquote><p>33、</p><blockquote><p>学《愚公移山》，穷人看到了什么叫心系一处，自强不息；中产看到了什么叫愚昧无知，盲目付出；高人看到了什么叫关系；更高维度的人看到了什么叫商机。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 只言片语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 只言片语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置详解</title>
      <link href="/2021/03/11/nginx-setup-intro/"/>
      <url>/2021/03/11/nginx-setup-intro/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/nginx-setup-intro-6.jpg?imageView2/2/w/1000"><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>Nginx是lgor Sysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。从2004年发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><p>Nginx的稳定性、功能集、示例配置文件和低系统资源的消耗让他后来居上，在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><a id="more"></a><h1 id="Nginx常用功能"><a href="#Nginx常用功能" class="headerlink" title="Nginx常用功能"></a>Nginx常用功能</h1><h2 id="1、Http代理，反向代理："><a href="#1、Http代理，反向代理：" class="headerlink" title="1、Http代理，反向代理："></a>1、Http代理，反向代理：</h2><p>作为web服务器最常用的功能之一，尤其是反向代理。</p><p>这里我给来2张图，对正向代理与反向代理做个诠释，具体细节，大家可以翻阅下资料。</p><img src="http://static.ohtudou.cc/static/images/nginx-setup-intro-1.jpg?imageView2/2/w/1000"><p>Nginx在做反向代理时，提供性能稳定，并且能够提供配置灵活的转发功能。Nginx可以根据不同的正则匹配，采取不同的转发策略，比如图片文件结尾的走文件服务器，动态页面走web服务器，只要你正则写的没问题，又有相对应的服务器解决方案，你就可以随心所欲的玩。并且Nginx对返回结果进行错误页跳转，异常判断等。如果被分发的服务器存在异常，他可以将请求重新转发给另外一台服务器，然后自动去除异常服务器。</p><h2 id="2、负载均衡"><a href="#2、负载均衡" class="headerlink" title="2、负载均衡"></a>2、负载均衡</h2><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的啦，你可以参照所有的负载均衡算法，给他一一找出来做下实现。</p><p>上3个图，理解这三种负载均衡算法的实现</p><img src="http://static.ohtudou.cc/static/images/nginx-setup-intro-3.jpg?imageView2/2/w/1000"><p>Ip hash算法，对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。</p><img src="http://static.ohtudou.cc/static/images/nginx-setup-intro-5.jpg?imageView2/2/w/1000"><h2 id="3、web缓存"><a href="#3、web缓存" class="headerlink" title="3、web缓存"></a>3、web缓存</h2><p>Nginx可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。</p><h1 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h1><p>如果你下载好啦，你的安装文件，不妨打开conf文件夹的nginx.conf文件，Nginx服务器的基础配置，默认的配置也存放在此。</p><p>在 nginx.conf 的注释符号为： #</p><p>默认的 nginx 配置文件 nginx.conf 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx 文件结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p></li><li><p>2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</p></li><li><p>3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</p></li><li><p>4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</p></li><li><p>5、location块：配置请求的路由，以及各种页面的处理情况。</p></li></ul><p>下面给大家上一个配置文件，作为理解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &apos;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&apos;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是nginx的基本配置，需要注意的有以下几点：</p><p>1、几个常见配置项：</p><ul><li>1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；</li><li>2.$remote_user ：用来记录客户端用户名称；</li><li>3.$time_local ： 用来记录访问时间与时区；</li><li>4.$request ： 用来记录请求的url与http协议；</li><li>5.$status ： 用来记录请求状态；成功是200；</li><li>6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</li><li>7.$http_referer ：用来记录从那个页面链接访问过来的；</li><li>8.$http_user_agent ：记录客户端浏览器的相关信息；</li></ul><p>2、惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。</p><p>3、每个指令必须有分号结束。</p><p>原文地址：</p><blockquote><p><a href="https://www.cnblogs.com/knowledgesea/p/5175711.html" target="_blank" rel="noopener">Nginx配置详解</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> NGINX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典诗句</title>
      <link href="/2020/10/14/classic-poems-md/"/>
      <url>/2020/10/14/classic-poems-md/</url>
      
        <content type="html"><![CDATA[<p>1.</p><p>醉后不知天在水，满船清梦压星河。</p><p>——唐温如《题龙阳县青草湖》</p><p>2.</p><p>欲买桂花同载酒，终不似，少年游。</p><p>——刘过《唐多令》</p><p>3.</p><p>流光容易把人抛，红了樱桃，绿了芭蕉。</p><p>——蒋捷《一剪梅·舟过吴江》</p><p>4.</p><p>落霞与孤鹜齐飞，秋水共长天一色。</p><p>——王勃《滕王阁序》</p><p>5.</p><p>人面不知何处去，桃花依旧笑春风。</p><p>——崔护《题都城南庄》<br><a id="more"></a></p><p>6.</p><p>寂寞空庭春欲晚，梨花满地不开门。</p><p>——刘方平《春怨》</p><p>7.</p><p>欲将心事付瑶琴。知音少，弦断有谁听？</p><p>——岳飞《小重山》</p><p>8.</p><p>似此星辰非昨夜，为谁风露立中宵。</p><p>——黄景仁《绮怀诗》</p><p>9.</p><p>连雨不知春去，一晴方觉夏深。</p><p>——范成大《喜晴》</p><p>10.</p><p>半世浮萍随逝水，一宵冷雨葬名花。</p><p>——纳兰性德《山花子·林下荒苔道韫家》</p><p>11.</p><p>酴釄落尽，犹赖有梨花。</p><p>——李清照《转调满庭芳·芳草池塘》</p><p>12.</p><p>昨夜星辰昨夜风，画楼西畔桂堂东。</p><p>——李商隐《无题》</p><p>13.</p><p>不如意事常八九，可与语人无二三。</p><p>——方岳《别才子司令》</p><p>14.</p><p>纵使相逢应不识，尘满面，鬓如霜。</p><p>——苏轼《江城子》</p><p>15.</p><p>众里寻他千百度。蓦然回首，那人却在，灯火阑珊处。</p><p>——辛弃疾《青玉案 元夕》</p><p>16.</p><p>我见青山多妩媚，料青山，见我应如是。</p><p>——辛弃疾《贺新郎·甚矣吾衰矣》</p><p>17.</p><p>梦短梦长俱是梦，年来年去是何年.</p><p>——汤显祖《牡丹亭·第二出·言怀》</p><p>18.</p><p>一生一代一双人，争教两处销魂。</p><p>——纳兰容若《画堂春》</p><p>19.</p><p>枕上十年事，江南二老忧，都到心头。</p><p>——徐再思《水仙子·夜雨》</p><p>20.</p><p>人生如逆旅，我亦是行人。</p><p>——苏轼《临江仙·送钱穆父》</p><p>21.</p><p>世间无限丹青手，一片伤心画不成。</p><p>——高蟾《金陵晚望》</p><p>22.</p><p>肠断月明红豆蔻，月似当时，人似当时否？</p><p>——纳兰性德《鬓云松令》</p><p>23.</p><p>独抱影儿眠，背看灯花落。</p><p>——汪懋麟</p><p>24.</p><p>可惜一片清歌，都赋予黃昏。</p><p>——黄孝迈《湘春夜月·近清明》</p><p>25.</p><p>可怜无定河边骨，犹是春闺梦里人。</p><p>——陈陶《陇西行》</p><p>26.</p><p>人生自是有情痴，此恨不关风与月</p><p>——欧阳修《玉楼春》</p><p>27.</p><p>春江潮水连海平，海上明月共潮生。</p><p>——张若虚《春江花月夜》</p><p>28.</p><p>觉来知不是梅花，落寞岁寒谁与共。</p><p>——宋马子严《玉楼春》</p><p>29.</p><p>不知何处雨，已觉此间凉。</p><p>——王遇《句》</p>]]></content>
      
      
      <categories>
          
          <category> 名言名句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典 </tag>
            
            <tag> 名言名句 </tag>
            
            <tag> 唯美 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IT行业过来人</title>
      <link href="/2020/07/07/it-quotations/"/>
      <url>/2020/07/07/it-quotations/</url>
      
        <content type="html"><![CDATA[<p>1 </p><blockquote><p>年纪轻轻不是迫不得已，千万不要进传统公司的伪互联网项目。事儿少，福利好，混子多，和老油条们摸鱼一两年，哪天项目突然被裁掉了，再出社会，你完全没有竞争力。</p></blockquote><p>2 </p><blockquote><p>进公司第一天，一定要跟同事们吃吃饭，主要是探探口风，了解下公司的财政状况。因为真的存在不少厚脸皮公司（包括所谓的集团），入职后，连第一个月的工资都发不出来，有甚者，还直接闹到劳动仲裁去了。所以公司有没有经常拖工资，一定要了解清楚，早走早轻松，免得白干几个月。</p></blockquote><p>3 </p><blockquote><p>远离灰色行业，诸如网络赌博，网络贷款，网络传销，网络嘿咻小视频等行业，这些老板见人就洗脑，总结起来就是”熟行熟路没风险，海外操作贼保险，一碗金饭等你来，半年宝马乐开怀“，谁知最后，金饭都变成牢狱饭了，信不得信不得。</p></blockquote><p>4 </p><blockquote><p>可以相信老板的大饼，但前提是你能强烈感觉到公司的整个组织冲劲十足，执行力极强，业绩发展迅猛，否则忽悠成份大一点。</p></blockquote><p>5 </p><blockquote><p>莫要盲目迷信新技术，如区块链背后有分布式机制的缩影，人工智能是计算机+统计学+大数据的综合体现，所以只有扎实的计算机基础才能快速适应技术风口。</p></blockquote><a id="more"></a><p>6 </p><blockquote><p>潜下心来，学好数据结构，设计模式，经典算法，计算机原理，Unix的内核原理，数据库和架构等等，这些东西永远不会过时的，九阳神功都会了 ，高级剑术入门神速，随便你玩，看你喜欢。</p></blockquote><p>7 </p><blockquote><p>投资经久不衰的语言，如Java，有权威，跨平台，稳定性高，业务面广，社区活跃。后台，云端，安卓，物联网客户端，大数据，人工智能，都能见到它的身影，常年雄踞编程排行榜No.1。（虽然很想说，PHP天下第一哈哈。）</p></blockquote><p>8 </p><blockquote><p>远离迷之技术优越感，我们的共同目标是让项目创造价值，服务用户。不是单纯的沉浸于某某技术方案多牛逼，如果没落到实处，有时候还真抵不过配合产品经理改一句能影响用户购买的文案。</p></blockquote><p>9 </p><blockquote><p>学会合作，当今世界如此复杂多变，远非一人之力能够驾驭得了的。要有团队精神，要明白团队的力量是很强大的，绝不是1+1=2，而是1+1=11。</p></blockquote><p>10 </p><blockquote><p>不要自视甚高，年轻就意味着需要成长，当下你死磕觉得对的事情，过两年，你可能会嘲笑以前的自己有多傻逼。</p></blockquote><p>11 </p><blockquote><p>多做自我反省，像海绵一样吸收别人的优点，磨平自己的棱角。乘着年轻还是块泥巴，多用心把自己捏成心目中英雄的样子，老了风干成石块了，想</p></blockquote><p>12 </p><blockquote><p>最后说句虚的，做人要像大海学习，纳百川之激流，化万物之污秽。</p></blockquote><p>13 </p><blockquote><p>你得明白，你报的工期永远是不够用的，能报20天的绝对不报10天，因为指不定老板等会就跑到你旁边来一句“嘿~小李，这里帮我新增一个小功能，很简单的。</p></blockquote><p>14 </p><blockquote><p>不要轻易在工期上妥协，有一次就有二次有三次。要妥协就得砍需求，有多少公司的需求都是脑门子一热狂就加上去的，上线的结果都是凉凉了，所以你这是在做好事。</p></blockquote><p>15 </p><blockquote><p>体谅小公司的产品经理，别老拿刀捅他，实在太惨了，你问我为什么，我没办法回答你，因为真的太惨了，人不如狗系列。</p></blockquote><p>16 </p><blockquote><p>每月预留出几百块作为社交费用，多买几波喜茶联络联络同事间的感情，有了好印象，工作上有什么问题，都好商量，好解决。应验了中国那句老话“礼多人不怪”。</p></blockquote><p>17 </p><blockquote><p>小步试错很保险，大步跃进有风险。在公司混得如鱼得水，不代表你就可以鱼跃龙门了，一个不小心就有可能水土不服窒息了。所以要有规划，先试水。</p></blockquote><p>18 </p><blockquote><p>不要成为只会写“Hello World”的程序员，要积累自己的技术套装，力求能够快速从0到1构建整个项目，让自己具备担任技术负责人的能力，当机会来时，你才能牢牢抓住。</p></blockquote><p>19 </p><blockquote><p>做技术，如果你是写后端的，那么你要适当的学一些前端的，反之亦然，不仅能大大提高合作效率，帮忙排除Bug。同时也能防坑，因为前后端技术人员互相忽悠是常有的事。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可以摘抄下来的神仙句子之二</title>
      <link href="/2020/06/11/classic-quotations3/"/>
      <url>/2020/06/11/classic-quotations3/</url>
      
        <content type="html"><![CDATA[<p>1、</p><blockquote><p>且视他人之疑目如盏盏鬼火，大胆地去走你的夜路。</p></blockquote><p>——史铁生</p><p>2、</p><blockquote><p>矮人看戏何曾见，都是随人说短长。</p></blockquote><p>——赵翼</p><p>3、</p><blockquote><p>无法达成的目标才是我的目标，迂回曲折的路才是我想走的路，而每次的歇息，总是带来新的向往。</p></blockquote><p>——赫尔曼·黑塞</p><p>4、</p><blockquote><p>如果想征服生命中的焦虑，活在当下，活在每一个呼吸里。</p></blockquote><p>——马特·海格</p><p>5、</p><blockquote><p>于浩歌狂热之际中寒；于天上看见深渊。于一切眼中看见无所有；于无所希望中得救。</p></blockquote><p>——鲁迅</p><p>6、</p><blockquote><p>愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光。不必等候炬火。此后如竟没有炬火：我便是唯一的光。</p></blockquote><p>——鲁迅</p><a id="more"></a><p>7、</p><blockquote><p>借我一个暮年，借我碎片，借我瞻前与顾后，借我执拗如少年。</p></blockquote><p>——樊小纯写给木心的诗</p><p>8、</p><blockquote><p>纵有千古，横有八荒；前途似海，来日方长。</p></blockquote><p>——梁启超</p><p>9、</p><blockquote><p>我将融入剧烈争斗的大人世界，要在那里边孤军奋战必须变得比任何人都坚不可摧。</p></blockquote><p>——《海边的卡夫卡》</p><p>10、</p><blockquote><p>月光还是少年的月光，九州一色还是李白的霜。</p></blockquote><p>——余光中《独白》</p><p>11、</p><blockquote><p>酒入豪肠，七分酿成了月光。余下三分啸成剑气，绣口一吐，就半个盛唐。</p></blockquote><p>——余光中《寻李白》</p><p>12、</p><blockquote><p>知交零落实是人生常态，能够偶尔话起，而心中仍然温柔，就是好朋友。</p></blockquote><p>——三毛</p><p>13、</p><blockquote><p>人生如逆旅，我亦是行人。</p></blockquote><p>——苏轼</p><p>14、</p><blockquote><p>无论人生上到哪一层台阶，阶下有人在仰望你，阶上亦有人在俯视你。你抬头自卑，低头自得，唯有平视，才能看见真实的自己。</p></blockquote><p>——杨绛</p><p>15、</p><blockquote><p>我不要听到你嘴里的积极口号，不要看到你在受伤之后的眼泪。我要看到你平地一声雷的蛰伏，看到你特立独行却不被孤立的魅力，看到你与世无争却有迹可循的野心，看到你说堕落，却又不自甘堕落的自制力。</p></blockquote><p>16、</p><blockquote><p>为你，千千万万遍。</p></blockquote><p>——《追风筝的人》</p><p>17、</p><blockquote><p>岁月不饶人，我亦未曾饶过岁月。</p></blockquote><p>——木心</p><p>18、</p><blockquote><p>对未来真正的慷慨，是把一切献给现在。</p></blockquote><p>——加缪（</p><p>19、</p><blockquote><p>活在这珍贵的人间，太阳强烈，水波温柔。</p></blockquote><p>——海子</p><p>20、</p><blockquote><p>应是天仙狂醉，乱把白云揉碎。</p></blockquote><p>——李白</p><p>21、</p><blockquote><p>所谓无底深渊，下去，也是前程万里。</p></blockquote><p>——木心《素履之往》</p><p>22、</p><blockquote><p>欲买桂花同载酒，终不似、少年游。</p></blockquote><p>——刘过《唐多令•芦叶满汀洲》</p><p>23、</p><blockquote><p>上帝会扼住你的喉咙，但不会让你窒息。——森山洋</p></blockquote><p>24、</p><blockquote><p>大智不群，大善无帮，何惧孤步，何惧毁谤。</p></blockquote><p>——《文化苦旅》</p><p>25、</p><blockquote><p>说是人生无常，却也是人生之常。</p></blockquote><p>——余光中</p><p>26、</p><blockquote><p>瀑布的水逆流而上，蒲公英种子从远处飘回，聚成伞的模样，太阳从西边升起，落向东方。子弹退回枪膛，运动员回到起跑线上，我交回录取通知书，忘了十年寒窗。厨房里飘来饭菜的香， 你把我的卷子签好名字，关掉电视，帮我把书包背上。你还在我身旁。</p></blockquote><p>——戴畅《你还在我身旁</p><p>27、</p><blockquote><p>谁终将声震人间，必长久深自缄默。谁终将点燃闪电，必长久如云漂泊。</p></blockquote><p>——尼采</p><p>28、</p><blockquote><p>爱因斯坦生生将一座物理大山凿穿而得出一个哲学结论：当速度等于光速时，时间就停止；当质量足够大时，它周围的空间就弯曲。那么，我们为什么不可以再提出一个人格相对论呢？当人格的力量达到一定强度时，它就会迅如光速而追附万物，穹庐空间而护佑生灵。</p></blockquote><p>——梁衡</p><p>29、</p><blockquote><p>我躺下是敦煌，醒来还是敦煌。</p></blockquote><p>——樊锦诗</p><p>30、</p><blockquote><p>我要再和生活死磕几年。要么我就毁灭，要么我就注定铸就辉煌。如果有一天，你发现我在平庸面前低了头，就向我开炮。</p></blockquote><p>——杰克.凯鲁亚克《在路上》</p><p>31、</p><blockquote><p>若逢新雪初霁，满月当空，下面平铺着皓影，上面流转着亮银，而你带笑地向我步来，月色与雪色之间，你是第三种绝色。</p></blockquote><p>——余光中《绝色》</p><p>32、</p><blockquote><p>苟有恒，何必三更眠五更起。最无益，莫过一日曝十日寒。</p></blockquote><p>——胡居仁</p><p>33、</p><blockquote><p>屋宇如鱼，匍匐在水面上，吐出日子，吐出生老病死和一个个连绵不绝的四季。</p></blockquote><p>——余秀华</p><p>34、</p><blockquote><p>喜欢谈论痛苦的，往往是不识愁滋味的少年，而饱尝人间苦难的老年贝多芬，却唱起了欢乐颂。</p></blockquote><p>——周国平</p><p>35、</p><blockquote><p>君臣一梦，今古空名。但远山长，云山乱，晓山青。</p></blockquote><p>——苏轼</p>]]></content>
      
      
      <categories>
          
          <category> 名言名句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典 </tag>
            
            <tag> 名言名句 </tag>
            
            <tag> 唯美 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装Gitlab，Gitlab-Runner，SonarQube</title>
      <link href="/2020/04/01/gitlab-cicd/"/>
      <url>/2020/04/01/gitlab-cicd/</url>
      
        <content type="html"><![CDATA[<p>现在Centos的虚拟机上安装Docker，在之上运用Gitlab，部署Sonarqube自动代码检查，并导入ci/cd机能。对于web应用程序，随时跟踪commit，自动编译，自动代码检查&amp;测试。<br><img src="http://static.ohtudou.cc/static/images/gitlab-cicd-1.png?imageView2/2/w/1000"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> gitlab </tag>
            
            <tag> runner </tag>
            
            <tag> sonarqube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Docker on Centos7</title>
      <link href="/2020/03/31/docker-install/"/>
      <url>/2020/03/31/docker-install/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/docker-install-1.png?imageView2/2/w/1000"><p>Docker在2013年发布之后已经成为了首屈一指的容器平台，并且仍然在持续改进。它是最重要的DevOps工具之一。Docker在科技界掀起了容器化的潮流，主要是因为它让分布式开发成为可能，并且自动化了应用程序的部署。它将应用程序隔离成单独的容器，因此应用变得更加便携也更为安全。Docker应用程序也独立于OS以及平台。用户可以使用Docker容器代替虚拟机，比如VirtualBox。</p><p>本篇记载了Docker在CentOS7的安装过程。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>基本按照官方安装向导进行安装</p><blockquote><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p></blockquote><h2 id="OS最新化"><a href="#OS最新化" class="headerlink" title="OS最新化"></a>OS最新化</h2><blockquote><p>yum update<br>yum upgrade</p></blockquote><h2 id="旧版本删除"><a href="#旧版本删除" class="headerlink" title="旧版本删除"></a>旧版本删除</h2><blockquote><p>yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</p></blockquote><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="官方Yum库设定"><a href="#官方Yum库设定" class="headerlink" title="官方Yum库设定"></a>官方Yum库设定</h3><blockquote><p>yum install -y yum-utils device-mapper-persistent-data lvm2<br>yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a></p></blockquote><h3 id="DOCKER-CE-安装"><a href="#DOCKER-CE-安装" class="headerlink" title="DOCKER CE 安装"></a>DOCKER CE 安装</h3><blockquote><p>yum install -y docker-ce docker-ce-cli containerd.io</p></blockquote><h2 id="Docker启动"><a href="#Docker启动" class="headerlink" title="Docker启动"></a>Docker启动</h2><blockquote><p>systemctl start docker<br>设定OS启动时，自动启动<br>systemctl enable docker</p></blockquote><h2 id="版本确认"><a href="#版本确认" class="headerlink" title="版本确认"></a>版本确认</h2><blockquote><p>docker –version</p></blockquote><h2 id="docker-常用命令总结"><a href="#docker-常用命令总结" class="headerlink" title="docker 常用命令总结"></a>docker 常用命令总结</h2><ul><li><p>启动image命令行模式</p><blockquote><p>docker run -d -i -t 【imageID】 /bin/bash </p></blockquote></li><li><p>进入到已启动的docker容器</p><blockquote><p>docker ps<br>docker exec -it 【name】 /bin/bash 或者 docker exec -it 【container id】 /bin/bash</p></blockquote></li><li><p>关闭启动重起</p><blockquote><p>docker stop 容器id<br>docker start 容器id<br>docker restart 容器id</p></blockquote></li><li><p>查看所有容器，包括关闭的</p><blockquote><p>docker ps -a</p></blockquote></li><li><p>docker提交新的镜像</p><blockquote><p>docker commit 【容器id】 【自定义名】</p></blockquote></li><li><p>停止所有的container</p><blockquote><p>docker stop $(docker ps -a -q)</p></blockquote></li><li><p>删除所有的container</p><blockquote><p>docker rm $(docker ps -a -q)</p></blockquote></li><li><p>查看当前有些什么images</p><blockquote><p>docker images</p></blockquote></li><li><p>删除images，通过image的id</p><blockquote><p>docker rmi 【image id】</p></blockquote></li><li><p>删除untagged images，也就是那些id为<none>的image的</none></p><blockquote><p>docker rmi $(docker images | grep “^<none>“ | awk “{print $3}”)</none></p></blockquote></li><li><p>删除全部image</p><blockquote><p>docker rmi $(docker images -q)</p></blockquote></li><li><p>容器中取日志</p><blockquote><p>docker logs Name/ID  </p></blockquote></li><li><p>从容器里面拷贝文件/目录到本地一个路径</p><blockquote><p>docker cp Name:/container-path to-path<br>docker cp ID:/container-path to-path</p></blockquote></li><li><p>在容器内部运行进程</p><blockquote><p>docker exec container-name touch a.txt</p></blockquote></li><li><p>检索image</p><blockquote><p>docker search image-name</p></blockquote></li><li><p>下载image</p><blockquote><p>docker pull image-name</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation Player 安装 Centos7</title>
      <link href="/2020/03/31/vmware-centos/"/>
      <url>/2020/03/31/vmware-centos/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/vmware-centos-1.JPG?imageView2/2/w/1000"><h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><h3 id="VMware-Workstation-Player-的安装"><a href="#VMware-Workstation-Player-的安装" class="headerlink" title="VMware Workstation Player 的安装"></a>VMware Workstation Player 的安装</h3><p>下载地址：<br><a href="https://www.vmware.com/jp/products/workstation-player.html" target="_blank" rel="noopener">https://www.vmware.com/jp/products/workstation-player.html</a></p><p>这次用的是Windows、下载「for Windows 64-bit Operating Systems」<br>下载后按照提示默认安装即可<br><a id="more"></a></p><h3 id="下载CentOS"><a href="#下载CentOS" class="headerlink" title="下载CentOS"></a>下载CentOS</h3><p>下载地址：<br><a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a><br>过去版本（以华为云为例）：<br><a href="https://mirrors.huaweicloud.com/centos/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/centos/</a></p><h2 id="做成虚拟机"><a href="#做成虚拟机" class="headerlink" title="做成虚拟机"></a>做成虚拟机</h2><p>VMware Workstation Player启动，点击「新規仮想マシンの作成」<br><img src="http://static.ohtudou.cc/static/images/VMwareWP-CentOS1.png?imageView2/2/w/1000"></p><img src="http://static.ohtudou.cc/static/images/VMwareWP-CentOS2.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/VMwareWP-CentOS3.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/VMwareWP-CentOS4.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/VMwareWP-CentOS5.png?imageView2/2/w/1000"><h2 id="安装CentOS7"><a href="#安装CentOS7" class="headerlink" title="安装CentOS7"></a>安装CentOS7</h2><img src="http://static.ohtudou.cc/static/images/CentOS7Install1.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install2.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install3.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install4.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install4-1.png?imageView2/2/w/1000"><ul><li>如果安装服务器，推荐选择 【サーバ（GUI使用）】</li></ul><img src="http://static.ohtudou.cc/static/images/CentOS7Install5.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install6.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install7.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install8.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install9.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install10.png?imageView2/2/w/1000"><h2 id="初期设定"><a href="#初期设定" class="headerlink" title="初期设定"></a>初期设定</h2><img src="http://static.ohtudou.cc/static/images/CentOS7Install24.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install25.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install26.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install27.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install28.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install29.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install30.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install31.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install32.png?imageView2/2/w/1000"><img src="http://static.ohtudou.cc/static/images/CentOS7Install33.png?imageView2/2/w/1000"><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>设置虚拟机共享目录 vmhgfs-fuse .host:/ /mnt/hgfs<br>.host:/ 是共享的目录， /mnt/hgfs 是目标目录</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> linux </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截API提交且修改数据</title>
      <link href="/2020/03/27/modify-post-data/"/>
      <url>/2020/03/27/modify-post-data/</url>
      
        <content type="html"><![CDATA[<p>在实际项目开发的时候，经常需要改窜前端数据来测试后端程序的健壮性，<br>Chrome开发者工具可以很容易做到这一点。</p><h2 id="1，追加XHR测试断点"><a href="#1，追加XHR测试断点" class="headerlink" title="1，追加XHR测试断点"></a>1，追加XHR测试断点</h2><img src="http://static.ohtudou.cc/static/images/modify-post-data-1.JPG?imageView2/2/w/1000"><a id="more"></a><h2 id="2，运行程序，在API执行前自动中断，"><a href="#2，运行程序，在API执行前自动中断，" class="headerlink" title="2，运行程序，在API执行前自动中断，"></a>2，运行程序，在API执行前自动中断，</h2><img src="http://static.ohtudou.cc/static/images/modify-post-data-2.JPG?imageView2/2/w/1000"><h2 id="3，查看Call-Stack-，找到SEND时点的数据"><a href="#3，查看Call-Stack-，找到SEND时点的数据" class="headerlink" title="3，查看Call Stack ，找到SEND时点的数据"></a>3，查看Call Stack ，找到SEND时点的数据</h2><img src="http://static.ohtudou.cc/static/images/modify-post-data-3.JPG?imageView2/2/w/1000"><h2 id="4，在Local中完成数据修改"><a href="#4，在Local中完成数据修改" class="headerlink" title="4，在Local中完成数据修改"></a>4，在Local中完成数据修改</h2><img src="http://static.ohtudou.cc/static/images/modify-post-data-4.JPG?imageView2/2/w/1000">]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM的使用</title>
      <link href="/2020/03/22/use-nvm/"/>
      <url>/2020/03/22/use-nvm/</url>
      
        <content type="html"><![CDATA[<h1 id="1，什么是NVM"><a href="#1，什么是NVM" class="headerlink" title="1，什么是NVM"></a>1，什么是NVM</h1><p>nvm全名node.js version management，是nodejs的版本管理工具。通过它可以安装和切换不同版本的nodejs。</p><h1 id="2，下载"><a href="#2，下载" class="headerlink" title="2，下载"></a>2，下载</h1><p>可在<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">点此在github</a>. 上下载最新版本,本次下载安装的是windows版本。<br>打开网址我们可以看到有两个版本：</p><p>nvm-noinstall.zip：免安装版，但使用时需进行配置。<br>nvm-setup.zip：安装版，推荐使用<br><a id="more"></a></p><h1 id="3，安装"><a href="#3，安装" class="headerlink" title="3，安装"></a>3，安装</h1><h2 id="1，双击安装文件-nvm-setup-exe"><a href="#1，双击安装文件-nvm-setup-exe" class="headerlink" title="1，双击安装文件 nvm-setup.exe"></a>1，双击安装文件 nvm-setup.exe</h2><img src="http://static.ohtudou.cc/static/images/use-nvm-1.BMP?imageView2/2/w/1000"><h2 id="2，选择nvm安装路径"><a href="#2，选择nvm安装路径" class="headerlink" title="2，选择nvm安装路径"></a>2，选择nvm安装路径</h2><img src="http://static.ohtudou.cc/static/images/use-nvm-2.BMP?imageView2/2/w/1000"><h2 id="3，选择nodejs路径"><a href="#3，选择nodejs路径" class="headerlink" title="3，选择nodejs路径"></a>3，选择nodejs路径</h2><img src="http://static.ohtudou.cc/static/images/use-nvm-3.BMP?imageView2/2/w/1000"><h2 id="4，确认安装即可"><a href="#4，确认安装即可" class="headerlink" title="4，确认安装即可"></a>4，确认安装即可</h2><img src="http://static.ohtudou.cc/static/images/use-nvm-4.BMP?imageView2/2/w/1000"><h2 id="5，打开CMD，输入命令-nvm-，安装成功则如下显示。"><a href="#5，打开CMD，输入命令-nvm-，安装成功则如下显示。" class="headerlink" title="5，打开CMD，输入命令 nvm ，安装成功则如下显示。"></a>5，打开CMD，输入命令 nvm ，安装成功则如下显示。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PS D:\90_person\blog&gt; nvm</span><br><span class="line"></span><br><span class="line">Running version 1.1.7.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">  nvm arch                     : Show if node is running in 32 or 64 bit mode.</span><br><span class="line">  nvm install &lt;version&gt; [arch] : The version can be a node.js version or &quot;latest&quot; for the latest stable version.</span><br><span class="line">                                 Optionally specify whether to install the 32 or 64 bit version (defaults to system arch).</span><br><span class="line">                                 Set [arch] to &quot;all&quot; to install 32 AND 64 bit versions.</span><br><span class="line">                                 Add --insecure to the end of this command to bypass SSL validation of the remote download server.</span><br><span class="line">  nvm list [available]         : List the node.js installations. Type &quot;available&quot; at the end to see what can be installed. Aliased as ls.</span><br><span class="line">  nvm on                       : Enable node.js version management.</span><br><span class="line">  nvm off                      : Disable node.js version management.</span><br><span class="line">  nvm proxy [url]              : Set a proxy to use for downloads. Leave [url] blank to see the current proxy.</span><br><span class="line">                                 Set [url] to &quot;none&quot; to remove the proxy.</span><br><span class="line">  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.</span><br><span class="line">  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/cli/archive/. Leave [url] blank to default url.</span><br><span class="line">  nvm uninstall &lt;version&gt;      : The version must be a specific version.</span><br><span class="line">  nvm use [version] [arch]     : Switch to use the specified version. Optionally specify 32/64bit architecture.</span><br><span class="line">                                 nvm use &lt;arch&gt; will continue using the selected version, but switch to 32/64 bit mode.</span><br><span class="line">  nvm root [path]              : Set the directory where nvm should store different versions of node.js.</span><br><span class="line">                                 If &lt;path&gt; is not set, the current root will be displayed.</span><br><span class="line">  nvm version                  : Displays the current running version of nvm for Windows. Aliased as v.</span><br></pre></td></tr></table></figure><h1 id="4、管理nodejs"><a href="#4、管理nodejs" class="headerlink" title="4、管理nodejs"></a>4、管理nodejs</h1><h2 id="1、查看本地安装的所有版本；有可选参数available，显示所有可下载的版本。"><a href="#1、查看本地安装的所有版本；有可选参数available，显示所有可下载的版本。" class="headerlink" title="1、查看本地安装的所有版本；有可选参数available，显示所有可下载的版本。"></a>1、查看本地安装的所有版本；有可选参数available，显示所有可下载的版本。</h2><blockquote><p>nvm list [available]</p></blockquote><h2 id="2、安装，命令中的版本号可自定义，具体参考命令1查询出来的列表"><a href="#2、安装，命令中的版本号可自定义，具体参考命令1查询出来的列表" class="headerlink" title="2、安装，命令中的版本号可自定义，具体参考命令1查询出来的列表"></a>2、安装，命令中的版本号可自定义，具体参考命令1查询出来的列表</h2><blockquote><p>nvm install 12.16.1</p></blockquote><h2 id="3、使用特定版本"><a href="#3、使用特定版本" class="headerlink" title="3、使用特定版本"></a>3、使用特定版本</h2><blockquote><p>nvm use 12.16.1</p></blockquote><h2 id="4、卸载"><a href="#4、卸载" class="headerlink" title="4、卸载"></a>4、卸载</h2><blockquote><p>nvm uninstall 12.16.1</p></blockquote><h1 id="5、命令提示"><a href="#5、命令提示" class="headerlink" title="5、命令提示"></a>5、命令提示</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* nvm arch ：显示node是运行在32位还是64位。</span><br><span class="line">* nvm install &lt;version&gt; [arch] ：安装node， version是特定版本也可以是最新稳定版本latest。可选参数arch指定安装32位还是64位版本，默认是系统位数。可以添加--insecure绕过远程服务器的SSL。</span><br><span class="line">* nvm list [available] ：显示已安装的列表。可选参数available，显示可安装的所有版本。list可简化为ls。</span><br><span class="line">* nvm on ：开启node.js版本管理。</span><br><span class="line">* nvm off ：关闭node.js版本管理。</span><br><span class="line">* nvm proxy [url] ：设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</span><br><span class="line">* nvm node_mirror [url] ：设置node镜像。默认是https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</span><br><span class="line">* nvm npm_mirror [url] ：设置npm镜像。默认是 https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</span><br><span class="line">* nvm uninstall &lt;version&gt; ：卸载指定版本node。</span><br><span class="line">* nvm use [version] [arch] ：使用制定版本node。可指定32/64位。</span><br><span class="line">* nvm root [path] ：设置存储不同版本node的目录。如果未设置，默认使用当前目录。</span><br><span class="line">* nvm version ：显示nvm版本。version可简化为v。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关联Hexo与Github</title>
      <link href="/2020/03/22/hexo-github/"/>
      <url>/2020/03/22/hexo-github/</url>
      
        <content type="html"><![CDATA[<ul><li>1，文件夹里面鼠标右键，点击Git Base Here。这里“test”可以替换成自己的用户名，邮箱可以替换成自己的邮箱<blockquote><p>$ git config –global user.name “test”<br>$ git config –global user.email “<a href="mailto:test@ohtudou.com" target="_blank" rel="noopener">test@ohtudou.com</a>“</p></blockquote></li></ul><a id="more"></a><ul><li><p>2，输入cd ~/.ssh，检查是否由.ssh的文件夹</p><blockquote><p>$ cd ~/.ssh</p></blockquote></li><li><p>3，输入ls，列出该文件下的内容。</p><blockquote><p>$ ls<br>known_hosts</p></blockquote></li><li><p>4，输入ssh-keygen -t rsa -C “<a href="mailto:test@ohtudou.com" target="_blank" rel="noopener">test@ohtudou.com</a>”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\用户名.ssh）。</p><blockquote><p>$ ssh-keygen -t rsa -C “<a href="mailto:jimmy367@ohtudou.com" target="_blank" rel="noopener">jimmy367@ohtudou.com</a>“</p></blockquote></li><li><p>5，登录Github，点击头像下的settings，添加ssh</p><img src="http://static.ohtudou.cc/static/images/hexo-github-1.JPG?imageView2/2/w/1000"></li><li><p>6，配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">     type: git</span><br><span class="line">     repo: git@github.com:test/jimmy367.github.io.git</span><br><span class="line">     branch: master</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows PowerShell 执行策略</title>
      <link href="/2020/03/22/Execution-Policies/"/>
      <url>/2020/03/22/Execution-Policies/</url>
      
        <content type="html"><![CDATA[<h2 id="1，Power-Shell实行时，出现如下错误"><a href="#1，Power-Shell实行时，出现如下错误" class="headerlink" title="1，Power Shell实行时，出现如下错误"></a>1，Power Shell实行时，出现如下错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.\test.ps1 : このシステムではスクリプトの実行が無効になっているため、ファイル D:\Work\test.ps1 を読み込むことができません。詳細については、「about_Execution_Policies」(http://go.microsoft.com/fwlink/?LinkID=135170) を参照してください。</span><br><span class="line">発生場所 行:1 文字:1</span><br><span class="line">+ .\test.ps1</span><br><span class="line">+ ~~~~~~~~~~</span><br><span class="line">+ CategoryInfo : セキュリティ エラー: (: ) []、PSSecurityException</span><br><span class="line">+ FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>这是因为 Windows PowerShell 执行策略的原因。</p><a id="more"></a><h2 id="2，about-Execution-Policies简介"><a href="#2，about-Execution-Policies简介" class="headerlink" title="2，about_Execution_Policies简介"></a>2，about_Execution_Policies简介</h2><p>使用 Windows PowerShell 执行策略，可以确定 Windows PowerShell<br>加载配置文件和运行脚本的条件。</p><p>可以为本地计算机、当前用户或特定会话设置执行策略。也可使用组策略设置<br>为计算机和用户设置执行策略。</p><p>用于本地计算机和当前用户的执行策略存储在注册表中。无需在 Windows PowerShell<br>配置文件中设置执行策略。用于特定会话的执行策略仅存储在内存中，会话关闭时，<br>该执行策略将丢失。</p><p>执行策略并不是限制用户操作的安全系统。例如，当无法运行脚本时，<br>用户可通过在命令行中键入脚本内容而轻松规避某个策略。执行策略的<br>真正用途是帮助用户设置一些基本规则，并防止用户无意中违反这些规则。</p><h2 id="3，WINDOWS-POWERSHELL-执行策略"><a href="#3，WINDOWS-POWERSHELL-执行策略" class="headerlink" title="3，WINDOWS POWERSHELL 执行策略"></a>3，WINDOWS POWERSHELL 执行策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell 执行策略如下：</span><br><span class="line"> </span><br><span class="line">&quot;Restricted&quot;是默认策略。</span><br><span class="line"> </span><br><span class="line">    Restricted</span><br><span class="line">        - 默认执行策略。</span><br><span class="line"> </span><br><span class="line">        - 允许单个命令运行，但不能运行脚本。</span><br><span class="line"> </span><br><span class="line">        - 阻止所有脚本文件的运行，包括格式和配置文件 (.ps1xml)、模块脚本文件 (.psm1) </span><br><span class="line">          和 Windows PowerShell 配置文件 (.ps1)。</span><br><span class="line"></span><br><span class="line">    AllSigned</span><br><span class="line">        - 可以运行脚本。</span><br><span class="line"> </span><br><span class="line">        - 要求所有脚本和配置文件由可信发布者签名，包括在本地计算机上编写的脚本。</span><br><span class="line"> </span><br><span class="line">    - 在运行来自尚未分类为可信或不可信发布者的脚本之前进行提示。</span><br><span class="line"> </span><br><span class="line">        - 运行来自 Internet 以外的源的未签名脚本及已签名但有恶意的脚本存在风险。</span><br><span class="line">  </span><br><span class="line">    RemoteSigned</span><br><span class="line">        - 可以运行脚本。</span><br><span class="line"> </span><br><span class="line">        - 要求可信发布者对从 Internet（包括电子邮件和即时消息程序）下载的脚本和配置文件</span><br><span class="line">          进行数字签名。</span><br><span class="line"> </span><br><span class="line">    - 不要求对已经运行和已在本地计算机编写的脚本（不是从 Internet 下载的脚本）进行数</span><br><span class="line">      字签名。</span><br><span class="line"> </span><br><span class="line">        - 面临运行已签名但有恶意的脚本带来的风险。</span><br><span class="line"> </span><br><span class="line">    Unrestricted</span><br><span class="line">        - 可以运行未签名脚本。（面临运行恶意脚本所带来的风险。）</span><br><span class="line"> </span><br><span class="line">        - 在运行从 Internet 下载的脚本和配置文件之前警告用户。</span><br><span class="line"> </span><br><span class="line">    Bypass</span><br><span class="line">        - 不阻止任何执行项，不显示警告和提示。</span><br><span class="line"> </span><br><span class="line">        - 此执行策略设计用于两种配置：一种是 Windows PowerShell 脚本内置于一个较大的</span><br><span class="line">          应用程序中；一种是 Windows PowerShell 成为拥有自身安全模型的某个程序的基础。</span><br><span class="line"> </span><br><span class="line">    Undefined</span><br><span class="line">        - 当前作用域中未设置执行策略。</span><br><span class="line"> </span><br><span class="line">        - 如果所有作用域中的执行策略为 Undefined，则有效执行策略为 Restricted，该策略</span><br><span class="line">          是默认执行策略。</span><br></pre></td></tr></table></figure><h2 id="4，问题解决"><a href="#4，问题解决" class="headerlink" title="4，问题解决"></a>4，问题解决</h2><p>在powershell中执行命令</p><blockquote><p>Get-ExecutionPolicy<br>Set-ExecutionPolicy RemoteSigned</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> 设定 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> script </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可以摘抄下来的神仙句子</title>
      <link href="/2020/02/20/classic-quotations2/"/>
      <url>/2020/02/20/classic-quotations2/</url>
      
        <content type="html"><![CDATA[<p>无关风月</p><p>1.</p><blockquote><p>少年就是少年，他们看春风不喜，看夏蝉不烦，看秋风不悲，看冬雪不叹，看满身富贵懒察觉，看不公不允敢面对，只因他们是少年。</p></blockquote><p>2.</p><blockquote><p>虽然辛苦，我还是会选择那种滚烫的人生。</p></blockquote><p>3.</p><blockquote><p>在世间，本就是各人下雪，各人有各人的隐晦和皎洁。——今山事</p></blockquote><a id="more"></a><p>4.</p><blockquote><p>我想和你互相浪费，一起虚度短的沉默，长的无意义，一起消磨精致而苍老的宇宙。</p></blockquote><p>——李元胜</p><p>5.</p><blockquote><p>日语里「夏天结束了」其实和「今晚月色真美」一样，是有隐晦暗示的。代表着某天突然感知到河岸的风带来凉意，爱慕的心绪不了了之，没牵到的手，未送出的信，青春潦草收场后关上了门。就像睡了漫长的午觉醒来，穿衣洗漱准备去学校，找了半天却找不到课本和双肩包，才恍惚想起自己在多年前明明没有做好准备，就被推搡着长大成人。来不及跟夏天挥手告别的仓促人生，年轻时也对世间万物充满期待，眨眼间就落入了平庸之海。</p></blockquote><p>6.</p><blockquote><p>我们都有很多面啊，阴暗的，沉默的，孤独悲恸的那些，仅仅是忽尔忽时地抵抗都已筋疲力尽，因而像风，像山月，像野墟炊烟，与夜色相伴。</p></blockquote><p>7.</p><blockquote><p>等时至：‘故人笑比中庭树，一日秋风一日疏’，人间已别久。”</p></blockquote><p>8.</p><blockquote><p>​​​那时候，日子也正长。过了今天，还有明天；过了今年，还有明年。过了春还有夏，过了秋还有冬，过了冬又能望见明年春到，依旧桃花满梢油菜黄。 最欢喜不过，最完满不过。</p></blockquote><p>—大风刮过 又一春</p><p>9.</p><blockquote><p>你瞧这些白云聚了又散，散了又聚，人生离合，亦复如斯。</p></blockquote><p>—金庸 神雕侠侣</p><p>10.</p><blockquote><p>经一场大梦，梦中见满眼山花如翡，如见故人，喜不自胜。</p></blockquote><p>—priest 有匪</p><p>11.</p><blockquote><p>如何渡一生？山前停马蹄，绿水揉春风，林间耸翠入眼，崖前无尽深渊。行到星子入夜，白鹿饮溪边，风声渐停，万事都成空。” ​​​</p></blockquote><p>12.</p><blockquote><p>闲来桥下夜泊，听折新戏，我提壶酒看你焙新茗，想来从年少一路到古稀。</p></blockquote><p>13.</p><blockquote><p>青天共白月，我共你。</p></blockquote><p>14.</p><blockquote><p>热爱可抵岁月漫长。</p></blockquote><p>15.</p><blockquote><p>行至朝雾里，坠入暮云间。</p></blockquote><p>16.</p><blockquote><p>总有一人会愿意为你爬上月亮。—— sex education</p></blockquote><p>17.</p><blockquote><p>每个人都有属于自己的一片森林，也许你从未曾去过，但它在那里，总会在那里，迷失的人迷失了，相逢的人会再相逢。</p></blockquote><p>18.</p><blockquote><p>白日春不渡，黑夜万梦星。</p></blockquote><p>——妖扬《春不渡》</p><p>19.</p><blockquote><p>“一发现你的星群，我就朝你飞行” ——EXO《Universe》</p></blockquote><p>20.</p><blockquote><p>要活成两种样子，发光和不发光。不发光的时候，都是在为发光做准备。</p></blockquote><p>21.</p><blockquote><p>没有一颗心，会因为追求梦想会因为追求梦想而受伤。当你真心渴望某样东西时，整个宇宙都会来帮忙。——保罗•戈埃罗《牧羊少年奇幻之旅》</p></blockquote><p>22.</p><blockquote><p>“自然多好啊，有夏蝉有冬雪，有白夜有昼明，有一切祥和与安宁。不像人间，循规蹈矩，满目荒唐 ​​​。” ​​​</p></blockquote><p>23.</p><blockquote><p>“其实度过秋天最好的方式是与你坐在一棵桂花树下，每落下一朵小小的桂花，我们就互相交换一句话。等到花落尽后，我们的头上都沾满了黄色的星星，再与你共赴寒冬看雪。”</p></blockquote><p>/林逾静</p><p>24.</p><blockquote><p>​​人生太短了，看山是一天，看海也是一天，山多壮阔啊，海多好看。</p></blockquote><p>25.</p><blockquote><p>春日清晨的阳光，从窗外射进来，房间里便有了一抹斜斜的阳光，充溢着甜蜜的暖意。阳光在桌面上镀上一层金色，抬头望了一眼镜子，一张自信充满朝气的脸在镜中展现出金子般的光泽，熬红的双眼闪烁着自信的光芒。</p></blockquote><blockquote><p>太阳将我的骨头晒的酥软，索性站起来伸了个懒腰，倚在窗边出神的远眺。窗外是几丛栀子还是含包待放的骨朵，微风轻轻拂过，绿叶沙沙作响，在阳光下光彩熠熠。</p></blockquote><p>26.</p><blockquote><p>我要触目可及的绿色，我要触手可及的柔软。<br>我要沁人心脾的花香，我要林间动人的歌唱。<br>我要可以撒野的草原，我要可以拥抱的太阳。<br>我要山间松韵，我要石上泉声，我要对自然最诚挚的热爱。</p></blockquote><p>27.</p><blockquote><p>城市堕入温柔的困意，月亮枕在枝头开始醒着眼睛。</p></blockquote><p>28.</p><blockquote><p>总有人，山高路远 ，为你而来。</p></blockquote><p>29.</p><blockquote><p>少年的肩膀， 就该这样才对嘛，什么家国仇恨，浩然正气的，都不要急 先挑起清风明月、杨柳依依和草长莺飞，少年郎的肩头，本就应当满是美好的事物啊。</p></blockquote><p>30.</p><blockquote><p>读书到某个相似段落的恍神，在外喝冷饮唤起味觉的苏醒，抑或是整理旧衣物时不落痕迹的叹息。<br>这些由你衍生出来的琐碎，在数年如一日的白夜里，融汇成轻柔而遥远的光河。<br>不再触及我。<br>却依然照耀我。</p></blockquote><p>31.</p><blockquote><p>“终有一天，你会跨过静谧无声的洗墨江，离开群山环抱的旧桃源，来到无边阴霾的夜空之下。你会目睹无数不可攀爬之山相继倾覆，不可逾越之海干涸成田，你要记得，你的命运悬在刀尖上，而刀尖须得永远向前。”</p></blockquote><blockquote><p>“愿你在冷铁卷刃前，得以窥见天光。”</p></blockquote><p>——priest《有匪》</p><p>四处摘抄的句子<br>——————–『风月』——————–<br>1.</p><blockquote><p>请你一定要对号入座，我说的所有星光月亮，清泉小溪，蘸着糖的奶油和蜂蜜，这世间所有的美好事物，都只是为了形容你。</p></blockquote><p>2.</p><blockquote><p>月光下，你带着笑地向我步来，月色与雪色之间，你是第三种绝色。</p></blockquote><p>——余光中</p><p>3.</p><blockquote><p>不要问我心里有没有你，我余光中都是你。</p></blockquote><p>——余光中</p><p>4.</p><blockquote><p>即使明天早上，</p></blockquote><p>枪口和血淋淋的太阳，让我交出青春、自由和笔，</p><p>我也不会交出你。</p><p>—— 北岛</p><p>5.</p><blockquote><p>你镌刻了多少人间的惊奇，而这人间，我却只想以你作为标题。<br>—— winky诗 《标题》</p></blockquote><p>6.</p><blockquote><p> 天下桃花为你开，我弃长剑为君来。 不辞千里山川远，萤火温酒共夜白。</p></blockquote><p>7.</p><blockquote><p>两姓联姻，一堂缔约，良缘永结，匹配同称。看次日桃花灼灼，宜室宜家，卜他年瓜瓞绵绵，尔昌尔炽。谨以白头之约，书向鸿笺，好将红叶之盟，载明鸳谱。此证。 ——民国结婚证书</p></blockquote><p>8.</p><blockquote><p>愿有岁月可回首，且以深情共白头。</p></blockquote><p>—— 《和花和月长少年》</p><p>9.</p><blockquote><p>陌上花开，可缓缓归矣。</p></blockquote><p>—— 吴越王写给夫人的信</p><p>10.</p><blockquote><p>与我捻熄灯，同我书半生。问我粥可温，同我立黄昏。</p></blockquote><p>—— 改自《墨绪》</p><p>11.</p><blockquote><p>你来时冬至，但眉上风止，开口是“我来得稍稍迟”。 大抵知心有庭树，亭亭一如你风致。</p></blockquote><p>—溱桑 此日无事</p><p>12.</p><blockquote><p>你尚未出现时 我的生命平静 轩昂阔步行走 动辄料事如神 如今惶乱，怯弱 像冰融的春水 一流就流向你</p></blockquote><p>—木心 一月六日</p><p>13.</p><blockquote><p>我步步都回头，山是故人眸，柳是纤纤手，遇你之后步步都难走。”</p></blockquote><p>​​​​＿德卡先生的信箱</p><p>14.</p><blockquote><p>我熬落霞一壶，饮星月一盅，披风雪一裳，织山川一卷。灯影泛舟，鲜衣抚棋，逆风执酒，倚轩祭情。昼为绣锦，夜为渔歌，上下四方为枕，古往今来为衾。我拥天地，唯独少你。</p></blockquote><p>15.</p><blockquote><p>独自走过苍苍莽莽，与你同行才有了光。</p></blockquote><p>16.</p><blockquote><p>如果你愿意，我可以翻山越岭。如果你愿意，我可以一生守住陶罐。——海桑《如果你愿意》</p></blockquote><p>17.</p><blockquote><p>你要是愿意，我就永远爱你，你要是不愿意，我就永远相思。——王小波</p></blockquote><p>18.</p><blockquote><p>十七日尾，灯火万家长不灭。想你是三分泉水七分月，把青山浩渺看遍，你独天下奇绝</p></blockquote><p>19.</p><blockquote><p>“他的脸红不是因为亚热带的气候，而是因为那天太阳不忠，出卖一九九四年夏末心动。”</p></blockquote><p>——温特梅《太平山顶》</p><p>20.</p><blockquote><p>忽然想问你一些有关秋天的事。比如桂花的花期是多少天，天气冷了要新添几件长袖，能不能趁着八月喜欢我。</p></blockquote><p>——关骋</p><p>21.</p><blockquote><p>我喜欢的少年打天上来</p></blockquote><p>他无意掀翻烛火</p><p>点燃我双眸盛满的暮色</p><p>22.</p><blockquote><p>我喜欢的人，有光，</p></blockquote><p>光而不耀，与光同尘。</p><p>——《划重点》</p><p>23.</p><blockquote><p>《项脊轩志》最后一句：庭有枇杷树，吾妻死之年所手植也，今已亭亭如盖矣。</p></blockquote><p>24.</p><blockquote><p>一生平淡无奇，偏偏遇见了你，我的心便波澜四起，唯独遇你， 四海潮生.</p></blockquote><p>25.</p><blockquote><p>时光静好，与君语；细水流年，与君同；繁华落尽，与君老。</p></blockquote><p>—一仙枫红叶</p><p>26.</p><blockquote><p>回忆像一行行无从接剪的风景，爱始终年轻。</p></blockquote><p>——周杰伦《听见下雨的声音》</p><p>27.</p><blockquote><p>其实分别也没有这么可怕。65万个小时后，当我们氧化成风，就能变成同一杯啤酒上两朵相邻的泡沫，就能变成同一盏路灯下两粒依偎的尘埃。宇宙中的原子并不会湮灭，而我们，也终究会在一起。——理论物理学家Lawrence M.krauss</p></blockquote><p>28.</p><blockquote><p>这朵世间最美好的玫瑰，星尘为泥，银河滋养。永远不会枯萎，永远在沉静宇宙中盛放。 这是我要给你的，宇宙级别的浪漫。</p></blockquote><p>29.</p><blockquote><p>我愿意舍弃一切，以想念你终此一生。</p></blockquote><p>——朱生豪</p><p>30.</p><blockquote><p>月遇从云，花遇和风，</p></blockquote><p>今晚的夜空很美，我又想你。</p><p>——太宰治</p><p>31.</p><blockquote><p>爱你，就像吃蘸盐的面包，像在夜里狂热地疾走再将嘴唇凑近水龙头，像打开没有标签的沉重包裹，焦急、愉快、小心。——纳齐姆·希克梅特</p></blockquote><p>32.</p><blockquote><p>传说在北极的人因为天寒地冻，一开口说话就结成冰雪，对方听不见，只有回家慢慢烤来听。遇到谈情说爱的时候，回家就要仔细酿造当时的气氛。先用诗情裁成冰，把它切成细细的碎片。……等到冰雪尽融的时候，就放一把大火把雪屋都烧了，烧成另一个春天。——林清玄《煮雪》</p></blockquote><p>33.</p><blockquote><p>你总是世间最艳的绝色，是苍青山川融软了湖水，是云卷云舒拂尽了远山的花开，万里水流。更是我眼中众生，心上的温柔。眼波永远都是藏在酒窖里的甜酒，倒出酒坛便可饮一杯清冽。你总是对着我笑，笑意灌醉星河，星辰吸吐了几口气，便生出了又糯又香的月光。它会落几滴在心上，被揉成蜜糖。好似只要你在，人间几十年行走，几十年江湖烟尘散尽，从此不见风月。<br>——山行</p></blockquote><p>34.</p><blockquote><p>第一次见你的时候，我的心里已经炸成了烟花，需要用一生来打扫灰炉。<br>——钱锺书</p></blockquote><p>35.</p><blockquote><p>写了五行关于火的诗， 两行烧茶， 两行留到冬天取暖， 剩下的一行， 留给你在停电的晚上读我。<br>——洛夫</p></blockquote><p>36.</p><blockquote><p>“希望你也为了我，偷偷地笑着。”<br>——《六弄咖啡馆》</p></blockquote><p>37.</p><blockquote><p>草在结它的种子，风在摇它的叶子。我们站着，不说话，就十分美好。<br>——顾城</p></blockquote><p>38.</p><blockquote><p>“最最喜欢你，绿子。”<br>“什么程度？”<br>“像喜欢春天的熊一样。”<br>“春天的熊？什么春天的熊？”<br>“春天的原野里，你一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。它这么对你说道：‘你好，小姐，和我一块儿打滚玩好么？’接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜咕噜滚下去，整整玩了一大天。你说棒不棒？”<br>“太棒了。”<br>“我就这么喜欢你。”<br>——《挪威的森林》</p></blockquote><p>39.</p><blockquote><p>见到你，我觉得多少适应了这个世界。<br>——村上春树</p></blockquote><p>40.</p><blockquote><p>有很多话想跟你说，但一直没有机会。我携带着它们穿越季节，掠过高架，铺在山与海之间。花盛开就是一句，夜漫过就是一篇。黄昏开始书写，黎明是无数的扉页。全世界拼成首诗，我爱你当作最后一行。 ——张嘉佳</p></blockquote><p>41.</p><blockquote><p>“我从此不敢看观音。”<br>——《梁山伯与祝英台》<br>黄梅戏《梁山伯与祝英台》中，梁山伯对女扮男装的祝英台起疑，于是有了下面的对白：“英台不是女儿身，因何耳上有环痕？ ”“梁兄何必起疑云，村里酬神多庙会，年年由我扮观音，梁兄做文章要专心，你前程不想想钗裙。 ”</p></blockquote><p>“我从此不敢看观音。”</p><p>42.</p><blockquote><p>请允许我成为你的夏季。<br>——狄金森<br>43.<br>你的眼睛可真好看，里面有晴雨，日月，山川，江河，云雾，花鸟，但我的眼睛更好看，因为我的眼里有你。<br>——余光中<br>44.<br>你现在所看到的星星，<br>是它一亿年以前的样子。<br>就好像，我在银河一侧，<br>对着星空说一句：“我爱你”<br>当你听到时，<br>我已爱上你无数年。<br>——宁城《星夜集》<br>45.<br>不须耳鬓常厮伴，一笑低头意已倾。<br>——朱生豪<br>46.<br>在青山绿水之间，我想牵着你的手，走过这座桥，桥上是绿叶红花，桥下是流水人家，桥的那头是青丝，桥的这头是白发。<br>——沈从文</p></blockquote><p>47.</p><blockquote><p>“我们每一个人，都由无数个十万分之一的幸存粒子组成，散落在数十亿的人海。所以我和你相遇，是无数个微小粒子前赴后继、湮灭碰撞，创造出来的奇迹。珍贵又难得。”</p></blockquote><p>——稚楚《我只喜欢你的人设》</p><p>—————–生活智慧——————–<br>1.</p><blockquote><p>不要指望远方，不要幻想别处，生活这个东西你要习惯就地解决。<br>2.<br>条条大路通罗马，可我不想去罗马。(一定要搞清楚自己想要的是什么，不要被环境的声音所淹没。)<br>3.<br>年轻人，你的职责是平整土地，而非焦虑时光。你做三四月的事，在八九月自有答案。<br>4.<br>你觉得晚的时候，恰恰是最早的时候（不要越拖越晚，意识到就去做）<br>5.<br>成熟是一种明亮而不刺眼的光辉，一种圆润而不腻耳的声响，一种不再需要对别人察言观色的从容，一种终于停止向周围申诉求告的大气，一种不理会喧闹的微笑，一种洗刷了偏激的淡漠，一种无需声张的厚实，一种能够看的很远却并不陡峭的高度。</p></blockquote><p>——余秋雨 《苏东坡突围》<br>6.</p><blockquote><p>“你越功利，世界对你越神秘。”——《最好的我们》八月长安</p></blockquote><p>7.</p><blockquote><p>凡事需多听但少言；聆听他人之意见，但保留自己之判断。</p></blockquote><p>——莎士比亚 《哈姆雷特》</p><p>8.</p><blockquote><p>成长不是发现世界越发黑暗的过程，而是发现世界越发复杂的过程。儿时觉得世界美好，是因为简单，爱你的人都为你阻挡了复杂。世界没有很糟糕也没有很美好，它只是复杂，只有好的一面和坏的一面都不代表真实。</p></blockquote><p>9.</p><blockquote><p>外界的声音都是参考，你不开心就不要参考。</p></blockquote><p>10.</p><blockquote><p>我们在与人沟通时，总是竭力表现自己，卖弄自己的学识，却不去了解对方，获取新的知识。沉默和谦虚有助于人交往。</p></blockquote><p>11.</p><blockquote><p>不必过于在意人与人之间一些表面的情绪，挚交之人不需要，泛交之人用不着。</p></blockquote><p>12.</p><blockquote><p>你要克服的是你的虚荣心，是你的炫耀欲，你要对付的是你时刻想要出风头的小聪明。</p></blockquote><p>13.</p><blockquote><p>在原则问题上你不能对任何人妥协，你不能降低自己来满足别人，否则你会让人觉得你是个可以讨价还价的人，然后对你变本加厉.</p></blockquote><hr><p>打开作文纸条发现我的收藏夹是这个画风</p><p>1.</p><blockquote><p>积羽沉舟，群轻折轴。</p></blockquote><p>—— 刘向（防微杜渐注重积累 团结的力量）</p><p>2.</p><blockquote><p>岁月骛过，山陵浸远。 —— 后汉书（时光飞逝物是人非）</p></blockquote><p>3.</p><blockquote><p>君臣一梦，今古空名。但远山长，云山乱，晓山青。 ——苏轼（淡泊名利，欣赏人生中的风景）</p></blockquote><p>4.</p><blockquote><p>无冥冥之志者，无昭昭之明；无惛惛之事者，无赫赫之功。—— 荀子（努力读书 智慧与坚持恒心 厚积薄发）</p></blockquote><p>5.</p><blockquote><p>心如规矩，志如尺衡，平静如水，正直如绳。——严遵（坚守原则正直行事）</p></blockquote><p>6.</p><blockquote><p>必有容，德乃大；必有忍，事乃济。——格言联璧（宽容大度）</p></blockquote><p>7.</p><blockquote><p>近水知鱼性，近山识鸟音。——周希陶（实践出真知熟能生巧 环境与人的关系）</p></blockquote><p>8.</p><blockquote><p>以不息为体，以日新为道。——刘禹锡（自强不息勤奋进取 创新力量）</p></blockquote><p>9.</p><blockquote><p>一年好景君须记，最是橙黄橘绿时。 ——苏轼（勉励 乐观 不囿于困境 把握时光）</p></blockquote><p>10.</p><blockquote><p>此处果有可乐，我即别无所思。 ——林语堂（心怀理想，在专注中发现乐趣）</p></blockquote><p>我来了我来了我带着更新走来了</p><p>1.</p><blockquote><p>牛羊才成群结队，猛兽永远独行</p></blockquote><p>2.</p><blockquote><p>这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。</p></blockquote><p>——于宙《我们这一代人的困惑》</p><p>3.</p><blockquote><p>我不祝你一帆风顺，我祝你乘风破浪。</p></blockquote><p>4.</p><blockquote><p>哪怕是野火焚烧，哪怕是冰雪覆盖，依然是志向不改，依然是信念不衰。</p></blockquote><p>——《悟空传》</p><p>5.</p><blockquote><p>心之所向，素履以往，生如逆旅，一苇以航。</p></blockquote><p>——七堇年《尘曲》</p><p>6.</p><blockquote><p>一定要爱着点什么，它让我们变得坚韧、宽容、充盈。业余的，爱着。</p></blockquote><p>——汪曾祺《生活是很好玩》</p><p>7.</p><blockquote><p>“万物复苏，而又归于万籁俱寂。你是填满世间空落落的长镜头”</p></blockquote><p>8.</p><blockquote><p>九份老街坐南朝北，终日阳光稀少，大部分民居的房屋像是从山上生长出来的，白天看上去有些陈旧，到了晚上便是连绵不绝的灯火。</p></blockquote><p>9.</p><blockquote><p>——是什么感觉呢？</p></blockquote><p>——不知道。仿佛是世界末日，朝着灼耀的光点不断的奔跑。虽然浑身乏力，却还是充满希望地朝着那奔路的感觉。</p><p>10.</p><blockquote><p>我有时会在自己某个毫不经意的举止间想到他。想到的时候思绪会迟缓几秒再思考，会感到小得却足以动容的惊惧感。我觉得这简直不可理喻。直到后来与形色古怪的众多陌生人同住磨合日趋平滑时才意识到：每个人都在继承一些人的生之秉性，悄无声息地附在了生活里。今天天气极好，满山红叶着了火。</p></blockquote><p>11.</p><blockquote><p>人的一生是万里河山，来往无数过客。有人给山河添色，有人使日月无光，有人改他江流，有人塑他梁骨。大限到时，不过是立在山巅，江河回望。</p></blockquote><p>12.</p><blockquote><p>宁山间碎骨，沉河不浮，不愿守棺而驻，灵魂碌碌。</p></blockquote><p>13.</p><blockquote><p>祝你所求皆如愿，所行化坦途，多喜乐，长安宁。</p></blockquote><p>14.</p><blockquote><p>唯是少年时，落拓高醺后。与你万人丛中缓缓一握手。</p></blockquote><p>15.</p><blockquote><p>到尽人事，莫问前程。</p></blockquote><p>16.</p><blockquote><p>满载一船明月，平铺千里秋江。</p></blockquote><p>17.</p><blockquote><p>我拥向宇宙吹来的风，与夏夜相逢，是六月盛装，是清寂长生。</p></blockquote><p>18.</p><blockquote><p>我与你隔着长风深谷，近不得，退不舍。</p></blockquote><p>19.</p><blockquote><p>你是往事的遗书，是日落的余情未了，是路人脚下不停生长的风。</p></blockquote><p>20.</p><blockquote><p>我在云中独行，给人间的街灯撒上细盐，灯火朗照，盐粒里藏着我酿了一秋的甜。——风月书</p></blockquote><p>21.</p><blockquote><p>浮生有梦三千场，穷尽千里诗酒荒。</p></blockquote><p>22.</p><blockquote><p>步过春光，醉老西窗，才知人间以荒。</p></blockquote><p>23.</p><blockquote><p>月出前山青黛寒，雁声遥下碧云端。——刘基《江上曲》</p></blockquote><p>24.</p><blockquote><p>你说，</p></blockquote><p>我们就山居于此吧，</p><p>胭脂用尽时，</p><p>桃花就开了。</p><p>——与谢野晶子</p><p>25.</p><blockquote><p>你要抵达山川湖海，把沿途每一帧星芒收进满载痴梦的行囊，重逢之日，最玄妙的不是情话，是夕找孤烟，铁马冰河。</p></blockquote><p>26.</p><blockquote><p>总之岁月漫长，然而值得等待。 ——村上春树</p></blockquote><p>27.</p><blockquote><p>夫天地者，万物之逆旅也；光阴者，百代之过客也；而浮生若梦，为欢几何？</p></blockquote><p>28.</p><blockquote><p>夜暗方显万颗星，灯明始见一缕尘。——七堇年</p></blockquote><p>29.</p><blockquote><p>世间所有的相遇，都是久别重逢。——白落梅</p></blockquote><p>30.</p><blockquote><p>“我始终相信，走过平湖烟雨，岁月山河，那些经历劫数，尝遍百味的人，会更加生动而干净。”</p></blockquote><p>31.</p><blockquote><p>星河滚烫你是人间理想</p></blockquote><p>皓月清凉你是人间曙光</p><p>人海冷漠你是人间炽热</p><p>万世浮沉你是人间归途</p><p>众人平庸你是人间星光</p><p>世事无常你是人间琳琅</p><p>——抖音</p><p>—————————年少心事—————————</p><p>1.</p><blockquote><p>“特别喜欢那种气质清冷的人，好似这世间纷乱无一事能扰了他的心，没有过分热络的样子，没有讨好世间的谄笑，他们眼中只有脚下的路，眸子里从不掺杂多余的情绪，却也不是冷漠，只不过将此生所有的柔情都留给了生命里重要的人，与旁人只是淡淡如水的交情，却也装着漫不经心的样子关注着身旁陌路的老人和小孩，随意伸手就帮了，善良的不着痕迹。”</p></blockquote><p>2.</p><blockquote><p>我为什么对有少年感的男孩子有超级多喜欢。</p></blockquote><p>什么叫少年感?不是小狼狗也不是小奶狗，他能让你想起湛蓝的天，植物的味道，和晨曦的光。</p><p>他会有蓬松柔软的头发，明朗的笑容，清风明月般的温柔。</p><p>他有少年侠气，亦存柔软心肠。</p><p>他胸腔有燃烧的血，还有一身坚硬的骨。</p><p>他若冲我笑起来，一定会心动。</p><p>3.</p><blockquote><p>看月亮是件很隐私也很浪漫的事情，我想和喜欢的人一起看月亮。不是你看一眼我也看一眼的那种，最好四下无人，最好我们靠在一起，夜幕四合月亮躺在星星的怀抱里，我看一眼月亮再偷看一眼你。</p></blockquote><p>4.</p><blockquote><p>“双向暗恋是一种什么体验?”</p></blockquote><p>“所有小心思都藏着掖着，只敢小心翼翼去试探，害怕被发现，忽远忽近，若即若离。是一场以为会无疾而终的自我挣扎。”</p><p>没有一种爱情比暗恋更美好也更复杂。</p><p>但也没有一种爱情比暗恋更心酸。</p><p>如果没有人勇敢的先迈出一步，那就只能是遗憾了</p><p>5.</p><blockquote><p>他对于我的意义,更像一个我的想象力捏造出来的角色，站在那里，每当我对这个世界无聊的规则失去兴趣,每当我被这个社会的价值观捆绑，每当我领略到其他男性多一点的聒噪和肤浅，他冷清又寡言的样子又美好一分。根据荣格的“阿尼姆斯原理”，男神是每个女人心中都有的男人形象，是女人心灵中的男性成分。阿尼姆斯身上有女姓认为男性所有的好的特点。我想大概是我太想成为他孤独又沉静的样子，才会为自己立一个神，整日解读与模仿</p></blockquote><p>6.</p><blockquote><p>十几岁的人说出的情话不是情话，只是，昨晚梦到了你，清晨起来，虫鸣鸟叫，餐桌上有一盘草莓，挑了一颗最好的，在放进嘴巴之前，忽然想要拿给你。于是拿给你。不辞万里。</p></blockquote><p>——高台树色《白日事故》</p><p>————————古诗词———————</p><p>古诗词</p><p>1.</p><blockquote><p>且将新火试新茶,诗酒趁年华。</p></blockquote><p>《望江南·超然台作》</p><p>2.</p><blockquote><p>醉后不知天在水,满船清梦压星河。</p></blockquote><p>唐珙《题龙阳县青草湖》</p><p>3.</p><blockquote><p>浮云一别后，流水十年间。</p></blockquote><blockquote><p>欢笑情如旧，萧疏鬓已斑。</p></blockquote><p>韦应物《淮上喜会梁川故人》</p><p>4.</p><blockquote><p>且挨过三冬四夏，暂受些此痛苦。</p></blockquote><p>雪尽后再看梅花。</p><p>吴汝纶《百字铭》</p><p>5.</p><blockquote><p>人本过客来无处，休说故里在何方。<br>随遇而安无不可,人间到处有花香。</p></blockquote><p>林语堂《京华烟云》</p><p>6.</p><blockquote><p>绿蚁新醅酒，红泥小火炉。<br>晚来天欲雪，能饮一杯无?</p></blockquote><p>白居易《问刘十九》</p><p>7.</p><blockquote><p>君埋泉下泥销骨，我寄人间雪满头。</p></blockquote><p>白居易《梦微之》</p><p>8.</p><blockquote><p>十年生死两茫茫,不思量，自难忘</p></blockquote><p>千里孤坟,无处话凄凉。</p><p>苏轼《江城子》</p><p>9.</p><blockquote><p>最是人间留不住，朱颜辞镜花辞树。</p></blockquote><p>王国维《蝶恋花》</p><p>10.</p><blockquote><p>玲珑骰子安红豆，入骨相思知不知。</p></blockquote><p>温庭筠《杨柳枝》</p><p>11.</p><blockquote><p>我见青山多妩媚,料青山见我应如是。</p></blockquote><p>辛弃疾《贺新郎·甚矣吾衰矣》</p><p>12.</p><blockquote><p>回廊一寸相思地，落月成孤倚。</p></blockquote><p>背灯和月就花阴，已是十年踪迹十年心。</p><p>纳兰性德《虞美人》</p><p>13.</p><blockquote><p>小舟从此逝,江海寄余生。</p></blockquote><p>苏轼《临江仙-夜饮东坡醒复醉》</p><p>14.</p><blockquote><p>众里寻他千百度,蓦然回首，</p></blockquote><p>那人却在，灯火阑珊处。</p><p>辛弃疾《青玉案·元夕》</p><p>15.</p><blockquote><p>一生负气成今日,四海无人对夕阳。</p></blockquote><p>陈寅恪《忆故居》</p><p>16.</p><blockquote><p>桃李春风一杯酒，江湖夜雨十年灯。</p></blockquote><p>黄庭坚《寄黄几复》</p><p>17.</p><blockquote><p>尝遍人间甘辛味,言外冷暖我自知。</p></blockquote><p>夏目漱石《我是猫》</p><p>18.</p><blockquote><p>少年不识愁滋味，爱上层楼。爱上层楼，为赋新词强说愁。</p></blockquote><p>如今识尽愁滋味，欲说还休。欲说还休，却道天凉好个秋。</p><p>辛弃疾《丑奴儿·书博山道中壁》</p><p>19.</p><blockquote><p>秦时明月汉时关，万里长征人未还。</p></blockquote><p>但使龙城飞将在，不教胡马度阴山。</p><p>王昌龄《出塞》</p><p>20.</p><blockquote><p>同是天涯沦落人，相逢何必曾相识。</p></blockquote><p>白居易《琵琶行》</p><p>21.</p><blockquote><p>溪云初起日沉阁，山雨欲来风满楼。</p></blockquote><p>许浑《咸阳城东楼》</p><p>22.</p><blockquote><p>山中何事？松花酿酒，春水煎茶。<br>——张可久《人月圆·山中书事》</p></blockquote><p>23.</p><blockquote><p>疏影横斜，远映西湖清浅；暗香浮动，长陪夜月黄昏。</p></blockquote><p>——张岱《补孤山种梅叙》</p><p>24.</p><blockquote><p>但屈指西风几时来，又不道流年暗中偷换。</p></blockquote><p>——苏轼《洞仙歌·冰肌玉骨》</p><p>25.</p><blockquote><p>重嘶匹马吟红叶，却听疏钟忆翠微。</p></blockquote><p>——陆龟蒙</p><p>26.</p><blockquote><p>行到水穷处，坐看云起时。</p></blockquote><p>——王维</p><p>27.</p><blockquote><p>我有一瓢酒，可以慰风尘。</p></blockquote><p>——韦应物</p><p>28.</p><blockquote><p>翩若惊鸿，婉若游龙，荣曜秋菊，华茂春松。髣髴兮若轻云之蔽月，飘飖兮若流风之回雪。</p></blockquote><p>29.</p><blockquote><p>松下问童子，言师采药去。</p></blockquote><p>只在此山中，云深不知处。</p><p>——贾岛《寻隐者不遇》</p><p>30.</p><blockquote><p>天上白玉京，十二城五楼。</p></blockquote><p>仙人抚我顶，结发受长生。</p><p>31羡青山有思，白鹤忘机。</p><p>——汤恢《八声甘州》</p><p>32.</p><blockquote><p>墙头马上遥相顾，一见知君即断肠。 ——白居易</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 名言名句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典 </tag>
            
            <tag> 名言名句 </tag>
            
            <tag> 唯美 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）重构后端REST API</title>
      <link href="/2019/05/22/learn-angular-part4/"/>
      <url>/2019/05/22/learn-angular-part4/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/learn-angular-part4-1.png?imageView2/2/w/1000"><p>到上一章为止，我们的程序结构如下所示：<br><img src="http://static.ohtudou.cc/static/images/learn-angular-part4-2.png"><br>TodoDataService将所有的数据存储在内存中。在本章，我们将更改为和后端REST API通信。</p><p>在本篇文章中，我们将：</p><ul><li>创建后端REST API mock</li><li>将API URL 作为环境变量存储</li><li>创建ApiService用于和 REST API 通信</li><li>更新TodoDataService来使用ApiService</li><li>更新AppComponent处理异步API调用</li><li>创建ApiMockService避免当运行单体测试的时候调用真正得HTTP</li></ul><a id="more"></a><p>完成后，我们的应用程序架构会像这样：<br><img src="http://static.ohtudou.cc/static/images/learn-angular-part4-3.png"></p><p>通过这篇文章，我们将学习到：</p><ul><li>如何使用环境变量存储应用设置</li><li>如果使用Angular HTTP Client进行HTTP请求</li><li>如何处理Angular HTTP Client返回的对象</li><li>如何使用mock避免当运行单体测试的时候调用真正得HTTP</li></ul><h1 id="创建后端REST-API"><a href="#创建后端REST-API" class="headerlink" title="创建后端REST API"></a>创建后端REST API</h1><p>我们使用 json-server 快速创建 REST API mock<br>在当前应用得根目录运行：</p><blockquote><p>npm install json-server –save</p></blockquote><p>在根目录创建db.json，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;todos&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 1,</span><br><span class="line">      &quot;title&quot;: &quot;Read SitePoint article&quot;,</span><br><span class="line">      &quot;complete&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 2,</span><br><span class="line">      &quot;title&quot;: &quot;Clean inbox&quot;,</span><br><span class="line">      &quot;complete&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 3,</span><br><span class="line">      &quot;title&quot;: &quot;Make restaurant reservation&quot;,</span><br><span class="line">      &quot;complete&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在package.json添加启动script:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;json-server&quot;: &quot;json-server --watch db.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们能用以下命令启动REST API:</p><blockquote><p>npm run json-server</p></blockquote><p>命令行显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\&#123;^_^&#125;/ hi!</span><br><span class="line"></span><br><span class="line">Loading db.json</span><br><span class="line">Done</span><br><span class="line"></span><br><span class="line">Resources</span><br><span class="line">http://localhost:3000/todos</span><br><span class="line"></span><br><span class="line">Home</span><br><span class="line">http://localhost:3000</span><br></pre></td></tr></table></figure></p><p>可以通过浏览器验证：</p><blockquote><p><a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p></blockquote><p>支持如下：</p><ul><li>GET /todos: 取得所有的todo</li><li>GET /todos/:id: 取得指定的todo</li><li>POST /todos: 创建一个新的todo</li><li>PUT /todos/:id: 更新指定的todo</li><li>DELETE /todos/:id: 删除指定的todo</li></ul><h1 id="存储-API-URL"><a href="#存储-API-URL" class="headerlink" title="存储 API URL"></a>存储 API URL</h1><p>现在已经做成了后端REST API，我们必须在Angular应用中存储URL。</p><p>需要满足如下要求：<br>1，存储到单独的位置，当需要修改的时候，只需要修改一处<br>2，确保应用程序当在开发环境的时候使用开发环境的API，发布环境的时候使用发布环境的API</p><p>幸运的是，Angular CLI 支持环境设定，默认的情况下，有两个环境：development，production。 环境配置文件分别如下：</p><blockquote><p>src/environments/environment.ts<br>src/environments/environment.prod.ts</p></blockquote><p>添加API URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// src/environments/environment.ts</span><br><span class="line">// used when we run `ng serve` or `ng build`</span><br><span class="line">export const environment = &#123;</span><br><span class="line">  production: false,</span><br><span class="line"></span><br><span class="line">  // URL of development API</span><br><span class="line">  apiUrl: &apos;http://localhost:3000&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// src/environments/environment.prod.ts</span><br><span class="line">// used when we run `ng serve --environment prod` or `ng build --environment prod`</span><br><span class="line">export const environment = &#123;</span><br><span class="line">  production: true,</span><br><span class="line"></span><br><span class="line">  // URL of production API</span><br><span class="line">  apiUrl: &apos;http://localhost:3000&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在应用程序中可以按照如下方式使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; environment &#125; from &apos;environments/environment&apos;;</span><br><span class="line"></span><br><span class="line">// we can now access environment.apiUrl</span><br><span class="line">const API_URL = environment.apiUrl;</span><br></pre></td></tr></table></figure></p><p>当运行ng serve 或者 ng build，Angular CLI 使用 src/environments/environment.ts。</p><p>当运行ng serve –environment prod 或者 ng build –environment prod，Angular CLI 使用 src/environments/environment.prod.ts。</p><p>dev，prod和文件的对应关系在.angular-cli.json中定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;environments&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;environments/environment.ts&quot;,</span><br><span class="line">  &quot;prod&quot;: &quot;environments/environment.prod.ts&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以添加新的环境，例如staging:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;environments&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;environments/environment.ts&quot;,</span><br><span class="line">  &quot;staging&quot;: &quot;environments/environment.staging.ts&quot;,</span><br><span class="line">  &quot;prod&quot;: &quot;environments/environment.prod.ts&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="创建访问REST-API-的-Service"><a href="#创建访问REST-API-的-Service" class="headerlink" title="创建访问REST API 的 Service"></a>创建访问REST API 的 Service</h1><p>首先创建ApiService:</p><blockquote><p>ng g service Api</p></blockquote><p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">installing service</span><br><span class="line">  create src/app/api.service.spec.ts</span><br><span class="line">  create src/app/api.service.ts</span><br></pre></td></tr></table></figure></p><p>打开src/app/api.service.ts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &apos;root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class ApiService &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加Angular HTTP 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; environment &#125; from &apos;../environments/environment&apos;;</span><br><span class="line">import &#123; HttpClient, HttpErrorResponse &#125; from &apos;@angular/common/http&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; Todo &#125; from &apos;./todo&apos;;</span><br><span class="line">import &#123; Observable, throwError &#125; from &apos;rxjs&apos;;</span><br><span class="line">import &#123; catchError &#125; from &apos;rxjs/operators&apos;;</span><br><span class="line"></span><br><span class="line">const API_URL = environment.apiUrl;</span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &apos;root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class ApiService &#123;</span><br><span class="line">  constructor(private http: HttpClient) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  // API: GET /todos</span><br><span class="line">  public getAllTodos() : Observable&lt;Todo[]&gt; &#123;</span><br><span class="line">    return this.http</span><br><span class="line">    .get&lt;Todo[]&gt;(API_URL + &apos;/todos&apos;)</span><br><span class="line">    .pipe(</span><br><span class="line">      catchError(this.handleError)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  public createTodo(todo: Todo): Observable&lt;Todo&gt; &#123;</span><br><span class="line">    return this.http</span><br><span class="line">      .post&lt;Todo&gt;(API_URL + &apos;/todos&apos;, todo)</span><br><span class="line">      .pipe(</span><br><span class="line">        catchError(this.handleError)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public getTodoById(todoId: number): Observable&lt;Todo&gt; &#123;</span><br><span class="line">    return this.http</span><br><span class="line">      .get&lt;Todo&gt;(API_URL + &apos;/todos/&apos; + todoId)</span><br><span class="line">      .pipe(</span><br><span class="line">        catchError(this.handleError)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public updateTodo(todo: Todo): Observable&lt;Todo&gt; &#123;</span><br><span class="line">    return this.http</span><br><span class="line">      .put&lt;Todo&gt;(API_URL + &apos;/todos/&apos; + todo.id, todo)</span><br><span class="line">      .pipe(</span><br><span class="line">        catchError(this.handleError)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public deleteTodoById(todoId: number): Observable&lt;null&gt; &#123;</span><br><span class="line">    return this.http</span><br><span class="line">      .delete&lt;null&gt;(API_URL + &apos;/todos/&apos; + todoId)</span><br><span class="line">      .pipe(</span><br><span class="line">        catchError(this.handleError)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleError(error: HttpErrorResponse) &#123;</span><br><span class="line">    let errorMessage = &apos;&apos;;</span><br><span class="line">    if(error.error instanceof ErrorEvent) &#123;</span><br><span class="line">      // Get client-side error</span><br><span class="line">      errorMessage = error.error.message;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // Get server-side error</span><br><span class="line">      errorMessage = `Error Code: $&#123;error.status&#125;\nMessage: $&#123;error.message&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">    window.alert(errorMessage);</span><br><span class="line">    return throwError(errorMessage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="更新-TodoDataService"><a href="#更新-TodoDataService" class="headerlink" title="更新 TodoDataService"></a>更新 TodoDataService</h1><p>当前的TodoDataService在内存中存储数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Injectable&#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;Todo&#125; from &apos;./todo&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line">export class TodoDataService &#123;</span><br><span class="line"></span><br><span class="line">  // Placeholder for last id so we can simulate</span><br><span class="line">  // automatic incrementing of ids</span><br><span class="line">  lastId: number = 0;</span><br><span class="line"></span><br><span class="line">  // Placeholder for todos</span><br><span class="line">  todos: Todo[] = [];</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate POST /todos</span><br><span class="line">  addTodo(todo: Todo): TodoDataService &#123;</span><br><span class="line">    if (!todo.id) &#123;</span><br><span class="line">      todo.id = ++this.lastId;</span><br><span class="line">    &#125;</span><br><span class="line">    this.todos.push(todo);</span><br><span class="line">    return this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate DELETE /todos/:id</span><br><span class="line">  deleteTodoById(id: number): TodoDataService &#123;</span><br><span class="line">    this.todos = this.todos</span><br><span class="line">      .filter(todo =&gt; todo.id !== id);</span><br><span class="line">    return this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate PUT /todos/:id</span><br><span class="line">  updateTodoById(id: number, values: Object = &#123;&#125;): Todo &#123;</span><br><span class="line">    let todo = this.getTodoById(id);</span><br><span class="line">    if (!todo) &#123;</span><br><span class="line">      return null;</span><br><span class="line">    &#125;</span><br><span class="line">    Object.assign(todo, values);</span><br><span class="line">    return todo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate GET /todos</span><br><span class="line">  getAllTodos(): Todo[] &#123;</span><br><span class="line">    return this.todos;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate GET /todos/:id</span><br><span class="line">  getTodoById(id: number): Todo &#123;</span><br><span class="line">    return this.todos</span><br><span class="line">      .filter(todo =&gt; todo.id === id)</span><br><span class="line">      .pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Toggle todo complete</span><br><span class="line">  toggleTodoComplete(todo: Todo) &#123;</span><br><span class="line">    let updatedTodo = this.updateTodoById(todo.id, &#123;</span><br><span class="line">      complete: !todo.complete</span><br><span class="line">    &#125;);</span><br><span class="line">    return updatedTodo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了能够访问REST API，需要注入ApiService，修改后代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;Todo&#125; from &apos;./todo&apos;;</span><br><span class="line">import &#123; ApiService &#125; from &apos;./api.service&apos;;</span><br><span class="line">import &#123; Observable &#125; from &apos;rxjs&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &apos;root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class TodoDataService &#123;</span><br><span class="line"></span><br><span class="line">  constructor(private api: ApiService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate POST /todos</span><br><span class="line">  addTodo(todo: Todo): Observable&lt;Todo&gt; &#123;</span><br><span class="line">    return this.api.createTodo(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate DELETE /todos/:id</span><br><span class="line">  deleteTodoById(todoId: number): Observable&lt;Todo&gt; &#123;</span><br><span class="line">    return this.api.deleteTodoById(todoId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate PUT /todos/:id</span><br><span class="line">  updateTodo(todo: Todo): Observable&lt;Todo&gt; &#123;</span><br><span class="line">    return this.api.updateTodo(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate GET /todos</span><br><span class="line">  getAllTodos(): Observable&lt;Todo[]&gt; &#123;</span><br><span class="line">    return this.api.getAllTodos();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Simulate GET /todos/:id</span><br><span class="line">  getTodoById(todoId: number): Observable&lt;Todo&gt; &#123;</span><br><span class="line">    return this.api.getTodoById(todoId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Toggle complete</span><br><span class="line">  toggleTodoComplete(todo: Todo) &#123;</span><br><span class="line">    todo.complete = !todo.complete;</span><br><span class="line">    return this.api.updateTodo(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="更新-AppComponent"><a href="#更新-AppComponent" class="headerlink" title="更新 AppComponent"></a>更新 AppComponent</h1><p>当前的AppComponent通过TodoDataService直接返回的Javascript对应或数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Component&#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;TodoDataService&#125; from &apos;./todo-data.service&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-root&apos;,</span><br><span class="line">  templateUrl: &apos;./app.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./app.component.css&apos;],</span><br><span class="line">  providers: [TodoDataService]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    private todoDataService: TodoDataService</span><br><span class="line">  ) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onAddTodo(todo) &#123;</span><br><span class="line">    this.todoDataService.addTodo(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onToggleTodoComplete(todo) &#123;</span><br><span class="line">    this.todoDataService.toggleTodoComplete(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onRemoveTodo(todo) &#123;</span><br><span class="line">    this.todoDataService.deleteTodoById(todo.id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get todos() &#123;</span><br><span class="line">    return this.todoDataService.getAllTodos();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是新的ApiService方法返回的是 Observables。<br>Observables是异步的，需要更新代码能正确处理Observable 返回值。</p><p>我们使用subscribe()方法订阅可观察对象（Observable）</p><p>在AppComponent初始化的时候，异步取得todos:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, OnInit &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; TodoDataService &#125; from &apos;./todo-data.service&apos;;</span><br><span class="line">import &#123; Todo &#125; from &apos;./todo&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-root&apos;,</span><br><span class="line">  templateUrl: &apos;./app.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./app.component.css&apos;],</span><br><span class="line">  providers: [TodoDataService]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  todos: Todo[] = [];</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    private todoDataService: TodoDataService</span><br><span class="line">  ) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public ngOnInit() &#123;</span><br><span class="line">    this.todoDataService</span><br><span class="line">      .getAllTodos()</span><br><span class="line">      .subscribe(</span><br><span class="line">        (todos) =&gt; &#123;</span><br><span class="line">          this.todos = todos;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先我们定义一个public属性 todos，初始化为空数组。</p><p>在 ngOnInit() 方法 订阅 this.todoDataService.getAllTodos()，当值返回的时候，赋值给this.todos。</p><p>修改后完整的AppComponent如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, OnInit &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;Todo&#125; from &apos;./todo&apos;;</span><br><span class="line">import &#123;TodoDataService&#125; from &apos;./todo-data.service&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-root&apos;,</span><br><span class="line">  templateUrl: &apos;./app.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./app.component.css&apos;],</span><br><span class="line">  providers: [TodoDataService]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent implements OnInit  &#123;</span><br><span class="line"></span><br><span class="line">  todos: Todo[] = [];</span><br><span class="line"></span><br><span class="line">  constructor(private todoDataService: TodoDataService) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public ngOnInit() &#123;</span><br><span class="line">    this.todoDataService</span><br><span class="line">      .getAllTodos()</span><br><span class="line">      .subscribe(</span><br><span class="line">        (todos) =&gt; &#123;</span><br><span class="line">          this.todos = todos;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onAddTodo(todo) &#123;</span><br><span class="line">    this.todoDataService</span><br><span class="line">      .addTodo(todo)</span><br><span class="line">      .subscribe(</span><br><span class="line">        (newTodo) =&gt; &#123;</span><br><span class="line">          this.todos = this.todos.concat(newTodo);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onToggleTodoComplete(todo) &#123;</span><br><span class="line">    this.todoDataService</span><br><span class="line">      .toggleTodoComplete(todo)</span><br><span class="line">      .subscribe(</span><br><span class="line">        (updatedTodo) =&gt; &#123;</span><br><span class="line">          todo = updatedTodo;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onRemoveTodo(todo) &#123;</span><br><span class="line">    this.todoDataService</span><br><span class="line">      .deleteTodoById(todo.id)</span><br><span class="line">      .subscribe(</span><br><span class="line">        (_) =&gt; &#123;</span><br><span class="line">          this.todos = this.todos.filter((t) =&gt; t.id !== todo.id);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>看一看所有的代码是否能正常运行。<br>打开terminal，启动 REST API：</p><blockquote><p>npm run json-server</p></blockquote><p>启动 Angular 应用程序</p><blockquote><p>ng serve</p></blockquote><p>浏览器访问 <a href="http://localhost:4200" target="_blank" rel="noopener">http://localhost:4200</a> 显示如下：<br><img src="http://static.ohtudou.cc/static/images/learn-angular-part4-4.png"></p><h1 id="单体测试"><a href="#单体测试" class="headerlink" title="单体测试"></a>单体测试</h1><p>更新中</p><h1 id="创建ApiMockService"><a href="#创建ApiMockService" class="headerlink" title="创建ApiMockService"></a>创建ApiMockService</h1><p>更新中</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）理解组件体系结构：重构Todo App</title>
      <link href="/2019/04/19/learn-angular-part3/"/>
      <url>/2019/04/19/learn-angular-part3/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/learn-angular-part3-1.png?imageView2/2/w/1000"><p>在本篇文章中，我们将创建：</p><ul><li>用于显示代办项目列表的TodoListComponent</li><li>用于显示单个代办项目的TodoListItemComponent</li><li>用于创建新的代办项目的TodoListHeaderComponent</li><li>用于显示共有多少代办项目的TodoListFooterComponent</li></ul><a id="more"></a><p>我们的应用程序架构会像这样：<br><img src="http://static.ohtudou.cc/static/images/learn-angular-part3-2.png"><br>本文将讨论标有红色边框的项目，以外的部分会在后续文章中说明。</p><p>通过这篇文章，我们将学习到：</p><ul><li>基本Angular组件体系结构</li><li>如何利用属性绑定向组建传递数据</li><li>如何利用组件事件监听器监听事件源</li><li>为什么分解成可重用的组件是一个好的做法</li><li>smart和dumb组件的区别，为什么保持组件dumb(哑)是一个很好的实践。</li></ul><h1 id="更新并运行"><a href="#更新并运行" class="headerlink" title="更新并运行"></a>更新并运行</h1><hr><p>安装最新版angular命令如下：</p><blockquote><p>npm install -g @angular/cli@latest</p></blockquote><p>如果需要移除过去版本重新安装：</p><blockquote><p>npm uninstall -g @angular/cli angular-cli<br>npm cache clean --force<br>npm install -g @angular/cli@latest<br>＊win系统中需要管理者权限执行</p></blockquote><h1 id="已完成-AppComponent"><a href="#已完成-AppComponent" class="headerlink" title="已完成 AppComponent"></a>已完成 AppComponent</h1><hr><p>让我们打开已完成的 src/app/app.component.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;todoapp&quot;&gt;</span><br><span class="line">  &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Todos&lt;/h1&gt;</span><br><span class="line">    &lt;input class=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autofocus=&quot;&quot; [(ngModel)]=&quot;newTodo.title&quot; (keyup.enter)=&quot;addTodo()&quot;&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;section class=&quot;main&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">      &lt;li *ngFor=&quot;let todo of todos&quot; [class.completed]=&quot;todo.complete&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">          &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; (click)=&quot;toggleTodoComplete(todo)&quot; [checked]=&quot;todo.complete&quot;&gt;</span><br><span class="line">          &lt;label&gt;&#123;&#123;todo.title&#125;&#125;&lt;/label&gt;</span><br><span class="line">          &lt;button class=&quot;destroy&quot; (click)=&quot;removeTodo(todo)&quot;&gt;&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">  &lt;footer class=&quot;footer&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;todo-count&quot;&gt;&lt;strong&gt;&#123;&#123;todos.length&#125;&#125;&lt;/strong&gt; &#123;&#123;todos.length == 1 ? &apos;item&apos; : &apos;items&apos;&#125;&#125; left&lt;/span&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><p>类 src/app/app.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;Todo&#125; from &apos;./todo&apos;;</span><br><span class="line">import &#123;TodoDataService&#125; from &apos;./todo-data.service&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-root&apos;,</span><br><span class="line">  templateUrl: &apos;./app.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./app.component.css&apos;],</span><br><span class="line">  providers: [TodoDataService]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  newTodo: Todo = new Todo();</span><br><span class="line"></span><br><span class="line">  constructor(private todoDataService: TodoDataService) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo() &#123;</span><br><span class="line">    this.todoDataService.addTodo(this.newTodo);</span><br><span class="line">    this.newTodo = new Todo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleTodoComplete(todo) &#123;</span><br><span class="line">    this.todoDataService.toggleTodoComplete(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(todo) &#123;</span><br><span class="line">    this.todoDataService.deleteTodoById(todo.id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get todos() &#123;</span><br><span class="line">    return this.todoDataService.getAllTodos();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>虽然我们的AppComponent能够正常的执行，但是并不推荐所有的代码都写在一个组件里面。</p><p>向Todo应用程序添加更多的功能会使得AppComponent更加复杂，庞大，难于理解。</p><p>因此我们推荐按照功能分割成较小的组件。理想情况下，较小的组件是可配置的，这个样我们就不必在业务逻辑更改时重写它们的代码。</p><p>例如，在以后的文章中我们将会更改TodoDataService为REST API，而当我们重构TodoDataService的时候，不必更改任何小的组件。</p><p>我门来看AppComponent的template，其底层结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- header that lets us create new todo --&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- list that displays todos --&gt;</span><br><span class="line">&lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- list item that displays single todo --&gt;</span><br><span class="line">    &lt;li&gt;Todo 1&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- list item that displays single todo --&gt;</span><br><span class="line">    &lt;li&gt;Todo 2&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- footer that displays statistics --&gt;</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;</span><br></pre></td></tr></table></figure></p><p>我们将其变化为Angular组件结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- TodoListHeaderComponent that lets us create new todo --&gt;</span><br><span class="line">&lt;app-todo-list-header&gt;&lt;/app-todo-list-header&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- TodoListComponent that displays todos --&gt;</span><br><span class="line">&lt;app-todo-list&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- TodoListItemComponent that displays single todo --&gt;</span><br><span class="line">    &lt;app-todo-list-item&gt;&lt;/app-todo-list-item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- TodoListItemComponent that displays single todo --&gt;</span><br><span class="line">    &lt;app-todo-list-item&gt;&lt;/app-todo-list-item&gt;</span><br><span class="line">&lt;/app-todo-list&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- TodoListFooterComponent that displays statistics --&gt;</span><br><span class="line">&lt;app-todo-list-footer&gt;&lt;/app-todo-list-footer&gt;</span><br></pre></td></tr></table></figure></p><p>让我们看看如何利用Angular的组件驱动开发来实现这一点。</p><h1 id="创建TodoListHeaderComponent"><a href="#创建TodoListHeaderComponent" class="headerlink" title="创建TodoListHeaderComponent"></a>创建TodoListHeaderComponent</h1><hr><p>进入工程根目录，执行如下命令</p><blockquote><p>$ ng g component todo-list-header</p></blockquote><p>将会生成如下文件：</p><blockquote><p>CREATE src/app/todo-list-header/todo-list-header.component.html (35 bytes)<br>CREATE src/app/todo-list-header/todo-list-header.component.spec.ts (686 bytes)<br>CREATE src/app/todo-list-header/todo-list-header.component.ts (307 bytes)<br>CREATE src/app/todo-list-header/todo-list-header.component.css (0 bytes)</p></blockquote><p>在AppModoule将会自动加入TodoListHeaderComponent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &apos;@angular/platform-browser&apos;;</span><br><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; FormsModule &#125; from &apos;@angular/forms&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; AppRoutingModule &#125; from &apos;./app-routing.module&apos;;</span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line">import &#123; TodoListHeaderComponent &#125; from &apos;./todo-list-header/todo-list-header.component&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoListHeaderComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></p><p>在AppModoule将会自动加入TodoListHeaderComponent组件声明是为了能够在所有view模板里面使用它。Angular CLI 方便的为我们添加了该组件所以我们无需手动添加它。</p><p>如果组件没有被声明就在view模板中使用，Angular将会抛出如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: Uncaught (in promise): Error: Template parse errors:</span><br><span class="line">&apos;app-todo-list-header&apos; is not a known element:</span><br><span class="line">1. If &apos;app-todo-list-header&apos; is an Angular component, then verify that it is part of this module.</span><br><span class="line">2. If &apos;app-todo-list-header&apos; is a Web Component then add &quot;CUSTOM_ELEMENTS_SCHEMA&quot; to the &apos;@NgModule.schemas&apos; of this component to suppress this message.</span><br></pre></td></tr></table></figure></p><p>现在我们生成了所有TodoListHeaderComponent所需文件，我们接下来移动src/app/app.component.html 的<header>到 src/app/todo-list-header/todo-list-header.component.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;header class=&quot;header&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Todos&lt;/h1&gt;</span><br><span class="line">  &lt;input class=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autofocus=&quot;&quot; [(ngModel)]=&quot;newTodo.title&quot; (keyup.enter)=&quot;addTodo()&quot;&gt;</span><br><span class="line">&lt;/header&gt;</span><br></pre></td></tr></table></figure></header></p><p>添加逻辑src/app/todo-list-header/todo-list-header.component.ts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, OnInit, Output, EventEmitter &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Todo &#125; from &apos;../todo&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-todo-list-header&apos;,</span><br><span class="line">  templateUrl: &apos;./todo-list-header.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./todo-list-header.component.css&apos;]</span><br><span class="line">&#125;)</span><br><span class="line">export class TodoListHeaderComponent implements OnInit &#123;</span><br><span class="line">  newTodo: Todo = new Todo();</span><br><span class="line"></span><br><span class="line">  @Output()</span><br><span class="line">  add: EventEmitter&lt;Todo&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  addTodo() &#123;</span><br><span class="line">    this.add.emit(this.newTodo);</span><br><span class="line">    this.newTodo = new Todo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>替换注入TodoDataService保存新的todo, 我们出发一个add事件，并且传递一个新的todo参数。</p><p>在Angular 模板中以如下方式捕捉事件：</p><blockquote><input (keyup.enter)="addTodo()"></blockquote><p>这将在enter键按下的时候触发addTodo()方法。之所以能正常执行，是因为在angular framework 中 keyup.enter 被定义为一个有效的事件。</p><p>尽管如此，我们也经常 通过 EventEmitter 和 @Output() 为一个组件定义自己的事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Output, EventEmitter &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Todo &#125; from &apos;../todo&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br><span class="line">export class TodoListHeaderComponent &#123;</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  @Output()</span><br><span class="line">  add: EventEmitter&lt;Todo&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">  addTodo() &#123;</span><br><span class="line">    this.add.emit(this.newTodo);</span><br><span class="line">    this.newTodo = new Todo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们能够在模板中按照如下方式捕捉事件：</p><blockquote><p><app-todo-list-header (add)="onAddTodo($event)"></app-todo-list-header></p></blockquote><p>每当在 TodoListHeaderComponent 中调用 add.emit(value) 的时候，onAddTodo($event)事件将会被执行，参数$event将会被赋值为value。</p><p>这将解耦TodoListHeaderComponent 和 TodoDataService ，当创建一个新的to的时候，允许父组件处理想要做的事情。</p><p>修改 AppComponent 模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;todoapp&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- header is now replaced with app-todo-list-header --&gt;</span><br><span class="line">  &lt;app-todo-list-header (add)=&quot;onAddTodo($event)&quot;&gt;&lt;/app-todo-list-header&gt;</span><br><span class="line"></span><br><span class="line">  &lt;section class=&quot;main&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">      &lt;li *ngFor=&quot;let todo of todos&quot; [class.completed]=&quot;todo.complete&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">          &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; (click)=&quot;toggleTodoComplete(todo)&quot; [checked]=&quot;todo.complete&quot;&gt;</span><br><span class="line">          &lt;label&gt;&#123;&#123;todo.title&#125;&#125;&lt;/label&gt;</span><br><span class="line">          &lt;button class=&quot;destroy&quot; (click)=&quot;removeTodo(todo)&quot;&gt;&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &lt;footer class=&quot;footer&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;todo-count&quot;&gt;&lt;strong&gt;&#123;&#123;todos.length&#125;&#125;&lt;/strong&gt; &#123;&#123;todos.length == 1 ? &apos;item&apos; : &apos;items&apos;&#125;&#125; left&lt;/span&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line"></span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><p>在 AppComponent 中添加 onAddTodo()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Component&#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;Todo&#125; from &apos;./todo&apos;;</span><br><span class="line">import &#123;TodoDataService&#125; from &apos;./todo-data.service&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-root&apos;,</span><br><span class="line">  templateUrl: &apos;./app.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./app.component.css&apos;],</span><br><span class="line">  providers: [TodoDataService]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  // No longer needed, now handled by TodoListHeaderComponent</span><br><span class="line">  // newTodo: Todo = new Todo();</span><br><span class="line"></span><br><span class="line">  constructor(private todoDataService: TodoDataService) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // No longer needed, now handled by TodoListHeaderComponent</span><br><span class="line">  // addTodo() &#123;</span><br><span class="line">  //   this.todoDataService.addTodo(this.newTodo);</span><br><span class="line">  //   this.newTodo = new Todo();</span><br><span class="line">  // &#125;</span><br><span class="line"></span><br><span class="line">  // Add new method to handle event emitted by TodoListHeaderComponent</span><br><span class="line">  onAddTodo(todo: Todo) &#123;</span><br><span class="line">    this.todoDataService.addTodo(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleTodoComplete(todo: Todo) &#123;</span><br><span class="line">    this.todoDataService.toggleTodoComplete(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(todo: Todo) &#123;</span><br><span class="line">    this.todoDataService.deleteTodoById(todo.id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get todos() &#123;</span><br><span class="line">    return this.todoDataService.getAllTodos();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建TodoListComponent"><a href="#创建TodoListComponent" class="headerlink" title="创建TodoListComponent"></a>创建TodoListComponent</h1><p>首先生成 TodoListComponent:</p><blockquote><p>ng g component todo-list</p></blockquote><p>将会产生如下文件:</p><blockquote><p>create src/app/todo-list/todo-list.component.css<br>create src/app/todo-list/todo-list.component.html<br>create src/app/todo-list/todo-list.component.spec.ts<br>create src/app/todo-list/todo-list.component.ts</p></blockquote><p>并且在AppModule里面自动添加了如下声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">import &#123; TodoListComponent &#125; from &apos;./todo-list/todo-list.component&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    // ...</span><br><span class="line">    TodoListComponent</span><br><span class="line">  ],</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></p><p>打开 src/app/app.component.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;main&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">    &lt;li *ngFor=&quot;let todo of todos&quot; [class.completed]=&quot;todo.complete&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">        &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; (click)=&quot;toggleTodoComplete(todo)&quot; [checked]=&quot;todo.complete&quot;&gt;</span><br><span class="line">        &lt;label&gt;&#123;&#123;todo.title&#125;&#125;&lt;/label&gt;</span><br><span class="line">        &lt;button class=&quot;destroy&quot; (click)=&quot;removeTodo(todo)&quot;&gt;&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><p>将内容移动到  src/app/todo-list/todo-list.component.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;main&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">    &lt;li *ngFor=&quot;let todo of todos&quot; [class.completed]=&quot;todo.complete&quot;&gt;</span><br><span class="line">      &lt;app-todo-list-item</span><br><span class="line">        [todo]=&quot;todo&quot;</span><br><span class="line">        (toggleComplete)=&quot;onToggleTodoComplete($event)&quot;</span><br><span class="line">        (remove)=&quot;onRemoveTodo($event)&quot;&gt;&lt;/app-todo-list-item&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><p>*TodoListItemComponent 将在后续做成，通过 todo 属性 传递 todo 项目，并且处理在TodoListItemComponent中触发的事件。</p><p>打开 src/app/todo-list/todo-list.component.ts 添加如下处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, EventEmitter, Input, Output &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Todo &#125; from &apos;../todo&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-todo-list&apos;,</span><br><span class="line">  templateUrl: &apos;./todo-list.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./todo-list.component.css&apos;]</span><br><span class="line">&#125;)</span><br><span class="line">export class TodoListComponent &#123;</span><br><span class="line"></span><br><span class="line">  @Input()</span><br><span class="line">  todos: Todo[];</span><br><span class="line"></span><br><span class="line">  @Output()</span><br><span class="line">  remove: EventEmitter&lt;Todo&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">  @Output()</span><br><span class="line">  toggleComplete: EventEmitter&lt;Todo&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onToggleTodoComplete(todo: Todo) &#123;</span><br><span class="line">    this.toggleComplete.emit(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onRemoveTodo(todo: Todo) &#123;</span><br><span class="line">    this.remove.emit(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们定义了 onToggleTodoComplete(todo) 和 onRemoveTodo(todo) 来处理view的事件<br>(toggleComplete)=”onToggleTodoComplete($event)” and (remove)=”onRemoveTodo($event)”</p><p>注意我们在view中使用 $event 作为参数名字，在方法定义中使用todo作为参数名字。<br>为了能够在Angular模板中访问到事件的负载(emitted value)，我们必须使用 $event作为参数名。</p><p>事件在 TodoListItemComponent 产生，经由 TodoListComponent 最终在 AppComponent 中处理<br>修改 AppComponent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export class AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  // rename from toggleTodoComplete</span><br><span class="line">  onToggleTodoComplete(todo: Todo) &#123;</span><br><span class="line">    this.todoDataService.toggleTodoComplete(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // rename from removeTodo</span><br><span class="line">  onRemoveTodo(todo: Todo) &#123;</span><br><span class="line">    this.todoDataService.deleteTodoById(todo.id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="创建TodoListItemComponent"><a href="#创建TodoListItemComponent" class="headerlink" title="创建TodoListItemComponent"></a>创建TodoListItemComponent</h1><p>利用Angular CLI 生成 TodoListItemComponent</p><blockquote><p>ng g component todo-list-item</p></blockquote><p>将生成如下文件：</p><blockquote><p>create src/app/todo-list-item/todo-list-item.component.css<br>create src/app/todo-list-item/todo-list-item.component.html<br>create src/app/todo-list-item/todo-list-item.component.spec.ts<br>create src/app/todo-list-item/todo-list-item.component.ts</p></blockquote><p>并且在AppModule里面自动添加了如下声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">import &#123; TodoListItemComponent &#125; from &apos;./todo-list-item/todo-list-item.component&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    // ...</span><br><span class="line">    TodoListItemComponent</span><br><span class="line">  ],</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;</span><br></pre></td></tr></table></figure></p><p>移动原view中的\&lt;li> 到 src/app/todo-list-item.component.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;view&quot;&gt;</span><br><span class="line">  &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; (click)=&quot;toggleTodoComplete(todo)&quot; [checked]=&quot;todo.complete&quot;&gt;</span><br><span class="line">  &lt;label&gt;&#123;&#123;todo.title&#125;&#125;&lt;/label&gt;</span><br><span class="line">  &lt;button class=&quot;destroy&quot; (click)=&quot;removeTodo(todo)&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>src/app/todo-list-item/todo-list-item.component.ts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Input, Output, EventEmitter &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Todo &#125; from &apos;../todo&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-todo-list-item&apos;,</span><br><span class="line">  templateUrl: &apos;./todo-list-item.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./todo-list-item.component.css&apos;]</span><br><span class="line">&#125;)</span><br><span class="line">export class TodoListItemComponent &#123;</span><br><span class="line"></span><br><span class="line">  @Input() todo: Todo;</span><br><span class="line"></span><br><span class="line">  @Output()</span><br><span class="line">  remove: EventEmitter&lt;Todo&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">  @Output()</span><br><span class="line">  toggleComplete: EventEmitter&lt;Todo&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleTodoComplete(todo: Todo) &#123;</span><br><span class="line">    this.toggleComplete.emit(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(todo: Todo) &#123;</span><br><span class="line">    this.remove.emit(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更新AppComponent模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;todoapp&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;app-todo-list-header (add)=&quot;onAddTodo($event)&quot;&gt;&lt;/app-todo-list-header&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- section is now replaced with app-todo-list --&gt;</span><br><span class="line">  &lt;app-todo-list [todos]=&quot;todos&quot; (toggleComplete)=&quot;onToggleTodoComplete($event)&quot;</span><br><span class="line">                 (remove)=&quot;onRemoveTodo($event)&quot;&gt;&lt;/app-todo-list&gt;</span><br><span class="line"></span><br><span class="line">  &lt;footer class=&quot;footer&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;todo-count&quot;&gt;&lt;strong&gt;&#123;&#123;todos.length&#125;&#125;&lt;/strong&gt; &#123;&#123;todos.length == 1 ? &apos;item&apos; : &apos;items&apos;&#125;&#125; left&lt;/span&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line"></span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建TodoListFooterComponent"><a href="#创建TodoListFooterComponent" class="headerlink" title="创建TodoListFooterComponent"></a>创建TodoListFooterComponent</h1><p>生成TodoListFooterComponent</p><blockquote><p>ng g component todo-list-footer</p></blockquote><p>移动 \&lt;footer> 元素 src/app/app.component.html 到 src/app/todo-list-footer/todo-list-footer.component.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;footer&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;todo-count&quot;&gt;&lt;strong&gt;&#123;&#123;todos.length&#125;&#125;&lt;/strong&gt; &#123;&#123;todos.length == 1 ? &apos;item&apos; : &apos;items&apos;&#125;&#125; left&lt;/span&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure></p><p>修改 src/app/todo-list-footer/todo-list-footer.component.ts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Input &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Todo &#125; from &apos;../todo&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;app-todo-list-footer&apos;,</span><br><span class="line">  templateUrl: &apos;./todo-list-footer.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./todo-list-footer.component.css&apos;]</span><br><span class="line">&#125;)</span><br><span class="line">export class TodoListFooterComponent &#123;</span><br><span class="line"></span><br><span class="line">  @Input()</span><br><span class="line">  todos: Todo[];</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更新 AppComponent 模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;todoapp&quot;&gt;</span><br><span class="line">  &lt;app-todo-list-header (add)=&quot;onAddTodo($event)&quot;&gt;&lt;/app-todo-list-header&gt;</span><br><span class="line">  &lt;app-todo-list [todos]=&quot;todos&quot; (toggleComplete)=&quot;onToggleTodoComplete($event)&quot;</span><br><span class="line">                 (remove)=&quot;onRemoveTodo($event)&quot;&gt;&lt;/app-todo-list&gt;</span><br><span class="line">  &lt;app-todo-list-footer [todos]=&quot;todos&quot;&gt;&lt;/app-todo-list-footer&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><p>这样我们就成功的重构了AppComponent，由下列组件构成，<br>TodoListHeaderComponent<br>TodoListComponent -&gt; TodoListItemComponent<br>TodoListFooterComponent</p><p>以后的章节，我们会继续重构 TodoService 为 REST API。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些经典的句子，句句精辟</title>
      <link href="/2019/04/18/classic-quotations/"/>
      <url>/2019/04/18/classic-quotations/</url>
      
        <content type="html"><![CDATA[<p>1 </p><blockquote><p>多数人在25岁时就死了，一直到75岁才埋葬。</p></blockquote><p>——富兰克林</p><p>2</p><blockquote><p>我感到难过，不是因为你欺骗了我，而是因为我再也不能相信你了。</p></blockquote><p>——尼采</p><p>3</p><blockquote><p>曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候。</p></blockquote><p>——东野圭吾《白夜行》</p><a id="more"></a><p>4</p><blockquote><p>我们很少信任比我们好的人，宁肯避免与他们来往。相反，我们常对与我们相似、和我们有着共同弱点的人吐露心迹。我们并不希望改掉弱点，只希望受到怜悯与鼓励。</p></blockquote><p>——加缪《局外人》</p><p>5</p><blockquote><p>一个不成熟的人的标志是他愿意为了某个理由轰轰烈烈地死去，而一个成熟的人的标志是他愿意为了某个谦恭的理由活着。</p></blockquote><p>——塞林格《麦田里的守望者》</p><p>6</p><blockquote><p>人生不像做饭，不能等万事俱备了才下锅。</p></blockquote><p>——《饮食男女》</p><p>7</p><blockquote><p>小时候真傻，居然盼着长大。 </p></blockquote><p>—— 丰子恺 </p><p>8</p><blockquote><p>哦，年轻真好，还能感受爱的伤害啊。</p></blockquote><p>——电影《哈利波特与混血王子》</p><p>9</p><blockquote><p>旧游无处不堪寻。无寻处，惟有少年心。</p></blockquote><p>——章良能《小重山·柳暗花明春事深》</p><p>10</p><blockquote><p>七岁那年我抓住了一只蝉，便以为抓住了整个夏天。</p></blockquote><p>——五月天《如烟》</p><p>11</p><blockquote><p>和你们这些少爷不同，我们光是活着就竭尽全力了。</p></blockquote><p>——空知英秋《银魂》</p><p>12</p><blockquote><p>你必须只有内心丰富，才能摆脱这些生活表面的相似。</p></blockquote><p>——王朔《致女儿书》 </p><p>13</p><blockquote><p>重要的不是治愈，而是带着病痛活下去。</p></blockquote><p>——加缪</p><p>14</p><blockquote><p>万物皆有裂痕，那是光照进来的地方。</p></blockquote><p>——莱昂纳德·科恩《颂歌》</p><p>15</p><blockquote><p>我走得很慢，但我从不后退。</p></blockquote><p>——林肯</p><p>16</p><blockquote><p>如果我不曾见到太阳，我本可以忍受黑暗。可如今，太阳把我的寂寞照的更荒凉。 </p></blockquote><p>——艾米莉·狄金森</p><p>17</p><blockquote><p>爱永远存在，变换的只是男人。</p></blockquote><p>——保罗·柯艾略《我坐在琵卓河畔，哭泣》</p><p>18</p><blockquote><p>一个始终不被人善待的人，最能识得善良，也最能珍视善良。</p></blockquote><p>——严歌苓《芳华》</p><p>19</p><blockquote><p>我们用两年时间学会说话，却要用一辈子学会闭嘴。</p></blockquote><p>——海明威 </p><p>20</p><blockquote><p>有些人觉得爱就是性，是婚姻，是清晨六点的吻和一堆孩子，或许爱就是这样，莱斯特小姐，但你知道我怎么想吗？我觉得爱是想要触碰却又收回手。</p></blockquote><p>——塞林格《破碎故事之心》</p><p>21</p><blockquote><p>她那时候还太年轻，不知道所有命运赠送的礼物，早已在暗中标好了价格。</p></blockquote><p>——斯蒂芬·茨威格《断头皇后》</p><p>22</p><blockquote><p>如果你想要与某人共度余生，那么你就会希望余生尽早开始。</p></blockquote><p>——《当哈利遇到莎莉》</p><p>23</p><blockquote><p>如果一个人想要做一件真正忠于自己内心的事情，那么往往只能一个人独自去做。</p></blockquote><p>——理查德·耶茨《革命之路》</p><p>24</p><blockquote><p>海鸥是上帝的游泳裤。——海子25所有的大人曾经都是小孩，虽然，只有少数人记得。</p></blockquote><p>——《小王子》</p><p>26</p><blockquote><p>在隆冬，我终于知道，我身上有一个不可战胜的夏天。</p></blockquote><p>——阿尔贝·加缪《夏天集》</p><p>27</p><blockquote><p>做你自己吧，因为别人已经有别人在做了。</p></blockquote><p>——奥斯卡·王尔德</p><p>28</p><blockquote><p>欲买桂花同载酒，终不似，少年游</p></blockquote><p>——刘过《唐多令·芦叶满汀洲》</p><p>29</p><blockquote><p>草在结它的种子风在摇它的叶子我们站着，不说话就十分美好</p></blockquote><p>——顾城</p><p>30</p><blockquote><p>如果我会发光，就不必害怕黑暗。</p></blockquote><p>——王小波</p><p>31</p><blockquote><p>认识的人越多，我越喜欢狗。</p></blockquote><p>——罗兰夫人</p><p>32</p><blockquote><p>日子是过以后，不是过以前。</p></blockquote><p>——刘震云</p><p>33</p><blockquote><p>他们兴高采烈地，过着一成不变的生活。</p></blockquote><p>——奈保尔</p><p>34</p><blockquote><p>太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率。所谓的坦率，其实就是暴力。</p></blockquote><p>——太宰治《候鸟》</p><p>35</p><blockquote><p>打翻了牛奶，哭也没用，因为宇宙间的一切力量都在处心积虑要把牛奶打翻。</p></blockquote><p>——毛姆</p><p>36</p><blockquote><p>决定我们成为什么样人的，不是我们的能力，而是我们的选择。</p></blockquote><p>————邓布利多《哈利波特》（作者罗琳）</p><p>37</p><blockquote><p>世界上只有一种英雄主义,就是看清生活的真相之后依然热爱生活。</p></blockquote><p>——罗曼·罗兰 《米开朗琪罗》</p><p>38</p><blockquote><p>为了使灵魂宁静，一个人每天要做两件他不喜欢的事。</p></blockquote><p>——毛姆</p><p>39</p><blockquote><p>心里有很多苦的人，只要有一丝甜就能填满。</p></blockquote><p>——马东</p><p>40</p><blockquote><p>不要因为走得太远，而忘记为什么出发。</p></blockquote><p>——卡里·纪伯伦</p><p>41</p><blockquote><p>请允许我成为你的夏季</p></blockquote><p>——狄金森</p><p>42</p><blockquote><p>你可以拥有一切，但不能同时。</p></blockquote><p>——玛丽莲·梦露</p><p>43</p><blockquote><p>长大是人必经的溃烂。</p></blockquote><p>——塞林格</p><p>44</p><blockquote><p>爱所有人，信任少数人，不负任何人。</p></blockquote><p>——莎士比亚</p><p>45</p><blockquote><p>张牙舞爪的人，往往是脆弱的。因为真正强大的人，是自信的，自信就会温和，温和就会坚定。</p></blockquote><p>——当年明月《明朝那些事儿》</p><p>46</p><blockquote><p>凡是有鸟歌唱的地方，也都有毒蛇嘶嘶地叫。</p></blockquote><p>——托马斯·哈代《德伯家的苔丝》</p><p>47</p><blockquote><p>在我少年时代，我的感情并不像标有刻度的咳嗽糖浆瓶子那样易于掌握流量，常常对微不足道的小事反应过分，要么无动于衷，要么摧肝裂胆，其缝隙间不容发。这也类同于猛兽，只有关在笼子里是安全的可供观赏，一旦放出，顷刻便对一切生命产生威胁。</p></blockquote><p>——王朔《动物凶猛》</p><p>48</p><blockquote><p>生命中真正重要的不是你遭遇了什么，而是你记住了哪些事，又是如何铭记的。</p></blockquote><p>——马尔克斯《百年孤独》</p><p>49</p><blockquote><p>命运啊，说是注定，不如说是你忘了是在何时做了选择</p></blockquote><p>——《塔希里亚故事集》</p><p>50</p><blockquote><p>不想太过悲惨的话，最保险的方法就是不要期望能很开心。</p></blockquote><p>——叔本华</p><p>51</p><blockquote><p>没有必要把你懂的都说出来。那很不淑女——再说，人们不喜欢他们身边有人比他们懂得更多。那会让他们很恼火。你说的再正确，也改变不了这些人。除非他们自己想学，否则一点办法也没有。你要么闭上嘴巴，要么就使用他们的语言。</p></blockquote><p>——《杀死一只知更鸟》</p><p>52</p><blockquote><p>我花了一辈子就学会了小心，女人和小孩能够粗心大意，但是男人不行。</p></blockquote><p>——教父</p><p>53</p><blockquote><p>玛蒂尔达：是不是人生总是如此艰难，还是只有童年如此？里昂：总是如此。</p></blockquote><p>——这个杀手不太冷</p><p>54</p><blockquote><p>楼下一个男人病得要死，那间壁的一家唱着留声机；对面是弄孩子。楼上有两人狂笑；还有打牌声。河中的船上有女人哭着她死去的母亲。人类的悲欢并不相通，我只觉得他们吵闹。 </p></blockquote><p>——鲁迅</p><p>55</p><blockquote><p>忠厚老实人的恶毒，像饭里的砂砾或者出骨鱼片里未净的刺，会给人一种不期待的伤痛。</p></blockquote><p>——钱钟书《围城》</p><p>56</p><blockquote><p>对待生命，你不妨大胆一点，因为我们始终要失去它。</p></blockquote><p>——尼采</p><p>57</p><blockquote><p>人的一切痛苦，本质上都是对自己的无能的愤怒。</p></blockquote><p>——王小波</p><p>58</p><blockquote><p>我只担心一件事，我怕我配不上自己所受的苦难。</p></blockquote><p>——陀思妥耶夫斯基</p><p>59</p><blockquote><p>愚蠢的人饱受无聊之苦。</p></blockquote><p>——塞尼加</p><p>60</p><blockquote><p>我要做远方的忠诚的儿子和物质的短暂情人</p></blockquote><p>——海子</p><p>61</p><blockquote><p>真正的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。</p></blockquote><p>——鲁迅</p><p>62</p><blockquote><p>每逢你想要批评任何人的时候，要记住，这个世界上并非所有的人，都有你拥有的那些优越条件。</p></blockquote><p>——《了不起的盖茨比》</p><p>63</p><blockquote><p>我不怕黑，可我怕躲在黑暗中的人。</p></blockquote><p>——尼尔·盖曼 《美国众神》</p><p>64</p><blockquote><p>哪个更痛苦，努力还是后悔？</p></blockquote><p>——凯尔特人队训</p><p>65</p><blockquote><p>愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者的话。</p></blockquote><p>——鲁迅</p><p>66</p><blockquote><p>我所有的自负都来自我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是怀疑。我假装无情，其实是痛恨自己的深情。我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。</p></blockquote><p>——马良《坦白书》</p><p>67</p><blockquote><p>他人即地狱</p></blockquote><p>——萨特</p><p>68</p><blockquote><p>我要求你读书用功，不是因为我要你跟别人比成就，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。</p></blockquote><p>——龙应台《亲爱的安德烈》</p><p>69</p><blockquote><p>一个人只拥有此生此世是不够的，他还应该拥有诗意的世界。</p></blockquote><p>——王小波《万寿寺》</p><p>70</p><blockquote><p>你不能永远总是对过去也许会发生的事耿耿于怀。</p></blockquote><p>——石黑一雄</p><p>71</p><blockquote><p>只有一件事会使人疲劳——摇摆不定和优柔寡断，而每做一件事，都会使人身心解放，即使把事情办坏了，也比什么都不做强。</p></blockquote><p>——茨威格</p><p>72</p><blockquote><p>车和车总是撞，人和人总是让。</p></blockquote><p>——《推拿》</p><p>73</p><blockquote><p>如果打算爱一个人，你要想清楚，是否愿意为了她，放弃如上帝般自由的心，从此心甘情愿有了羁绊。</p></blockquote><p>——菲茨杰拉德《了不起的盖茨比》</p><p>74</p><blockquote><p>每一个不曾起舞的日子，都是对生命的辜负。</p></blockquote><p>——尼采</p><p>75</p><blockquote><p>年长者最大的修养，就是控制住批评年轻人的欲望。</p></blockquote><p>——毛姆</p><p>76</p><blockquote><p>在爱情的事上如果你考虑起自尊心来，那只能有一个原因：实际上你还是最爱自己。</p></blockquote><p>——毛姆 《月亮与六便士》</p><p>77</p><blockquote><p>生为冰山，就该淡淡地爱海流、爱风，并且在偶然接触时，全心全意地爱另一块冰山。</p></blockquote><p>——《似水柔情》</p><p>78</p><blockquote><p>你看！你看到那边的麦田没有？我不吃面包，麦子对我来说，一点用都没有。我对麦田无动于衷。而这，真让人扫兴。但是，你有着金黄色的头发。那么，一旦你驯服了我，这就会十分美妙。麦子是金黄色的，它就会使我想起你。而且，我甚至会喜欢那风吹麦浪的声音。</p></blockquote><p>——《小王子》</p><p>79</p><blockquote><p>对未来的真正慷慨，是把一切献给现在。</p></blockquote><p>——加缪《反抗者》</p><p>80</p><blockquote><p>死亡，就是你加上这个世界，再减去你。</p></blockquote><p>——卡尔维诺</p><p>81</p><blockquote><p>你太习惯这个世界了，才会对任何事情都不感到惊奇。</p></blockquote><p>——贾德《苏菲的世界》</p><p>82</p><blockquote><p>这世上有成千上万种爱，但从来没有一种爱可以重来。</p></blockquote><p>——菲茨杰拉德</p><p>83</p><blockquote><p>自由不是让你想做什么就做什么，自由是教你不想做什么，就可以不做什么。</p></blockquote><p>——康德</p><p>84</p><blockquote><p>一个人知道自己为什么而活，就可以忍受任何一种生活。 </p></blockquote><p>——尼采</p><p>85</p><blockquote><p>醉过才知酒浓，爱过才知情重。你不能做我的诗，正如我不能做你的梦。 </p></blockquote><p>——胡适</p><p>86</p><blockquote><p>人在无端微笑时，不是百无聊赖，就是痛苦难当。 </p></blockquote><p>——王小波</p><p>87</p><blockquote><p>我们活过的那刹那，前后皆是暗夜。</p></blockquote><p>——费尔南多·佩索阿</p><p>88</p><blockquote><p>人生就是，大闹一场，悄然离去。 </p></blockquote><p>——金庸</p><p>89</p><blockquote><p>在黄昏靠岸，码头格外悲伤。 </p></blockquote><p>——聂鲁达</p><p>90</p><blockquote><p>我需要，最狂的风和最静的海。</p></blockquote><p>——顾城</p><p>91</p><blockquote><p>孤独意味着自由和发现。沙漠孤岛比一座城市更激动人心。</p></blockquote><p>——纳博科夫</p><p>92</p><blockquote><p>若能避开猛烈的狂喜，自然不会有悲痛来袭。</p></blockquote><p>——《人间失格》</p><p>93</p><blockquote><p>虽然辛苦，我还是会选择那种滚烫的人生。</p></blockquote><p>——北野武</p><p>94</p><blockquote><p>获得爱的能力的主要条件是克服自恋。</p></blockquote><p>——奥维德《爱的艺术》</p><p>95</p><blockquote><p>在这世上，有些东西是石头无法刻成的，在我们心里，有一块地方是无法锁住的，那块地方叫做希望。</p></blockquote><p>——《肖申克的救赎》</p><p>96</p><blockquote><p>天下熙熙，皆为利来；天下攘攘，皆为利往。</p></blockquote><p>——司马迁《史记》</p><p>97</p><blockquote><p>哪里有人会喜欢孤独，不过是不喜欢失望。 </p></blockquote><p>——村上春树</p><p>98</p><blockquote><p>夏天的到来，比春天更威胁我的孤独。</p></blockquote><p>——三岛由纪夫《假面告白》</p><p>99</p><blockquote><p>雪崩时没有一片雪花会有负罪感。</p></blockquote><p>——伏尔泰</p>]]></content>
      
      
      <categories>
          
          <category> 名言名句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典 </tag>
            
            <tag> 名言名句 </tag>
            
            <tag> 唯美 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）使用 Angular CLI 创建 Todo App</title>
      <link href="/2019/04/16/learn-angular-part2/"/>
      <url>/2019/04/16/learn-angular-part2/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/learn-angular-part2-1.png?imageView2/2/w/1000"><p>在本篇文章中，我们将学会：</p><ul><li>使用 AngularCLI 初始化 Todo 应用程序</li><li>创建代表个人待办事项的 Todo 类</li><li>创建 TodoDataService 服务，用来创建，更新和删除待办事项</li><li>使用 AppComponent 组件显示用户界面</li></ul><a id="more"></a><p>我们的应用程序架构会像这样：<br><img src="http://static.ohtudou.cc/static/images/learn-angular-part2-2.png"><br>本文将讨论标有红色边框的项目，以外的部分会在后续文章中说明。</p><h1 id="使用-AngularCLI-初始化-Todo-应用程序"><a href="#使用-AngularCLI-初始化-Todo-应用程序" class="headerlink" title="使用 AngularCLI 初始化 Todo 应用程序"></a>使用 AngularCLI 初始化 Todo 应用程序</h1><hr><p>安装 Angular CLI，在命令行中运行以下命令：</p><blockquote><p>$ npm install -g @angular/cli</p></blockquote><p>这将会在系统全局安装 ng 命令</p><p>验证是否成功安装 Angular CLI，可在命令行运行：</p><blockquote><p>$ ng version</p></blockquote><p>在我本机运行上述命令，则输出以下结果：</p><blockquote><p>Angular CLI: 7.3.7<br>Node: 10.15.0<br>OS: win32 x64<br>Angular:<br>…</p></blockquote><p>那么你已经成功安装Angular CLI了，现在你可以用它来创建Todo应用：</p><blockquote><p>$ ng new todo-app</p></blockquote><p>新的 todo-app 目录被创建，应用程序的目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">todo-app</span><br><span class="line">│  angular.json</span><br><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  tsconfig.json</span><br><span class="line">│  tslint.json</span><br><span class="line">│  </span><br><span class="line">├─e2e</span><br><span class="line">│  │  protractor.conf.js</span><br><span class="line">│  │  tsconfig.e2e.json</span><br><span class="line">│  └─src</span><br><span class="line">│          app.e2e-spec.ts</span><br><span class="line">│          app.po.ts              </span><br><span class="line">└─src</span><br><span class="line">    │  browserslist</span><br><span class="line">    │  favicon.ico</span><br><span class="line">    │  index.html</span><br><span class="line">    │  karma.conf.js</span><br><span class="line">    │  main.ts</span><br><span class="line">    │  polyfills.ts</span><br><span class="line">    │  styles.css</span><br><span class="line">    │  test.ts</span><br><span class="line">    │  tsconfig.app.json</span><br><span class="line">    │  tsconfig.spec.json</span><br><span class="line">    │  tslint.json</span><br><span class="line">    │  </span><br><span class="line">    ├─app</span><br><span class="line">    │      app-routing.module.ts</span><br><span class="line">    │      app.component.css</span><br><span class="line">    │      app.component.html</span><br><span class="line">    │      app.component.spec.ts</span><br><span class="line">    │      app.component.ts</span><br><span class="line">    │      app.module.ts</span><br><span class="line">    │      </span><br><span class="line">    ├─assets</span><br><span class="line">    │      </span><br><span class="line">    └─environments</span><br><span class="line">            environment.prod.ts</span><br><span class="line">            environment.ts</span><br></pre></td></tr></table></figure></p><p>你可以进入新生成的目录：</p><blockquote><p>$ cd todo-app</p></blockquote><p>启动Angular CLI开发服务器：</p><blockquote><p>$ ng serve</p></blockquote><p>这将会启动本地开发服务器，可以在浏览器中输入以下URL访问：</p><blockquote><p><a href="http://localhost:4200/" target="_blank" rel="noopener">http://localhost:4200/</a></p></blockquote><p>Angular CLI开发服务器支持LiveReload，修改的代码将会自动reload，反映到画面上。</p><p>这真是太方便了！</p><h1 id="创建Todo类"><a href="#创建Todo类" class="headerlink" title="创建Todo类"></a>创建Todo类</h1><hr><p>让我们使用Angular CLI创建Todo类：</p><blockquote><p>ng g class Todo</p></blockquote><p>这将会创建以下文件：</p><blockquote><p>src/app/todo.spec.ts<br>src/app/todo.ts</p></blockquote><p>打开 src/app/todo.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export class Todo &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export class Todo &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  title: string = &apos;&apos;;</span><br><span class="line">  complete: boolean = false;</span><br><span class="line"></span><br><span class="line">  constructor(values: Object = &#123;&#125;) &#123;</span><br><span class="line">    Object.assign(this, values);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个类定义里面，我们为每个Todo实例声名三个属性</p><ul><li>id: number, 代办项目的唯一ID</li><li>title: string, 代办项目的标题</li><li>complete: boolean, 该代办项目是否完了</li></ul><p>我们还定义了一个构造函数，可以很容易的像以下这样得到Todo的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let todo = new Todo(&#123;</span><br><span class="line">  title: &apos;Read SitePoint article&apos;,</span><br><span class="line">  complete: false</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>再来看一下测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Todo &#125; from &apos;./todo&apos;;</span><br><span class="line"></span><br><span class="line">describe(&apos;Todo&apos;, () =&gt; &#123;</span><br><span class="line">  it(&apos;should create an instance&apos;, () =&gt; &#123;</span><br><span class="line">    expect(new Todo()).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>让我们添加一些测试用例来验证构造函数是否正常工作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Todo&#125; from &apos;./todo&apos;;</span><br><span class="line"></span><br><span class="line">describe(&apos;Todo&apos;, () =&gt; &#123;</span><br><span class="line">  it(&apos;should create an instance&apos;, () =&gt; &#123;</span><br><span class="line">    expect(new Todo()).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(&apos;should accept values in the constructor&apos;, () =&gt; &#123;</span><br><span class="line">    let todo = new Todo(&#123;</span><br><span class="line">      title: &apos;hello&apos;,</span><br><span class="line">      complete: true</span><br><span class="line">    &#125;);</span><br><span class="line">    expect(todo.title).toEqual(&apos;hello&apos;);</span><br><span class="line">    expect(todo.complete).toEqual(true);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行测试：</p><blockquote><p>$ ng test</p></blockquote><p>这将会调用 Karma test runner 运行所有单元测试。结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 11% building 13/13 modules 0 active19 04 2019 10:57:09.848:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 10:57:09.855:INFO [karma-server]: Karma v4.0.1 server started at http://0.0.0.0:9876/</span><br><span class="line">19 04 2019 10:57:09.856:INFO [launcher]: Launching browsers Chrome with concurrency unlimited</span><br><span class="line">19 04 2019 10:57:09.862:INFO [launcher]: Starting browser Chrome                                                                                                                        19 04 2019 10:57:14.044:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 10:57:14.097:INFO [Chrome 73.0.3683 (Windows 10.0.0)]: Connected on socket 417UpstoOGPuv9eNAAAA with id 87200179</span><br><span class="line">Chrome 73.0.3683 (Windows 10.0.0): Executed 5 of 5 SUCCESS (0.117 secs / 0.163 secs)</span><br><span class="line">TOTAL: 5 SUCCESS</span><br><span class="line">TOTAL: 5 SUCCESS</span><br></pre></td></tr></table></figure></p><h1 id="创建-TodoDataService-服务"><a href="#创建-TodoDataService-服务" class="headerlink" title="创建 TodoDataService 服务"></a>创建 TodoDataService 服务</h1><hr><p>TodoDataService 用来管理代办项目。<br>以后我们将会学习如何使用REST API，现在我们把数据直接定义在内存中。</p><p>创建服务：</p><blockquote><p>ng g service TodoData</p></blockquote><p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE src/app/todo-data.service.spec.ts (344 bytes)</span><br><span class="line">CREATE src/app/todo-data.service.ts (137 bytes)</span><br></pre></td></tr></table></figure></p><p>TodoDataService 的代码如下<br>src/app/todo-data.service.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &apos;root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class TodoDataService &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单元测试用的代码如下<br>src/app/todo-data.service.spec.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; TestBed &#125; from &apos;@angular/core/testing&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; TodoDataService &#125; from &apos;./todo-data.service&apos;;</span><br><span class="line"></span><br><span class="line">describe(&apos;TodoDataService&apos;, () =&gt; &#123;</span><br><span class="line">  beforeEach(() =&gt; TestBed.configureTestingModule(&#123;&#125;));</span><br><span class="line"></span><br><span class="line">  it(&apos;should be created&apos;, () =&gt; &#123;</span><br><span class="line">    const service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">    expect(service).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>打开src/app/todo-data.service.ts，修改TodoDataService如下：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; <span class="keyword">from</span> <span class="string">'./todo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoDataService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Placeholder for last id so we can simulate</span></span><br><span class="line">  <span class="comment">// automatic incrementing of ids</span></span><br><span class="line">  lastId: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Placeholder for todos</span></span><br><span class="line">  todos: Todo[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Simulate POST /todos</span></span><br><span class="line">  addTodo(todo: Todo): TodoDataService &#123;</span><br><span class="line">    <span class="keyword">if</span> (!todo.id) &#123;</span><br><span class="line">      todo.id = ++<span class="keyword">this</span>.lastId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.todos.push(todo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Simulate DELETE /todos/:id</span></span><br><span class="line">  deleteTodoById(id: <span class="built_in">number</span>): TodoDataService &#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id !== id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Simulate PUT /todos/:id</span></span><br><span class="line">  updateTodoById(id: <span class="built_in">number</span>, values: <span class="built_in">Object</span> = &#123;&#125;): Todo &#123;</span><br><span class="line">    <span class="keyword">let</span> todo = <span class="keyword">this</span>.getTodoById(id);</span><br><span class="line">    <span class="keyword">if</span> (!todo) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.assign(todo, values);</span><br><span class="line">    <span class="keyword">return</span> todo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Simulate GET /todos</span></span><br><span class="line">  getAllTodos(): Todo[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.todos;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Simulate GET /todos/:id</span></span><br><span class="line">  getTodoById(id: <span class="built_in">number</span>): Todo &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id).pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Toggle todo complete</span></span><br><span class="line">  toggleTodoComplete(todo: Todo)&#123;</span><br><span class="line">    <span class="keyword">let</span> updatedTodo = <span class="keyword">this</span>.updateTodoById(todo.id, &#123;</span><br><span class="line">      complete: !todo.complete</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> updatedTodo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开src/app/todo-data.service.spec.ts，添加单元测试用例：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TestBed &#125; <span class="keyword">from</span> <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; <span class="keyword">from</span> <span class="string">'./todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TodoDataService &#125; <span class="keyword">from</span> <span class="string">'./todo-data.service'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'TodoDataService'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> TestBed.configureTestingModule(&#123;&#125;));</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should be created'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">    expect(service).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'#getAllTodos()'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">'should return an empty array by default'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      expect(service.getAllTodos()).toEqual([]);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">'should return all todos'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      <span class="keyword">let</span> todo1 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 1'</span>, complete: <span class="literal">false</span>&#125;);</span><br><span class="line">      <span class="keyword">let</span> todo2 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 2'</span>, complete: <span class="literal">true</span>&#125;);</span><br><span class="line">      service.addTodo(todo1);</span><br><span class="line">      service.addTodo(todo2);</span><br><span class="line">      expect(service.getAllTodos()).toEqual([todo1, todo2]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'#save(todo)'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">'should automatically assign an incrementing id'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      <span class="keyword">let</span> todo1 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 1'</span>, complete: <span class="literal">false</span>&#125;);</span><br><span class="line">      <span class="keyword">let</span> todo2 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 2'</span>, complete: <span class="literal">true</span>&#125;);</span><br><span class="line">      service.addTodo(todo1);</span><br><span class="line">      service.addTodo(todo2);</span><br><span class="line">      expect(service.getTodoById(<span class="number">1</span>)).toEqual(todo1);</span><br><span class="line">      expect(service.getTodoById(<span class="number">2</span>)).toEqual(todo2);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'#deleteTodoById(id)'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">'should remove todo with the corresponding id'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      <span class="keyword">let</span> todo1 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 1'</span>, complete: <span class="literal">false</span>&#125;);</span><br><span class="line">      <span class="keyword">let</span> todo2 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 2'</span>, complete: <span class="literal">true</span>&#125;);</span><br><span class="line">      service.addTodo(todo1);</span><br><span class="line">      service.addTodo(todo2);</span><br><span class="line">      expect(service.getAllTodos()).toEqual([todo1, todo2]);</span><br><span class="line">      service.deleteTodoById(<span class="number">1</span>);</span><br><span class="line">      expect(service.getAllTodos()).toEqual([todo2]);</span><br><span class="line">      service.deleteTodoById(<span class="number">2</span>);</span><br><span class="line">      expect(service.getAllTodos()).toEqual([]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should not removing anything if todo with corresponding id is not found'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      <span class="keyword">let</span> todo1 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 1'</span>, complete: <span class="literal">false</span>&#125;);</span><br><span class="line">      <span class="keyword">let</span> todo2 = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 2'</span>, complete: <span class="literal">true</span>&#125;);</span><br><span class="line">      service.addTodo(todo1);</span><br><span class="line">      service.addTodo(todo2);</span><br><span class="line">      expect(service.getAllTodos()).toEqual([todo1, todo2]);</span><br><span class="line">      service.deleteTodoById(<span class="number">3</span>);</span><br><span class="line">      expect(service.getAllTodos()).toEqual([todo1, todo2]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'#updateTodoById(id, values)'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">'should return todo with the corresponding id and updated data'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      <span class="keyword">let</span> todo = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 1'</span>, complete: <span class="literal">false</span>&#125;);</span><br><span class="line">      service.addTodo(todo);</span><br><span class="line">      <span class="keyword">let</span> updatedTodo = service.updateTodoById(<span class="number">1</span>, &#123;</span><br><span class="line">        title: <span class="string">'new title'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      expect(updatedTodo.title).toEqual(<span class="string">'new title'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return null if todo is not found'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      <span class="keyword">let</span> todo = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 1'</span>, complete: <span class="literal">false</span>&#125;);</span><br><span class="line">      service.addTodo(todo);</span><br><span class="line">      <span class="keyword">let</span> updatedTodo = service.updateTodoById(<span class="number">2</span>, &#123;</span><br><span class="line">        title: <span class="string">'new title'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      expect(updatedTodo).toEqual(<span class="literal">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'#toggleTodoComplete(todo)'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">'should return the updated todo with inverse complete status'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service: TodoDataService = TestBed.get(TodoDataService);</span><br><span class="line">      <span class="keyword">let</span> todo = <span class="keyword">new</span> Todo(&#123;title: <span class="string">'Hello 1'</span>, complete: <span class="literal">false</span>&#125;);</span><br><span class="line">      service.addTodo(todo);</span><br><span class="line">      <span class="keyword">let</span> updatedTodo = service.toggleTodoComplete(todo);</span><br><span class="line">      expect(updatedTodo.complete).toEqual(<span class="literal">true</span>);</span><br><span class="line">      service.toggleTodoComplete(todo);</span><br><span class="line">      expect(updatedTodo.complete).toEqual(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行测试：</p><blockquote><p>$ ng test</p></blockquote><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 11% building 12/12 modules 0 active19 04 2019 11:45:20.342:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 11:45:20.350:INFO [karma-server]: Karma v4.0.1 server started at http://0.0.0.0:9876/</span><br><span class="line">19 04 2019 11:45:20.351:INFO [launcher]: Launching browsers Chrome with concurrency unlimited                                                                                                   11% building 15/15 modules 0 active19 04 2019 11:45:20.378:INFO [launcher]: Starting browser Chrome                                                                                                                               19 04 2019 11:45:24.851:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 11:45:24.902:INFO [Chrome 73.0.3683 (Windows 10.0.0)]: Connected on socket 8KiTWeIsmEK4BogfAAAA with id 63883826</span><br><span class="line">Chrome 73.0.3683 (Windows 10.0.0): Executed 14 of 14 SUCCESS (0.119 secs / 0.236 secs)</span><br><span class="line">TOTAL: 14 SUCCESS</span><br><span class="line">TOTAL: 14 SUCCESS</span><br></pre></td></tr></table></figure></p><h1 id="编辑-AppComponent-组件"><a href="#编辑-AppComponent-组件" class="headerlink" title="编辑 AppComponent 组件"></a>编辑 AppComponent 组件</h1><hr><p>当我们初始化Todo应用程序的时候，Angular CLI 自动生成 AppComponent 组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/app/app.component.css</span><br><span class="line">src/app/app.component.html</span><br><span class="line">src/app/app.component.spec.ts</span><br><span class="line">src/app/app.component.ts</span><br></pre></td></tr></table></figure></p><p>打开src/app/app.component.html，更新成如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;todoapp&quot;&gt;</span><br><span class="line">  &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Todos&lt;/h1&gt;</span><br><span class="line">    &lt;input class=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autofocus=&quot;&quot; [(ngModel)]=&quot;newTodo.title&quot; (keyup.enter)=&quot;addTodo()&quot;&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;section class=&quot;main&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">      &lt;li *ngFor=&quot;let todo of todos&quot; [class.completed]=&quot;todo.complete&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">          &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; (click)=&quot;toggleTodoComplete(todo)&quot; [checked]=&quot;todo.complete&quot;&gt;</span><br><span class="line">          &lt;label&gt;&#123;&#123;todo.title&#125;&#125;&lt;/label&gt;</span><br><span class="line">          &lt;button class=&quot;destroy&quot; (click)=&quot;removeTodo(todo)&quot;&gt;&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">  &lt;footer class=&quot;footer&quot; *ngIf=&quot;todos.length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;todo-count&quot;&gt;&lt;strong&gt;&#123;&#123;todos.length&#125;&#125;&lt;/strong&gt; &#123;&#123;todos.length == 1 ? &apos;item&apos; : &apos;items&apos;&#125;&#125; left&lt;/span&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><ul><li>[property]=”expression”:set property of an element to the value of expression</li><li>(event)=”statement”: execute statement when event occurred</li><li>[(property)]=”expression”: create two-way binding with expression</li><li>[class.special]=”expression”: add special CSS class to element when the value of expression is truthy</li><li>[style.color]=”expression”: set color CSS property to the value of expression<br><em>英文原文更贴切</em></li></ul><p>让我们来看一下代码的含义：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> <span class="attr">autofocus</span>=<span class="string">""</span> [(<span class="attr">ngModel</span>)]=<span class="string">"newTodo.title"</span> (<span class="attr">keyup.enter</span>)=<span class="string">"addTodo()"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>[(ngModel)]=”newTodo.title”: adds a two-way binding between the input value and newTodo.title<br><em>需要在app.module.ts中引入FormsModule</em></li><li>(keyup.enter)=”addTodo()”: tells Angular to execute addTodo() when the enter key was pressed while typing in the input element</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span> *<span class="attr">ngIf</span>=<span class="string">"todos.length &gt; 0"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>*ngIf=”todos.length &gt; 0”: only show the section element and all its children when there is at least one todo</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let todo of todos"</span> [<span class="attr">class.completed</span>]=<span class="string">"todo.complete"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>*ngFor=”let todo of todos”: loop over all todos and assign current todo to a variable called todo for each iteration</li><li>[class.completed]=”todo.complete”: apply CSS class completed to li element when todo.complete is truthy</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> (<span class="attr">click</span>)=<span class="string">"toggleTodoComplete(todo)"</span> [<span class="attr">checked</span>]=<span class="string">"todo.complete"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> (<span class="attr">click</span>)=<span class="string">"removeTodo(todo)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>(click)=”toggleTodoComplete(todo)”: execute toggleTodoComplete(todo) when the checkbox is clicked</li><li>[checked]=”todo.complete”: assign the value of todo.complete to the property checked of the element</li><li>(click)=”removeTodo(todo)”: execute removeTodo(todo) when the destroy button is clicked</li></ul><p>组件类AppComponent定义在src/app/app.component.ts<br>Angular CLI 已经自动生成了一些基本代码：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  title = <span class="string">'todo-app'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以加入我们自己的逻辑。</p><p>我们需要在AppComponent注入TodoDataService服务<br>首先引入TodoDataService并在Component注解里的providers数组里声明<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import class so we can register it as dependency injection token</span></span><br><span class="line"><span class="keyword">import</span> &#123;TodoDataService&#125; <span class="keyword">from</span> <span class="string">'./todo-data.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  providers: [TodoDataService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The AppComponent’s dependency injector will now recognize the TodoDataService class as a dependency injection token and return a single instance of TodoDataService when we ask for it. </p><p>Angular’s dependency injection system accepts a variety of dependency injection recipes. The syntax above is a shorthand notation for the Class provider recipe that provides dependencies using the singleton pattern. Check out <a href="https://angular.io/docs/ts/latest/guide/dependency-injection.html" target="_blank" rel="noopener">Angular’s dependency injection documentation</a> for more details.</p><p>Now that the components dependency injector knows what it needs to provide, we ask it to inject the TodoDataService instance in our component by specifying the dependency in the AppComponent constructor:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import class so we can use it as dependency injection token in the constructor</span></span><br><span class="line"><span class="keyword">import</span> &#123;TodoDataService&#125; <span class="keyword">from</span> <span class="string">'./todo-data.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ask Angular DI system to inject the dependency</span></span><br><span class="line">  <span class="comment">// associated with the dependency injection token `TodoDataService`</span></span><br><span class="line">  <span class="comment">// and assign it to a property called `todoDataService`</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> todoDataService: TodoDataService</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Service is now available as this.todoDataService</span></span><br><span class="line">  toggleTodoComplete(todo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoDataService.toggleTodoComplete(todo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The use of public or private on arguments in the constructor is a shorthand notation that allows us to automatically create properties with that name, so:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  constructor(private todoDataService: TodoDataService) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is a shorthand notation for:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  private todoDataService: TodoDataService;</span><br><span class="line"></span><br><span class="line">  constructor(todoDataService: TodoDataService) &#123;</span><br><span class="line">    this.todoDataService = todoDataService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AppComponent类最终修改为：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Todo&#125; <span class="keyword">from</span> <span class="string">'./todo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TodoDataService&#125; <span class="keyword">from</span> <span class="string">'./todo-data.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>],</span><br><span class="line">  providers: [TodoDataService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line"></span><br><span class="line">  newTodo: Todo = <span class="keyword">new</span> Todo();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> todoDataService: TodoDataService</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addTodo() &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoDataService.addTodo(<span class="keyword">this</span>.newTodo);</span><br><span class="line">    <span class="keyword">this</span>.newTodo = <span class="keyword">new</span> Todo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggleTodoComplete(todo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoDataService.toggleTodoComplete(todo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTodo(todo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.todoDataService.deleteTodoById(todo.id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> todos() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.todoDataService.getAllTodos();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在用浏览器确认结果之前，先运行一下单元测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 11% building 12/12 modules 0 active19 04 2019 16:17:43.842:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 16:17:43.849:INFO [karma-server]: Karma v4.0.1 server started at http://0.0.0.0:9876/</span><br><span class="line">19 04 2019 16:17:43.849:INFO [launcher]: Launching browsers Chrome with concurrency unlimited</span><br><span class="line">19 04 2019 16:17:43.855:INFO [launcher]: Starting browser Chrome                                                                                                                               19 04 2019 16:17:48.227:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 16:17:48.278:INFO [Chrome 73.0.3683 (Windows 10.0.0)]: Connected on socket Cf5Oz6xR4SIbGUxlAAAA with id 5913544</span><br><span class="line">Chrome 73.0.3683 (Windows 10.0.0) AppComponent should create the app FAILED</span><br><span class="line">        Can&apos;t bind to &apos;ngModel&apos; since it isn&apos;t a known property of &apos;input&apos;. (&quot;&quot;&gt;</span><br><span class="line">            &lt;h1&gt;Todos&lt;/h1&gt;</span><br><span class="line">            &lt;input class=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autofocus=&quot;&quot; [ERROR -&gt;][(ngModel)]=&quot;newTodo.title&quot; (keyup.enter)=&quot;addTodo()&quot;&gt;</span><br><span class="line">          &lt;/header&gt;</span><br><span class="line">          &lt;section class=&quot;main&quot; *ngIf=&quot;tod&quot;): ng:///DynamicTestModule/AppComponent.html@3:78</span><br><span class="line">        Error: Template parse errors:</span><br><span class="line">            at syntaxError (node_modules/@angular/compiler/fesm5/compiler.js:2430:1)</span><br></pre></td></tr></table></figure></p><p>错误信息：Can’t bind to ‘ngModel’ since it isn’t a known property of ‘input’. (“”&gt;<br>原因是Angular编译器不识别ngModel,使用TestBed.createComponent()方法的时候，FormsModule没用被AppComponent载入。<br>打开src/app/app.component.spec.ts，引入FormsModule，更新并追加正确的测试用例：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TestBed, <span class="keyword">async</span> &#125; <span class="keyword">from</span> <span class="string">'@angular/core/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterTestingModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router/testing'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Todo &#125; <span class="keyword">from</span> <span class="string">'./todo'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AppComponent'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      imports: [</span><br><span class="line">        RouterTestingModule, </span><br><span class="line">        FormsModule</span><br><span class="line">      ],</span><br><span class="line">      declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">      ],</span><br><span class="line">    &#125;).compileComponents();</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should create the app'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    <span class="keyword">const</span> app = fixture.debugElement.componentInstance;</span><br><span class="line">    expect(app).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">`should have a newTodo todo`</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    <span class="keyword">let</span> app = fixture.debugElement.componentInstance;</span><br><span class="line">    expect(app.newTodo <span class="keyword">instanceof</span> Todo).toBeTruthy()</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should display "Todos" in h1 tag'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">    <span class="keyword">let</span> compiled = fixture.debugElement.nativeElement;</span><br><span class="line">    expect(compiled.querySelector(<span class="string">'h1'</span>).textContent).toContain(<span class="string">'Todos'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行测试用例，结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">11% building 14/14 modules 0 active19 04 2019 16:31:18.154:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 16:31:18.161:INFO [karma-server]: Karma v4.0.1 server started at http://0.0.0.0:9876/</span><br><span class="line">19 04 2019 16:31:18.162:INFO [launcher]: Launching browsers Chrome with concurrency unlimited                                                                                                   11% building 15/15 modules 0 active19 04 2019 16:31:18.173:INFO [launcher]: Starting browser Chrome                                                                                                                               19 04 2019 16:31:22.213:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">19 04 2019 16:31:22.276:INFO [Chrome 73.0.3683 (Windows 10.0.0)]: Connected on socket T2dVMSPq7ZeNBQsmAAAA with id 8843769</span><br><span class="line">Chrome 73.0.3683 (Windows 10.0.0): Executed 14 of 14 SUCCESS (0.203 secs / 0.265 secs)</span><br><span class="line">TOTAL: 14 SUCCESS</span><br><span class="line">TOTAL: 14 SUCCESS</span><br></pre></td></tr></table></figure></p><p>启动应用程序</p><blockquote><p>ng serve -o</p></blockquote><p>画面表示如下：<br><img src="http://static.ohtudou.cc/static/images/learn-angular-part2-2.bmp"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）Angular CLI入门</title>
      <link href="/2019/04/15/learn-angular-part1/"/>
      <url>/2019/04/15/learn-angular-part1/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/learn-angular-part1-1.png?imageView2/2/w/1000"><h1 id="Angular-CLI-是什么？"><a href="#Angular-CLI-是什么？" class="headerlink" title="Angular CLI 是什么？"></a>Angular CLI 是什么？</h1><hr><p>Angular CLI 是一个命令行接口(Command Line Interface)，用于实现自动化开发工作流程。它允许你做以下这些事情：</p><ul><li>创建一个新的 Angular 应用程序</li><li>运行带有 LiveReload 支持的开发服务器，以便在开发过程中预览应用程序</li><li>添加功能到现有的 Angular 应用程序</li><li>运行应用程序的单元测试</li><li>运行应用程序的端到端 (E2E) 测试</li><li>构建应用程序</li></ul><a id="more"></a><p>在详细介绍 Angular CLI 之前，我们先来看一下如何安装 Angular CLI。</p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><hr><p>在使用 Angular CLI 之前，你必须确保系统中 Node.js 的版本高于 6.9.0 且 npm 的版本高于 3.0.0。</p><p>若你尚未安装 Node.js，你可以访问 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 官网，然后根据你所用的操作系统选择对应的安装方式。</p><p>若你本机已经安装 Node.js 和 npm，你可以通过运行以下命令，确认一下当前环境信息：</p><blockquote><p>$ node - v # 显示当前Node.js的版本<br>$ npm -v # 显示当前npm的版本</p></blockquote><p>当你本机 Node.js 环境确认无误后，你可以在命令行使用 npm 安装 TypeScript：</p><blockquote><p>$ npm install -g typescript # 安装最新的TypeScript稳定版</p></blockquote><h1 id="安装-Angular-CLI"><a href="#安装-Angular-CLI" class="headerlink" title="安装 Angular CLI"></a>安装 Angular CLI</h1><hr><p>若要安装 Angular CLI，只需在命令行中运行以下命令：</p><blockquote><p>$ npm install -g @angular/cli</p></blockquote><p>验证是否成功安装 Angular CLI，可在命令行运行：</p><blockquote><p>$ ng version</p></blockquote><p>在我本机运行上述命令，则输出以下结果：</p><blockquote><p>Angular CLI: 7.3.7<br>Node: 10.15.0<br>OS: win32 x64<br>Angular:<br>…</p></blockquote><p>安装完 Angular CLI，接下来我们来使用它创建新的应用程序。</p><h1 id="创建新的-Angular-应用程序"><a href="#创建新的-Angular-应用程序" class="headerlink" title="创建新的 Angular 应用程序"></a>创建新的 Angular 应用程序</h1><hr><p>Angular CLI 为我们提供了两种方式，用于创建新的应用程序：</p><ul><li>ng init - 在当前目录创建新的应用程序</li><li>ng new - 创建新的目录，然后在新建的目录中运行 ng init 命令</li></ul><p>因此 ng new 与 ng init 的功能是相似的，只是 ng new 会为我们创建新的目录。<br>假设你还未创建新的目录，那么我们需要使用 ng new 命令来创建新的项目：</p><blockquote><p>$ ng new my-app</p></blockquote><p>当运行上面的命令后，将发生以下事情：</p><ul><li>新的 my-app 目录被创建</li><li>应用程序相关的源文件和目录将会被创建</li><li>应用程序的所有依赖 (package.json中配置的依赖项) 将会被自动安装</li><li>自动配置项目中的 TypeScript 开发环境</li><li>自动配置 Karma 单元测试环境</li><li>自动配置 Protractor (end-to-end) 测试环境</li><li>创建 environment 相关的文件并初始化为默认的设置</li></ul><p>此时 my-app 目录中 Angular 应用程序的目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── e2e</span><br><span class="line">│   ├── app.e2e-spec.ts</span><br><span class="line">│   ├── app.po.ts</span><br><span class="line">│   └── tsconfig.e2e.json</span><br><span class="line">├── karma.conf.js</span><br><span class="line">├── package.json</span><br><span class="line">├── protractor.conf.js</span><br><span class="line">├── src</span><br><span class="line">│   ├── app</span><br><span class="line">│   │   ├── app.component.css</span><br><span class="line">│   │   ├── app.component.html</span><br><span class="line">│   │   ├── app.component.spec.ts</span><br><span class="line">│   │   ├── app.component.ts</span><br><span class="line">│   │   └── app.module.ts</span><br><span class="line">│   ├── assets</span><br><span class="line">│   ├── environments</span><br><span class="line">│   │   ├── environment.prod.ts</span><br><span class="line">│   │   └── environment.ts</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── main.ts</span><br><span class="line">│   ├── polyfills.ts</span><br><span class="line">│   ├── styles.css</span><br><span class="line">│   ├── test.ts</span><br><span class="line">│   ├── tsconfig.app.json</span><br><span class="line">│   ├── tsconfig.spec.json</span><br><span class="line">│   └── typings.d.ts</span><br><span class="line">├── tsconfig.json</span><br><span class="line">└── tslint.json</span><br></pre></td></tr></table></figure></p><p>可用选项</p><ul><li>–dry-run: boolean, 默认为 false, 若设置 dry-run 则不会创建任何文件</li><li>–verbose: boolean, 默认为 false</li><li>–link-cli: boolean, 默认为 false, 自动链接到 @angular/cli 包</li><li>–skip-install: boolean, 默认为 false, 表示跳过 npm install</li><li>–skip-git: boolean, 默认为 false, 表示该目录不初始化为 git 仓库</li><li>–skip-tests: boolean, 默认为 false, 表示不创建 tests 相关文件</li><li>–skip-commit: boolean, 默认为 false, 表示不进行初始提交</li><li>–directory: string, 用于设置创建的目录名，默认与应用程序的同名</li><li>–source-dir: string, 默认为 ‘src’, 用于设置源文件目录的名称</li><li>–style: string, 默认为 ‘css’, 用于设置选用的样式语法 (‘css’, ‘less’ or ‘scss’)</li><li>–prefix: string, 默认为 ‘app’, 用于设置创建新组件时，组件选择器使用的前缀</li><li>–mobile: boolean, 默认为 false,表示是否生成 Progressive Web App 应用程序</li><li>–routing: boolean, 默认为 false, 表示新增带有路由信息的模块，并添加到根模块中</li><li>–inline-style: boolean, 默认为 false, 表示当创建新的应用程序时，使用内联样式</li><li>–inline-template: boolean, 默认为 false, 表示当创建新的应用程序时，使用内联模板</li></ul><p>除此之外，你可以在本机上运行 ng generate –help 查看更多的可用选项。接下来让我们来看一下如何运行应用程序。</p><h1 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h1><hr><p>首先进入使用 Angular CLI 创建的应用程序目录，例如：</p><blockquote><p>$ cd my-app</p></blockquote><p>然后运行：</p><blockquote><p>$ ng serve</p></blockquote><p>当运行上面的命令后，将发生以下事情：</p><ul><li>Angular CLI 从 .angular-cli.json 文件中加载配置信息</li><li>Angular CLI 运行 Webpack 打包相关 JavaScript 和 CSS 文件</li><li>Angular CLI 启动 webpack dev server 本地开发服务器，默认的地址是 localhost:4200</li><li>若要停止应用程序，你可以使用 ctrl+c 快捷键。</li></ul><h1 id="添加功能到现有的-Angular-应用程序"><a href="#添加功能到现有的-Angular-应用程序" class="headerlink" title="添加功能到现有的 Angular 应用程序"></a>添加功能到现有的 Angular 应用程序</h1><hr><p>你可以使用 ng generate 命令，为已有的 Angular 应用程序添加新的功能。</p><ul><li>ng generate class my-new-class: 新建 class</li><li>ng generate component my-new-component: 新建组件</li><li>ng generate directive my-new-directive: 新建指令</li><li>ng generate enum my-new-enum: 新建枚举</li><li>ng generate module my-new-module: 新建模块</li><li>ng generate pipe my-new-pipe: 新建管道</li><li>ng generate service my-new-service: 新建服务</li></ul><p>ng generate 命令与其它的子命令一样，也有快捷键，具体如下：</p><ul><li>ng g cl my-new-class: 新建 class</li><li>ng g c my-new-component: 新建组件</li><li>ng g d my-new-directive: 新建指令</li><li>ng g e my-new-enum: 新建枚举</li><li>ng g m my-new-module: 新建模块</li><li>ng g p my-new-pipe: 新建管道</li><li>ng g s my-new-service: 新建服务</li></ul><h2 id="添加新的类"><a href="#添加新的类" class="headerlink" title="添加新的类"></a>添加新的类</h2><p>为了添加类名为 UserProfile 类，我们可以运行：</p><blockquote><p>$ ng generate class user-profile</p></blockquote><p>Angular CLI 会自动调整文件名和类名的字母大小写，因此以下命令具有相同的效果：</p><blockquote><p>$ ng generate class user-profile<br>$ ng generate class userProfile<br>$ ng generate class UserProfile</p></blockquote><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>在 src/app 目录下将创建一个 user-profile.ts 文件，该文件导出一个名为 UserProfile 的类</li></ul><p>可用选项</p><ul><li>–spec: boolean, 默认为 false, 表示是否生成单元测试相关的 spec 文件</li></ul><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Generate class &apos;UserProfile&apos;</span><br><span class="line">$ ng generate class user-profile</span><br><span class="line"></span><br><span class="line"># Generate class &apos;UserProfile&apos; with unit test</span><br><span class="line">$ ng generate class user-profile --spec</span><br></pre></td></tr></table></figure></p><h2 id="添加新的组件"><a href="#添加新的组件" class="headerlink" title="添加新的组件"></a>添加新的组件</h2><p>若想创建一个选择器为 app-site-header 的组件，则可以运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate component site-header</span><br><span class="line">installing component</span><br><span class="line">  create src/app/site-header/site-header.component.css</span><br><span class="line">  create src/app/site-header/site-header.component.html</span><br><span class="line">  create src/app/site-header/site-header.component.spec.ts</span><br><span class="line">  create src/app/site-header/site-header.component.ts</span><br><span class="line">  update src/app/app.module.ts</span><br></pre></td></tr></table></figure></p><p>Angular CLI 将自动调整文件名和组件名称的字母大小写，并将前缀应用于组件选择器，因此以下命令具有相同的效果：</p><blockquote><p>$ ng generate component site-header<br>$ ng generate component siteHeader<br>$ ng generate component SiteHeader</p></blockquote><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>src/app/site-header 目录被创建</li><li><p>site-header 目录下会生成以下四个文件：</p><ul><li>CSS 样式文件，用于设置组件的样式</li><li>HTML 模板文件，用于设置组件的模板</li><li>TypeScript 文件，里面包含一个 SiteHeaderComponent 组件类和组件的元信息</li><li>Spec 文件，包含组件相关的测试用例</li></ul></li><li>SiteHeaderComponent 组件会被自动地添加到最近模块 @NgModule 装饰器的 declarations 属性中。</li></ul><p>可用选项</p><ul><li>–flat: boolean, 默认为 false, 表示在 src/app 目录下生成组件而不是在 src/app/site-header 目录中</li><li>–inline-template: boolean, 默认为 false, 表示使用内联模板而不是使用独立的模板文件</li><li>–inline-style: boolean, 默认为 false, 表示使用内联样式而不是使用独立的样式文件</li><li>–prefix: boolean, 默认为 true, 使用 .angular-cli.json 配置的前缀作为组件选择器的前缀</li><li>–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件</li><li>–view-encapsulation: string, 用于设置组件的视图封装策略</li><li>–change-detection: string, 用于设置组件的变化检测策略</li></ul><p>使用示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Generate component &apos;site-header&apos;</span><br><span class="line">$ ng generate component site-header</span><br><span class="line"></span><br><span class="line"># Generate component &apos;site-header&apos; with inline template and inline styles</span><br><span class="line">$ ng generate component site-header --inline-template --inline-style</span><br></pre></td></tr></table></figure><h2 id="添加新的指令"><a href="#添加新的指令" class="headerlink" title="添加新的指令"></a>添加新的指令</h2><p>若想创建一个选择器为 appAdminLink 的指令，则可以运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate directive admin-link</span><br><span class="line">installing directive</span><br><span class="line">  create src/app/admin-link.directive.spec.ts</span><br><span class="line">  create src/app/admin-link.directive.ts</span><br><span class="line">  update src/app/app.module.ts</span><br></pre></td></tr></table></figure></p><p>Angular CLI 将自动调整文件名和指令名称的字母大小写，并将前缀应用于指令选择器，因此以下命令具有相同的效果：</p><blockquote><p>$ ng generate directive admin-link<br>$ ng generate directive adminLink<br>$ ng generate directive AdminLink</p></blockquote><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>src/app/admin-link.directive.ts 文件被创建，该文件导出一个名为 AdminLinkDirective 且选择器为 appAdminLink 的指令</li><li>src/app/admin-link.directive.spec.ts 文件被创建，该文件包含指令相关的单元测试信息</li><li>AdminLinkDirective 指令会被自动地添加到最近模块 @NgModule 装饰器的 declarations 属性中。</li></ul><p>可用选项</p><ul><li>–flat: boolean, 默认为 true, 表示在 src/app 目录中生成指令而不是在 src/app/* admin-link 目录下</li><li>–prefix: boolean, 默认为 true, 使用 .angular-cli.json 配置的前缀作为指令选择器的前缀</li><li>–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件</li></ul><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Generate directive &apos;adminLink&apos;</span><br><span class="line">$ ng generate directive admin-link</span><br><span class="line"></span><br><span class="line"># Generate directive &apos;adminLink&apos; without unit test</span><br><span class="line">$ ng generate directive admin-link --spec=false</span><br></pre></td></tr></table></figure></p><h2 id="添加新的枚举"><a href="#添加新的枚举" class="headerlink" title="添加新的枚举"></a>添加新的枚举</h2><p>若想创建一个名为 Direction 的枚举类 ，则可以运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate enum direction</span><br><span class="line">installing enum</span><br><span class="line">  create src/app/direction.enum.ts</span><br></pre></td></tr></table></figure></p><p>Angular CLI 会自动调整文件名和枚举名称的字母大小写，因此以下命令具有相同的效果：</p><blockquote><p>$ ng generate enum direction<br>$ ng generate enum Direction</p></blockquote><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>src/app.direction.enum.ts 文件被创建，该文件导出名为 Direction 的枚举</li></ul><h2 id="添加新的模块"><a href="#添加新的模块" class="headerlink" title="添加新的模块"></a>添加新的模块</h2><p>若想创建一个新的模块 ，则可以运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate module admin</span><br><span class="line">installing module</span><br><span class="line">  create src/app/admin/admin.module.ts</span><br></pre></td></tr></table></figure></p><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>src/app/admin 目录被创建</li><li>在 src/app/admin/admin.module.ts 文件中，AdminModule 模块被创建</li></ul><p>需要注意的是，新增的模块不会被自动添加到 src/app/app.module.ts 文件中的 AppModule 模块中，用户可以根据具体需求导入对应的模块。</p><p>若要在其它模块中导入刚才新增的模块，可以在 @NgModule 的 imports 属性中设定该新增的模块。具体示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AdminModule &#125; from &apos;./admin/admin.module&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  imports: [</span><br><span class="line">    AdminModule</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></p><p>可用选项</p><ul><li>–routing: boolean, 默认为 false, 表示生成一个额外包含路由信息的 AdminRoutingModule 模块，且该模块会被自动地导入到新建的模块中</li><li>–spec: boolean, 默认为 false, 表示添加 src/app/admin/admin.module.spec.ts 单元测试文件</li></ul><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Add module &apos;admin&apos;</span><br><span class="line">$ ng generate module admin</span><br><span class="line"></span><br><span class="line"># Add module &apos;admin&apos; with additional module containing routing information</span><br><span class="line">$ ng generate module admin --routing</span><br></pre></td></tr></table></figure></p><h2 id="添加新的管道"><a href="#添加新的管道" class="headerlink" title="添加新的管道"></a>添加新的管道</h2><p>若想创建一个名为 convertToEuro 的管道 ，则可以运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate pipe convert-to-euro</span><br><span class="line">installing pipe</span><br><span class="line">  create src/app/convert-to-euro.pipe.spec.ts</span><br><span class="line">  create src/app/convert-to-euro.pipe.ts</span><br><span class="line">  update src/app/app.module.ts</span><br></pre></td></tr></table></figure></p><p>Angular CLI 会自动调整文件名和管道名称的字母大小写，因此以下命令具有相同的效果：</p><blockquote><p>$ ng generate pipe convert-to-euro<br>$ ng generate pipe convertToEuro<br>$ ng generate pipe ConvertToEuro</p></blockquote><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>src/app/convert-to-euro.pipe.ts 文件被创建，该文件导出一个名为 ConvertToEuroPipe 的管道类</li><li>src/app/convert-to-euro.pipe.spec.ts 文件被创建，该文件包含管道相关的单元测试信息</li><li>CovertToEuroPipe 管道会被自动地添加到最近模块 @NgModule 装饰器的 declarations 属性中。</li></ul><p>可用选项</p><ul><li>–flat: boolean, 默认为 true, 表示在 src/app 目录中生成管道而不是在 src/app/convert-to-euro 目录下</li><li>–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件</li></ul><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Generate pipe &apos;convertToEuro&apos; with spec and in /src/app directory</span><br><span class="line">$ ng generate pipe convert-to-euro</span><br><span class="line"></span><br><span class="line"># Generate pipe &apos;convertToEuro&apos; without spec and in /src/app/convert-to-euro directory</span><br><span class="line">$ ng generate pipe convert-to-euro --spec=false --flat=false</span><br></pre></td></tr></table></figure></p><h2 id="添加新的服务"><a href="#添加新的服务" class="headerlink" title="添加新的服务"></a>添加新的服务</h2><p>若想创建一个名为 BackendApiService 的服务 ，则可以运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate service backend-api</span><br><span class="line">installing service</span><br><span class="line">  create src/app/backend-api.service.spec.ts</span><br><span class="line">  create src/app/backend-api.service.ts</span><br><span class="line">  WARNING Service is generated but not provided, it must be provided to be used</span><br></pre></td></tr></table></figure></p><p>Angular CLI 会自动调整文件名和服务名称的字母大小写，因此以下命令具有相同的效果：</p><blockquote><p>$ ng generate service backend-api<br>$ ng generate service backendApi<br>$ ng generate service BackendApi</p></blockquote><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>src/app/backend-api.service 文件被创建，该文件导出一个名为 BackendApiService 的服务类</li><li>src/app/back-api.service.spec.ts 文件被创建，该文件包含管道相关的单元测试信息</li></ul><p>需要注意的是，Angular CLI 会提醒用户服务已成功创建，但尚未配置该服务。用户可以根据具体需求在模块或组件的 providers 属性中配置该新建的服务。具体示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BackendApiService &#125; from &apos;./backend-api.service&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  providers: [BackendApiService],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可用选项</p><ul><li>–flat: boolean, 默认为 true, 表示在 src/app 目录中生成服务而不是在 src/app/backend-api 目录下</li><li>–spec: boolean, 默认为 true, 表示生成包含单元测试的 spec 文件</li></ul><p>使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Generate service with DI token &apos;BackendApiService&apos; in /src/app directory</span><br><span class="line">$ ng generate service backend-api</span><br><span class="line"></span><br><span class="line"># Generate service with DI token &apos;BackendApiService&apos; in /src/app/backend-api directory</span><br><span class="line">$ ng generate service backend-api --flat=false</span><br></pre></td></tr></table></figure></p><h1 id="运行单元测试"><a href="#运行单元测试" class="headerlink" title="运行单元测试"></a>运行单元测试</h1><hr><p>Angular CLI 在新建项目的时候，自动为我们集成了 Karma test runner 测试框架。当添加新的功能时，我们可以利用 –spec 选项，告诉 Angular CLI 让它为我们生成功能相关的 .spec.ts 测试单元测试文件。</p><p>spec 文件在 src 目录中相应功能的同一目录下创建，这使得我们可以在使用功能时轻松找到它们。</p><p>若要运行单元测试，则可以运行：</p><blockquote><p>$ ng test</p></blockquote><p>此时在你的控制台将输出以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ng test</span><br><span class="line">[karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">[karma]: Karma v1.4.1 server started at http://0.0.0.0:9876/</span><br><span class="line">[launcher]: Launching browser Chrome with unlimited concurrency</span><br><span class="line">[launcher]: Starting browser Chrome</span><br></pre></td></tr></table></figure></p><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>Angular CLI 从 .angular-cli.json 文件中加载配置信息</li><li>Angular CLI 基于 .angular-cli.json 文件中的 Karma 相关的配置信息，运行 Karma。Karma 的配置文件默认在根目录下，文件名为 karma.conf.js 。</li><li>Karma 打开配置中设定的浏览器，默认是 Chrome。</li><li>Karma 然后指示浏览器 (Chrome) 使用 Karma 配置中指定的测试框架运行 src/test.ts。默认情况下，采用的是 Jasmine 框架。创建应用程序时，会自动创建 src/test.ts 文件。它预先配置为加载和配置测试Angular 应用程序所需的代码，并运行 src 目录中以 .spec.ts 结尾的所有文件。</li><li>Karma 将测试结果报告给控制台。</li><li>Karma 监听 src 目录下的文件的变化，然后自动运行单元测试。</li></ul><h1 id="运行-End-to-End-测试"><a href="#运行-End-to-End-测试" class="headerlink" title="运行 End-to-End 测试"></a>运行 End-to-End 测试</h1><hr><p>若要运行 e2e 测试，则可以运行：</p><blockquote><p>$ ng e2e</p></blockquote><h1 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h1><hr><p>若要构建应用程序，则可以运行：</p><blockquote><p>$ ng build</p></blockquote><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>Angular CLI 从 .angular-cli.json 文件中加载配置信息</li><li>Angular CLI 运行 Webpack 打包项目相关的 JavaScript 与 CSS 文件</li><li>打包后的资源，将被输出到配置文件中 outDir 所指定的目录，默认是输出到 dist 目录</li></ul><p>可用选项</p><ul><li>–aot: 开启 ahead-of-time 编译</li><li>–base-href: string, 设置 index.html 文件中 <base> 元素的链接地址</li><li>–environment: string, 设置所使用的环境，默认为 dev</li><li>–output-path: string, 设置输出的路径</li><li>–target: string, 设置所使用的环境，默认为 development</li><li>–watch: boolean, 默认为 false, 开启 watch 模式，监听文件异动并自动重新构建</li></ul><p>Targets</p><p>指定 target 的值，会影响到构建流程的运行方式。它的可选值：</p><ul><li>development: 默认的模式，意味着不进行代码压缩或混淆</li><li>production: 压缩和混淆代码</li></ul><p>若需使用 production 模式，构建应用程序，则可以运行：</p><blockquote><p>$ ng build –target=production</p></blockquote><p>Environments</p><p>Environments 让你能够自定义应用程序行为。</p><p>你可以在 .angular-cli.json 文件中定义自己的 environments 文件。默认的是：</p><ul><li><p>dev：environments/environment.ts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export const environment = &#123;</span><br><span class="line">  production: false</span><br><span class="line">&#125;;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li><li><p>prod：environments/environment.prod.ts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const environment = &#123;</span><br><span class="line">  production: true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>需要注意的是，构建流程默认使用 dev 环境。</p><p>如果指定了不同的环境，构建过程将使用相应的环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Uses environments/environment.ts</span><br><span class="line">$ ng build</span><br><span class="line"></span><br><span class="line"># Also uses environments/environment.ts</span><br><span class="line">$ ng build --environment=dev</span><br><span class="line">$ ng build --env=dev</span><br><span class="line"></span><br><span class="line"># Uses environments/environment.prod.ts</span><br><span class="line">$ ng build --environment=prod</span><br><span class="line">$ ng build --env=prod</span><br></pre></td></tr></table></figure></p><p>正如你在 src/main.ts 文件中看到的，通过导入 ./environments/environment 文件，我们就可以访问到 environment 相关的配置信息，具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; enableProdMode &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; platformBrowserDynamic &#125; from &apos;@angular/platform-browser-dynamic&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; AppModule &#125; from &apos;./app/app.module&apos;;</span><br><span class="line">import &#123; environment &#125; from &apos;./environments/environment&apos;;</span><br><span class="line"></span><br><span class="line">if (environment.production) &#123;</span><br><span class="line">  enableProdMode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">platformBrowserDynamic().bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure></p><h1 id="自定义构建流程"><a href="#自定义构建流程" class="headerlink" title="自定义构建流程"></a>自定义构建流程</h1><hr><p>从 v1.0 开始，Angular CLI 提供了一个命令，用于将你的应用程序与 Angular CLI 分离。</p><p>默认情况下，Angular CLI 为您管理基础 Webpack 配置，因此您无需处理其复杂性。如果你希望手动配置webpack，并且您不再需要在Angular应用程序中使用Angular CLI，则可以运行：</p><blockquote><p>$ ng eject</p></blockquote><p>此时在你的控制台将输出以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">==========================================================================================</span><br><span class="line">Ejection was successful.</span><br><span class="line"></span><br><span class="line">To run your builds, you now need to do the following commands:</span><br><span class="line">   - &quot;npm run build&quot; to build.</span><br><span class="line">   - &quot;npm run test&quot; to run unit tests.</span><br><span class="line">   - &quot;npm start&quot; to serve the app using webpack-dev-server.</span><br><span class="line">   - &quot;npm run e2e&quot; to run protractor.</span><br><span class="line"></span><br><span class="line">Running the equivalent CLI commands will result in an error.</span><br><span class="line"></span><br><span class="line">==========================================================================================</span><br><span class="line">Some packages were added. Please run &quot;npm install&quot;.</span><br></pre></td></tr></table></figure></p><p>运行上述命令后，在幕后将发生以下事情：</p><ul><li>ejected: true 的属性被添加到 .angular-cli.json 文件中</li><li>在应用程序的根目录下将生成独立的 webpack.config.js 文件，因此你可以在没有使用 Angular CLI 的环境下构建项目</li><li>package.json 中的构建脚本会被更新，因此你可以运行 npm run build 来构建项目</li><li>package.json 中的测试脚本会被更新，因此你可以运行 npm run test 来运行单元测试</li><li>package.json 中的启动脚本会被更新，因此你可以运行 npm run start 或 npm start 来启动开发服务器</li><li>package.json 中的 e2e 脚本会被更新，因此你可以运行 npm run e2e 来运行 End-to-End 测试</li></ul><p>把应用程序与 Angular CLI 分离后，你就可以根据自己的要求自定义 Webpack 的配置。</p><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><hr><ul><li><a href="https://www.sitepoint.com/ultimate-angular-cli-reference/" target="_blank" rel="noopener">ultimate-angular-cli-reference</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API MOCK-使用json-server，faker模拟API服务器</title>
      <link href="/2019/04/11/api-mock/"/>
      <url>/2019/04/11/api-mock/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/api-mock-1.png?imageView2/2/w/1000"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>在大多数开发流程中 后台开发人员一般会优先定义API文档给前端，前端开发者按照API文档先行编写业务逻辑，而此时API并不能真正调用，意味着我们根本不能调试。或者在新项目启动的时候，也经常面临“这个机能的API还没有开发完成。。。“，”因为xxx制约，本地开发环境不能利用这个API。。。”等情况，为了项目的顺利推进，利用API模拟服务器就显得很有必要了。今天就来介绍一下如何利用json-server，faker模拟API服务器来规避这种问题。<br><a id="more"></a><br>先来看一下JSON Server的官方网站上是如何介绍的<br><img src="http://static.ohtudou.cc/static/images/api-mock-2.png?imageView2/2/w/1000"></p><blockquote><p>“无需编码，30秒以内构建RESTful API模拟服务器哦！”</p></blockquote><h1 id="SETP1：安装"><a href="#SETP1：安装" class="headerlink" title="SETP1：安装"></a>SETP1：安装</h1><hr><p>首先全局或者本地安装</p><blockquote><p># 全局安装<br>npm install -g json-server<br># 本地安装<br>npm install json-server --save<br>＊win系统中需要管理者权限执行</p></blockquote><h1 id="SETP2：做成MOCK数据"><a href="#SETP2：做成MOCK数据" class="headerlink" title="SETP2：做成MOCK数据"></a>SETP2：做成MOCK数据</h1><hr><p>MOCK数据文件可以任意命名，使用JSON形式。<br>本例我们在当前目录下生成一个db.json文件 内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"customers"</span>: [</span><br><span class="line">      &#123; <span class="string">"id"</span>: <span class="number">1</span>, <span class="string">"first_name"</span>: <span class="string">"John"</span>, <span class="string">"last_name"</span>: <span class="string">"Smith"</span>,  <span class="string">"phone"</span>: <span class="string">"219-839-2819"</span> &#125;,</span><br><span class="line">      &#123; <span class="string">"id"</span>: <span class="number">2</span>, <span class="string">"first_name"</span>: <span class="string">"John"</span>, <span class="string">"last_name"</span>: <span class="string">"Smith"</span>,  <span class="string">"phone"</span>: <span class="string">"219-839-2819"</span> &#125;,</span><br><span class="line">      &#123; <span class="string">"id"</span>: <span class="number">3</span>, <span class="string">"first_name"</span>: <span class="string">"John"</span>, <span class="string">"last_name"</span>: <span class="string">"Smith"</span>,  <span class="string">"phone"</span>: <span class="string">"219-839-2819"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="SETP3：MOCK服务器启动"><a href="#SETP3：MOCK服务器启动" class="headerlink" title="SETP3：MOCK服务器启动"></a>SETP3：MOCK服务器启动</h1><hr><p>用JSON的文件名作为参数实行json-server</p><blockquote><p>json-server --watch db.json</p></blockquote><p>终端提示如下<br><img src="http://static.ohtudou.cc/static/images/api-mock-3.png"></p><p>我们看到json-server的Hom地址为<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a><br>当然我们也可以指定端口 这样我们就可以监听多个json文件</p><blockquote><p>json-server --watch -port 8888 db.json</p></blockquote><p>我们在浏览器中访问该地址将看到如下内容<br><img src="http://static.ohtudou.cc/static/images/api-mock-4.png"></p><h1 id="SETP4：利用Faker-js生成大量数据"><a href="#SETP4：利用Faker-js生成大量数据" class="headerlink" title="SETP4：利用Faker.js生成大量数据"></a>SETP4：利用Faker.js生成大量数据</h1><p>如果要自己瞎编API数据的话也是比较烦恼，用faker.js就可以轻松解决这个问题，他可以帮助你自动生成大量fake的json数据，作为后端数据。</p><p>安装faker.js</p><blockquote><p>npm install faker –save</p></blockquote><p>现在我们用javascript生成客户数据：<br>//db.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> faker = <span class="built_in">require</span>(<span class="string">'faker'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateData</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> customers = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> id = <span class="number">0</span>; id &lt; <span class="number">50</span>; id++) &#123;</span><br><span class="line">    <span class="keyword">var</span> firstName = faker.name.firstName()</span><br><span class="line">    <span class="keyword">var</span> lastName = faker.name.firstName()</span><br><span class="line">    <span class="keyword">var</span> phoneNumber = faker.phone.phoneNumberFormat()</span><br><span class="line">    customers.push(&#123;</span><br><span class="line">      <span class="string">"id"</span>: id,</span><br><span class="line">      <span class="string">"first_name"</span>: firstName,</span><br><span class="line">      <span class="string">"last_name"</span>: lastName,</span><br><span class="line">      <span class="string">"phone"</span>: phoneNumber</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> users = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> id = <span class="number">0</span>; id &lt; <span class="number">10</span>; id++) &#123;</span><br><span class="line">    <span class="keyword">var</span> firstName = faker.name.firstName()</span><br><span class="line">    <span class="keyword">var</span> lastName = faker.name.firstName()</span><br><span class="line">    <span class="keyword">var</span> phoneNumber = faker.phone.phoneNumberFormat()</span><br><span class="line">    users.push(&#123;</span><br><span class="line">      <span class="string">"id"</span>: id,</span><br><span class="line">      <span class="string">"name"</span>: &#123;</span><br><span class="line">        <span class="string">"first_name"</span>: firstName,</span><br><span class="line">        <span class="string">"last_name"</span>: lastName</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"phone"</span>: phoneNumber</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="string">"customers"</span>: customers, <span class="string">"users"</span>: users &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = generateData</span><br></pre></td></tr></table></figure></p><p>然后让json-server指向这个js文件：</p><blockquote><p>json-server –watch db.js</p></blockquote><p>这样你就可以在<a href="http://localhost:3000/customers里看到更多的随机客户数据了。" target="_blank" rel="noopener">http://localhost:3000/customers里看到更多的随机客户数据了。</a><br><img src="http://static.ohtudou.cc/static/images/api-mock-5.png"></p><h1 id="SETP5：数据的取得"><a href="#SETP5：数据的取得" class="headerlink" title="SETP5：数据的取得"></a>SETP5：数据的取得</h1><hr><h2 id="常规获取："><a href="#常规获取：" class="headerlink" title="常规获取："></a>常规获取：</h2><blockquote><p><a href="http://localhost:3000/users" target="_blank" rel="noopener">http://localhost:3000/users</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"first_name"</span>: <span class="string">"Kendra"</span>,</span><br><span class="line">    <span class="attr">"last_name"</span>: <span class="string">"Yasmin"</span>,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"425-502-4463"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"first_name"</span>: <span class="string">"Guillermo"</span>,</span><br><span class="line">    <span class="attr">"last_name"</span>: <span class="string">"Dorothy"</span>,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"510-457-3094"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h2 id="Filter指定："><a href="#Filter指定：" class="headerlink" title="Filter指定："></a>Filter指定：</h2><blockquote><p><a href="http://localhost:3000/users/6" target="_blank" rel="noopener">http://localhost:3000/users/6</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"name"</span>: &#123;</span><br><span class="line">    <span class="attr">"first_name"</span>: <span class="string">"Martine"</span>,</span><br><span class="line">    <span class="attr">"last_name"</span>: <span class="string">"Lauretta"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"325-320-1577"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用如下指令，但要注意，此时返回的数据是一个数组</p><blockquote><p><a href="http://localhost:3000/users?id=6" target="_blank" rel="noopener">http://localhost:3000/users?id=6</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"Martine"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>: <span class="string">"Lauretta"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"325-320-1577"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>以此类推，也可以通过名称来获取数据：</p><blockquote><p><a href="http://localhost:3000/users?phone=325-320-1577" target="_blank" rel="noopener">http://localhost:3000/users?phone=325-320-1577</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"Martine"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>: <span class="string">"Lauretta"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"325-320-1577"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>也可以指定多个条件，用&amp;符号连接，甚至还可以使用对象取属性值 obj.key 的方式：</p><blockquote><p><a href="http://localhost:3000/users?name.first_name=Martine&amp;name.last_name=Lauretta" target="_blank" rel="noopener">http://localhost:3000/users?name.first_name=Martine&amp;name.last_name=Lauretta</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"Martine"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>: <span class="string">"Lauretta"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"325-320-1577"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="分页Paginate"><a href="#分页Paginate" class="headerlink" title="分页Paginate"></a>分页Paginate</h2><p>分页采用 _page 来设置页码，_limit 来控制每页显示条数。如果没有指定  _limit ，默认每页显示10条。</p><blockquote><p><a href="http://localhost:3000/users?_page=2&amp;_limit=2" target="_blank" rel="noopener">http://localhost:3000/users?_page=2&amp;_limit=2</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"Destany"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>: <span class="string">"Colten"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"434-672-9728"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"Dandre"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>: <span class="string">"Gabriel"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"692-958-9655"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="排序Sort"><a href="#排序Sort" class="headerlink" title="排序Sort"></a>排序Sort</h2><p>排序采用 _sort 来指定要排序的字段， _order 来指定排序是正排序还是逆排序（asc | desc ，默认是asc）</p><blockquote><p><a href="http://localhost:3000/users?_sort=id&amp;_order=desc" target="_blank" rel="noopener">http://localhost:3000/users?_sort=id&amp;_order=desc</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"Hazel"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>: <span class="string">"Gwendolyn"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"492-621-9356"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: <span class="string">"Sarah"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span>: <span class="string">"Vern"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"018-499-3982"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>也可以指定多个字段排序，一般是按照id进行排序后，相同id的再跟进name排序：</p><blockquote><p><a href="http://localhost:3000/users?_sort=id,name&amp;_order=desc,asc" target="_blank" rel="noopener">http://localhost:3000/users?_sort=id,name&amp;_order=desc,asc</a></p></blockquote><h2 id="取局部数据Slice"><a href="#取局部数据Slice" class="headerlink" title="取局部数据Slice"></a>取局部数据Slice</h2><p>采用 _start 来指定开始位置， _end 来指定结束位置、或者是用_limit来指定从开始位置起往后取几个数据。</p><blockquote><p><a href="http://localhost:3000/users?_start=2&amp;_end=4" target="_blank" rel="noopener">http://localhost:3000/users?_start=2&amp;_end=4</a><br><a href="http://localhost:3000/users?_start=2&amp;_limit=4" target="_blank" rel="noopener">http://localhost:3000/users?_start=2&amp;_limit=4</a></p></blockquote><h2 id="取符合某个范围Operators"><a href="#取符合某个范围Operators" class="headerlink" title="取符合某个范围Operators"></a>取符合某个范围Operators</h2><p>采用 _gte _lte 来设置一个取值范围（range）:</p><blockquote><p><a href="http://localhost:3000/users?id_gte=4&amp;id_lte=6" target="_blank" rel="noopener">http://localhost:3000/users?id_gte=4&amp;id_lte=6</a></p></blockquote><p>采用_ne来设置不包含某个值：</p><blockquote><p><a href="http://localhost:3000/users?id_ne=1" target="_blank" rel="noopener">http://localhost:3000/users?id_ne=1</a></p></blockquote><p>采用_like来设置匹配某个字符串（或正则表达式）：</p><blockquote><p><a href="http://localhost:3000/users?name_like=apple" target="_blank" rel="noopener">http://localhost:3000/users?name_like=apple</a></p></blockquote><h2 id="全文搜索-Full-text-search"><a href="#全文搜索-Full-text-search" class="headerlink" title="全文搜索 Full-text search"></a>全文搜索 Full-text search</h2><p>采用 q 来设置搜索内容:</p><blockquote><p><a href="http://localhost:3000/users?q=oran" target="_blank" rel="noopener">http://localhost:3000/users?q=oran</a></p></blockquote><h2 id="关联关系-Relationships"><a href="#关联关系-Relationships" class="headerlink" title="关联关系 Relationships"></a>关联关系 Relationships</h2><p>采用 _embed 来设置（创建或包含）一个子资源。</p><blockquote><p><a href="http://localhost:3000/users?_embed=personInfo" target="_blank" rel="noopener">http://localhost:3000/users?_embed=personInfo</a></p></blockquote><p>采用 _expand 来设置是否包含某个父资源。</p><blockquote><p><a href="http://localhost:3000/users?_expand=users" target="_blank" rel="noopener">http://localhost:3000/users?_expand=users</a></p></blockquote><p>获取嵌套资源</p><blockquote><p><a href="http://localhost:3000/users/1/shops" target="_blank" rel="noopener">http://localhost:3000/users/1/shops</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> 前端MOCK </tag>
            
            <tag> json-server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探秘奇数阶幻方</title>
      <link href="/2017/07/07/odd-number-factor-magic-squar/"/>
      <url>/2017/07/07/odd-number-factor-magic-squar/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/onfms1.jpeg?imageView2/2/w/1000"><h1 id="演变过程"><a href="#演变过程" class="headerlink" title="演变过程"></a>演变过程</h1><p>河图与洛书是中国古代流传下来的两幅神秘图案，历来被认为是河洛文化的滥觞，中华文明的源头，被誉为”宇宙魔方”。相传，上古伏羲氏时，洛阳东北孟津县境内的黄河中浮出龙马，背负”河图”，献给伏羲。伏羲依此而演成八卦，后为《周易》来源。又相传，大禹时，洛阳西洛宁县洛河中浮出神龟，背驮”洛书”，献给大禹，用现在的数字翻译出来，就是三阶幻方。大禹依此治水成功，遂划天下为九州。又依此定九章大法，治理社会，流传下来收入《尚书》中，名《洪范》。《易·系辞上》有言：”河出图，洛出书，圣人则之”。</p><a id="more"></a><h1 id="古代构造方法"><a href="#古代构造方法" class="headerlink" title="古代构造方法"></a>古代构造方法</h1><ul><li><p>南宋数学家杨辉概括的构造方法为：</p><p>  九子斜排。上下对易，</p><p>  左右相更。四维突出。</p></li><li><p>中国古代九宫格的填法口诀是：</p><p>  九宫之义，法以灵龟，</p><p>  二四为肩，六八为足，</p><p>  左七右三，戴九履一，</p><p>  五居中央。</p></li><li><p>也有把这两者综合起来说的：</p><p>  九子斜排，上下对易，</p><p>  左右相更，四维挺出，</p><p>  戴九履一，左七右三，</p><p>  二四为肩，六八为足</p><p>  即</p><img src="http://static.ohtudou.cc/static/images/onfms2.jpeg"><p>  或</p><img src="http://static.ohtudou.cc/static/images/onfms3.jpeg"></li></ul><h1 id="奇阶幻方通用构造法"><a href="#奇阶幻方通用构造法" class="headerlink" title="奇阶幻方通用构造法"></a>奇阶幻方通用构造法</h1><ul><li><p>口诀：</p><p>  1居上行正中央，</p><p>  依次斜填切莫忘，</p><p>  上出框界往下写，</p><p>  右出框时左边放，</p><p>  重复便在下格填，</p><p>  出角重复一个样。</p></li><li><p>解释：</p><p>  1)在第一行居中的方格内放1，依次向右上方填入2、3、4…；</p><p>  2)如果这个数所要放的格已经超出了顶行那么就把它放在底行，仍然要放在右一列；</p><p>  3)如果这个数所要放的格已经超出了最右列那么就把它放在最左列，仍然要放在上一行；</p><p>  4)如果右上方已有数字和出了对角线，则向下移一格继续填写。</p><p>  5)右上角出格和4）一样，下移一格继续填写。</p><p>  例：</p></li></ul><img src="http://static.ohtudou.cc/static/images/onfms4.jpeg">]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 幻方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超简GIT命令</title>
      <link href="/2017/06/23/simple-git-command/"/>
      <url>/2017/06/23/simple-git-command/</url>
      
        <content type="html"><![CDATA[<h1 id="超简GIT命令"><a href="#超简GIT命令" class="headerlink" title="超简GIT命令"></a>超简GIT命令</h1><img src="http://static.ohtudou.cc/static/images/simple-git-command-1.png?imageView2/2/w/1000">]]></content>
      
      
      <categories>
          
          <category> 资产管理 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本管理 </tag>
            
            <tag> 仓库 </tag>
            
            <tag> 分布式版本控制 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simulator and Emulator</title>
      <link href="/2017/06/22/simulator-and-emulator/"/>
      <url>/2017/06/22/simulator-and-emulator/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/simulator-and-emulator-1.png?imageView2/2/w/1000"><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><hr><p><strong>仿真器（Emulator）</strong>，又称仿真程序，在软件工程中指可以使计算机或者其他多媒体平台（掌上电脑，手机）能够运行其他平台上的程序，常被错误的称为模拟器。仿真器多用于电视游戏和街机，也有一些用于掌上电脑。仿真器一般需要ROM才能执行，ROM的最初来源是一些原平台的ROM芯片，通过一些手段将原程序拷贝下来（这个过程一般称之为“dump”）然后利用仿真器加载这些ROM来实现仿真过程。</p><p><strong>模拟器（simulator）</strong>，又称模拟程序，在计算机科学技术的软件工程中，是指完全基于主机程序并模拟了目标处理器的功能和指令系统的程序。而仿真器（emulator）具有更强大的硬件模仿功能。</p><a id="more"></a><h1 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h1><hr><p>看起来很相似，实现方式差别很大。模拟器（simulator）主要是对接口的实现，而仿真器（Emulator）更关注对本体的实现。</p><h1 id="Host可移植性"><a href="#Host可移植性" class="headerlink" title="Host可移植性"></a>Host可移植性</h1><hr><p>模拟器（simulator）的本体基本是由HOST系统实现的，如果移植到其他HOST上，所有功能相当于重新做成，可移植性差。相对于模拟器，仿真器的可移植性要好很多。</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><hr><p>用实现方式来举例</p><h2 id="模拟器（simulator）"><a href="#模拟器（simulator）" class="headerlink" title="模拟器（simulator）"></a>模拟器（simulator）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">targetFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  similarFuncOnHost();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仿真器（Emulator）"><a href="#仿真器（Emulator）" class="headerlink" title="仿真器（Emulator）"></a>仿真器（Emulator）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">targetFunc</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">  targetMiddleWare()  &#123;</span><br><span class="line">    targetOsSystemCall()  &#123;</span><br><span class="line">      targetHwAccess()  &#123;</span><br><span class="line">        similarFunctionOnHost();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> Android </tag>
            
            <tag> iPhone </tag>
            
            <tag> Simulator </tag>
            
            <tag> Emulator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS + Apache2.4 + MySQL5.7 + PHP5.6 环境构筑</title>
      <link href="/2017/06/21/make-php5-dev/"/>
      <url>/2017/06/21/make-php5-dev/</url>
      
        <content type="html"><![CDATA[<img src="http://static.ohtudou.cc/static/images/make-php5-dev-1.jpg?imageView2/2/w/1000"><h1 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h1><p>按照安装向导安装VirtualBox-5.1.14-112924-OSX.dmg</p><h1 id="安装CentOS7"><a href="#安装CentOS7" class="headerlink" title="安装CentOS7"></a>安装CentOS7</h1><p>CentOS-7-x86_64-DVD-1611.iso</p><a id="more"></a><h1 id="安装Guest-Additions"><a href="#安装Guest-Additions" class="headerlink" title="安装Guest Additions"></a>安装Guest Additions</h1><h1 id="安装Apache2-4"><a href="#安装Apache2-4" class="headerlink" title="安装Apache2.4"></a>安装Apache2.4</h1><ol><li><p>安装</p><blockquote><p># yum -y install httpd</p></blockquote></li><li><p>启动httpd</p><blockquote><p># systemctl restart httpd</p></blockquote></li><li><p>外部可访问</p><blockquote><p># firewall-cmd –add-service=http –permanent<br># firewall-cmd –reload</p></blockquote></li></ol><h1 id="安装MySQL5-7"><a href="#安装MySQL5-7" class="headerlink" title="安装MySQL5.7"></a>安装MySQL5.7</h1><blockquote><p>\$ sudo rpm -ivh <a href="http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm" target="_blank" rel="noopener">http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</a><br>\$ sudo yum install -y mysql-community-server</p></blockquote><blockquote><p>\$ mysqld –version  # mysql server 版本确认<br>mysqld  Ver 5.7.12 for Linux on x86_64 (MySQL Community Server (GPL))</p></blockquote><blockquote><p>\$ mysql –version  # mysql client 版本确认<br>mysql  Ver 14.14 Distrib 5.7.12, for Linux (x86_64) using  EditLine wrapper</p></blockquote><h1 id="确认MySQL的初始化密码"><a href="#确认MySQL的初始化密码" class="headerlink" title="确认MySQL的初始化密码"></a>确认MySQL的初始化密码</h1><p>启动MySQL</p><blockquote><p>\$ sudo systemctl start mysqld.service</p></blockquote><p><strong><em>※MySQL 5.7初次启动时，自动生成初始化密码、可以在MySQL的LOG文件中确认</em></strong></p><blockquote><p>\$ mysql -u root -p<br>Enter password:<br>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)</p><p>\$ sudo cat /var/log/mysqld.log | grep ‘temporary password’  # 确认初始化密码<br>2016-04-21T14:20:10.491632Z 1 [Note] A temporary password is generated for root@localhost: xeqaVmIrY4=e</p></blockquote><h1 id="MySQL安全设定"><a href="#MySQL安全设定" class="headerlink" title="MySQL安全设定"></a>MySQL安全设定</h1><blockquote><p>\$ mysql_secure_installation<br>Securing the MySQL server deployment.<br>Enter password for user root:  # 输入初始化密码</p><p>The existing password for the user account root has expired. Please set a new password.</p><p>New password:</p><p>Re-enter new password:</p><p>The ‘validate_password’ plugin is installed on the server.</p><p>The subsequent steps will run with the existing &gt;configuration of the plugin.</p><p>Using existing password for root.</p><p>Estimated strength of the password: 100</p><p>Change the password for root ? ((Press y|Y for Yes, any other key for No) : y</p><p>New password:</p><p>Re-enter new password:</p><p>Estimated strength of the password: 100</p><p>Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y</p><p>By default, a MySQL installation has an anonymous user,</p><p>allowing anyone to log into MySQL without having to have a user account created for them. </p><p>This is intended only for testing, and to make the installation go a bit smoother.</p><p>You should remove them before moving into a production environment.</p><p>Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</p><p>Success.</p><p>Normally, root should only be allowed to connect from ‘localhost’. This ensures that someone cannot guess at the root password from the network.</p><p>Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n</p><p>Success.</p><p>By default, MySQL comes with a database named ‘test’ that anyone can access. </p><p>This is also intended only for testing, and should be removed before moving into a production environment.</p><p>Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y</p><p>- Dropping test database…</p><p>Success.</p><p>- Removing privileges on test database…</p><p>Success.</p><p>Reloading the privilege tables will ensure that all changes made so far will take effect immediately.</p><p>Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</p><p>Success.</p><p>All done!</p></blockquote><h1 id="MySQL登录确认"><a href="#MySQL登录确认" class="headerlink" title="MySQL登录确认"></a>MySQL登录确认</h1><blockquote><p>\$ mysql -u root -p</p><p>Enter password:</p><p>Welcome to the MySQL monitor.  Commands end with ; or \g.</p><p>Your MySQL connection id is 6</p><p>Server version: 5.7.12 MySQL Community Server (GPL)</p><p>Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</p><p>Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners.</p><p>Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.</p><p>mysql&gt; show databases;</p><p>+———————-+</p><p>| Database                     |</p><p>+———————-+</p><p>| information_schema   |</p><p>| mysql                            |</p><p>| performance_schema |</p><p>| sys                                 |</p><p>+———————-+</p><p>4 rows in set (0.00 sec)</p><p>mysql&gt;</p></blockquote><h1 id="编辑设定文件，自启动设定"><a href="#编辑设定文件，自启动设定" class="headerlink" title="编辑设定文件，自启动设定"></a>编辑设定文件，自启动设定</h1><blockquote><p>\$ sudo vi /etc/my.cnf</p><p>my.cnf</p><p>[mysqld]</p><p>…</p><p>character-set-server = utf8</p><p>default_password_lifetime = 0</p><p>\$ sudo systemctl restart mysqld.service</p><p>\$ sudo systemctl enable mysqld.service</p><p>\$ systemctl list-unit-files -t service | grep mysqld</p><p>mysqld.service                              enabled</p></blockquote><h1 id="外部访问设定"><a href="#外部访问设定" class="headerlink" title="外部访问设定"></a>外部访问设定</h1><blockquote><p>firewall-cmd –add-port=3306/tcp –permanent</p><p>mysql -uroot -p</p><p>grant all privileges on <em>.</em> to ‘root‘@’192.168.0.1’ identified by ‘password’ with grant option;</p><p><strong><em>※IP：192.168.0.1可以访问，如果需要全部允许，需要设置成’%’</em></strong></p></blockquote><h1 id="安装PHP5-6"><a href="#安装PHP5-6" class="headerlink" title="安装PHP5.6"></a>安装PHP5.6</h1><blockquote><p># rpm -Uvh <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p><p># rpm -Uvh <a href="https://mirror.webtatic.com/yum/el7/webtatic-release.rpm" target="_blank" rel="noopener">https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</a></p><p># yum install php56w php56w-common php56w-gd php56w-mbstring php56w-mcrypt php56w-mysqlnd</p></blockquote><p>確認</p><blockquote><p># php -v</p></blockquote><h1 id="编辑httpd-conf"><a href="#编辑httpd-conf" class="headerlink" title="编辑httpd.conf"></a>编辑httpd.conf</h1><blockquote><p>vi /etc/httpd/conf/httpd.confOptions Indexes FollowSymLinks</p><p>&lt;Directory “/var/www/test”></p><p>Options Indexes FollowSymLinks</p><p>AllowOverride None</p><p>Require all granted</p><p>&lt;/Directory></p><ifmodule alias_module\><p>…</p><p>Alias /test /var/www/test</p><p>&lt;/IfModule></p><p>Alias /test /var/www/testAddType application/x-httpd-php .php &lt;- 追加</p></ifmodule></blockquote><h1 id="php运行确认"><a href="#php运行确认" class="headerlink" title="php运行确认"></a>php运行确认</h1><blockquote><p>vi /var/www/html/info.php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">phpinfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://localhost/info.php" target="_blank" rel="noopener">http://localhost/info.php</a></p></blockquote><h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><ol><li><p>设定权限</p><blockquote><p>chmod -R 777  /var/www/test<br>chown -R apache:apache  /var/www/test</p></blockquote></li><li><p>selinux设定</p><blockquote><p>vi  /etc/sysconfig/selinux<br>selinux=disabled</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> CentOS </tag>
            
            <tag> Apache </tag>
            
            <tag> PHP5.6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
